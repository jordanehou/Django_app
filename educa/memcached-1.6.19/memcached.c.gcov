        -:    0:Source:memcached.c
        -:    0:Graph:memcached.gcno
        -:    0:Data:memcached.gcda
        -:    0:Runs:403
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: *  memcached - memory caching daemon
        -:    4: *
        -:    5: *       https://www.memcached.org/
        -:    6: *
        -:    7: *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.
        -:    8: *
        -:    9: *  Use and distribution licensed under the BSD license.  See
        -:   10: *  the LICENSE file for full text.
        -:   11: *
        -:   12: *  Authors:
        -:   13: *      Anatoly Vorobey <mellon@pobox.com>
        -:   14: *      Brad Fitzpatrick <brad@danga.com>
        -:   15: */
        -:   16:#include "memcached.h"
        -:   17:#include "storage.h"
        -:   18:#include "authfile.h"
        -:   19:#include "restart.h"
        -:   20:#include <sys/stat.h>
        -:   21:#include <sys/socket.h>
        -:   22:#include <sys/un.h>
        -:   23:#include <signal.h>
        -:   24:#include <sys/param.h>
        -:   25:#include <sys/resource.h>
        -:   26:#include <sys/uio.h>
        -:   27:#include <ctype.h>
        -:   28:#include <stdarg.h>
        -:   29:
        -:   30:/* some POSIX systems need the following definition
        -:   31: * to get mlockall flags out of sys/mman.h.  */
        -:   32:#ifndef _P1003_1B_VISIBLE
        -:   33:#define _P1003_1B_VISIBLE
        -:   34:#endif
        -:   35:#include <pwd.h>
        -:   36:#include <sys/mman.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <netinet/tcp.h>
        -:   39:#include <arpa/inet.h>
        -:   40:#include <errno.h>
        -:   41:#include <stdlib.h>
        -:   42:#include <stdio.h>
        -:   43:#include <string.h>
        -:   44:#include <time.h>
        -:   45:#include <assert.h>
        -:   46:#include <sysexits.h>
        -:   47:#include <stddef.h>
        -:   48:
        -:   49:#ifdef HAVE_GETOPT_LONG
        -:   50:#include <getopt.h>
        -:   51:#endif
        -:   52:
        -:   53:#ifdef TLS
        -:   54:#include "tls.h"
        -:   55:#endif
        -:   56:
        -:   57:#include "proto_text.h"
        -:   58:#include "proto_bin.h"
        -:   59:#include "proto_proxy.h"
        -:   60:
        -:   61:#if defined(__FreeBSD__)
        -:   62:#include <sys/sysctl.h>
        -:   63:#endif
        -:   64:
        -:   65:/*
        -:   66: * forward declarations
        -:   67: */
        -:   68:static void drive_machine(conn *c);
        -:   69:static int new_socket(struct addrinfo *ai);
        -:   70:static ssize_t tcp_read(conn *arg, void *buf, size_t count);
        -:   71:static ssize_t tcp_sendmsg(conn *arg, struct msghdr *msg, int flags);
        -:   72:static ssize_t tcp_write(conn *arg, void *buf, size_t count);
        -:   73:
        -:   74:enum try_read_result {
        -:   75:    READ_DATA_RECEIVED,
        -:   76:    READ_NO_DATA_RECEIVED,
        -:   77:    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */
        -:   78:    READ_MEMORY_ERROR      /** failed to allocate more memory */
        -:   79:};
        -:   80:
        -:   81:static int try_read_command_negotiate(conn *c);
        -:   82:static int try_read_command_udp(conn *c);
        -:   83:
        -:   84:static enum try_read_result try_read_network(conn *c);
        -:   85:static enum try_read_result try_read_udp(conn *c);
        -:   86:
        -:   87:static int start_conn_timeout_thread(void);
        -:   88:
        -:   89:/* stats */
        -:   90:static void stats_init(void);
        -:   91:static void conn_to_str(const conn *c, char *addr, char *svr_addr);
        -:   92:
        -:   93:/* defaults */
        -:   94:static void settings_init(void);
        -:   95:
        -:   96:/* event handling, network IO */
        -:   97:static void event_handler(const evutil_socket_t fd, const short which, void *arg);
        -:   98:static void conn_close(conn *c);
        -:   99:static void conn_init(void);
        -:  100:static bool update_event(conn *c, const int new_flags);
        -:  101:static void complete_nread(conn *c);
        -:  102:
        -:  103:static void conn_free(conn *c);
        -:  104:
        -:  105:/** exported globals **/
        -:  106:struct stats stats;
        -:  107:struct stats_state stats_state;
        -:  108:struct settings settings;
        -:  109:time_t process_started;     /* when the process was started */
        -:  110:conn **conns;
        -:  111:
        -:  112:struct slab_rebalance slab_rebal;
        -:  113:volatile int slab_rebalance_signal;
        -:  114:#ifdef EXTSTORE
        -:  115:/* hoping this is temporary; I'd prefer to cut globals, but will complete this
        -:  116: * battle another day.
        -:  117: */
        -:  118:void *ext_storage = NULL;
        -:  119:#endif
        -:  120:/** file scope variables **/
        -:  121:static conn *listen_conn = NULL;
        -:  122:static int max_fds;
        -:  123:static struct event_base *main_base;
        -:  124:
        -:  125:enum transmit_result {
        -:  126:    TRANSMIT_COMPLETE,   /** All done writing. */
        -:  127:    TRANSMIT_INCOMPLETE, /** More data remaining to write. */
        -:  128:    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */
        -:  129:    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */
        -:  130:};
        -:  131:
        -:  132:/* Default methods to read from/ write to a socket */
   576271:  133:ssize_t tcp_read(conn *c, void *buf, size_t count) {
  576271*:  134:    assert (c != NULL);
   576271:  135:    return read(c->sfd, buf, count);
        -:  136:}
        -:  137:
   412836:  138:ssize_t tcp_sendmsg(conn *c, struct msghdr *msg, int flags) {
  412836*:  139:    assert (c != NULL);
   412836:  140:    return sendmsg(c->sfd, msg, flags);
        -:  141:}
        -:  142:
     4049:  143:ssize_t tcp_write(conn *c, void *buf, size_t count) {
    4049*:  144:    assert (c != NULL);
     4049:  145:    return write(c->sfd, buf, count);
        -:  146:}
        -:  147:
        -:  148:static enum transmit_result transmit(conn *c);
        -:  149:
        -:  150:/* This reduces the latency without adding lots of extra wiring to be able to
        -:  151: * notify the listener thread of when to listen again.
        -:  152: * Also, the clock timer could be broken out into its own thread and we
        -:  153: * can block the listener via a condition.
        -:  154: */
        -:  155:static volatile bool allow_new_conns = true;
        -:  156:static int stop_main_loop = NOT_STOP;
        -:  157:static struct event maxconnsevent;
    #####:  158:static void maxconns_handler(const evutil_socket_t fd, const short which, void *arg) {
    #####:  159:    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};
        -:  160:
    #####:  161:    if (fd == -42 || allow_new_conns == false) {
        -:  162:        /* reschedule in 10ms if we need to keep polling */
    #####:  163:        evtimer_set(&maxconnsevent, maxconns_handler, 0);
    #####:  164:        event_base_set(main_base, &maxconnsevent);
    #####:  165:        evtimer_add(&maxconnsevent, &t);
        -:  166:    } else {
    #####:  167:        evtimer_del(&maxconnsevent);
    #####:  168:        accept_new_conns(true);
        -:  169:    }
    #####:  170:}
        -:  171:
        -:  172:/*
        -:  173: * given time value that's either unix time or delta from current unix time, return
        -:  174: * unix time. Use the fact that delta can't exceed one month (and real time value can't
        -:  175: * be that low).
        -:  176: */
   328049:  177:rel_time_t realtime(const time_t exptime) {
        -:  178:    /* no. of seconds in 30 days - largest possible delta exptime */
        -:  179:
   328049:  180:    if (exptime == 0) return 0; /* 0 means never expire */
        -:  181:
     1660:  182:    if (exptime > REALTIME_MAXDELTA) {
        -:  183:        /* if item expiration is at/before the server started, give it an
        -:  184:           expiration time of 1 second after the server started.
        -:  185:           (because 0 means don't expire).  without this, we'd
        -:  186:           underflow and wrap around to some large value way in the
        -:  187:           future, effectively making items expiring in the past
        -:  188:           really expiring never */
       13:  189:        if (exptime <= process_started)
        -:  190:            return (rel_time_t)1;
        8:  191:        return (rel_time_t)(exptime - process_started);
        -:  192:    } else {
     1647:  193:        return (rel_time_t)(exptime + current_time);
        -:  194:    }
        -:  195:}
        -:  196:
      116:  197:static void stats_init(void) {
      116:  198:    memset(&stats, 0, sizeof(struct stats));
      116:  199:    memset(&stats_state, 0, sizeof(struct stats_state));
      116:  200:    stats_state.accepting_conns = true; /* assuming we start in this state. */
        -:  201:
        -:  202:    /* make the time we started always be 2 seconds before we really
        -:  203:       did, so time(0) - time.started is never zero.  if so, things
        -:  204:       like 'settings.oldest_live' which act as booleans as well as
        -:  205:       values are now false in boolean context... */
      116:  206:    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;
      116:  207:    stats_prefix_init(settings.prefix_delimiter);
      116:  208:}
        -:  209:
        3:  210:void stats_reset(void) {
        3:  211:    STATS_LOCK();
        3:  212:    memset(&stats, 0, sizeof(struct stats));
        3:  213:    stats_prefix_clear();
        3:  214:    STATS_UNLOCK();
        3:  215:    threadlocal_stats_reset();
        3:  216:    item_stats_reset();
        3:  217:}
        -:  218:
      403:  219:static void settings_init(void) {
      403:  220:    settings.use_cas = true;
      403:  221:    settings.access = 0700;
      403:  222:    settings.port = 11211;
      403:  223:    settings.udpport = 0;
        -:  224:#ifdef TLS
        -:  225:    settings.ssl_enabled = false;
        -:  226:    settings.ssl_ctx = NULL;
        -:  227:    settings.ssl_chain_cert = NULL;
        -:  228:    settings.ssl_key = NULL;
        -:  229:    settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -:  230:    settings.ssl_keyformat = SSL_FILETYPE_PEM;
        -:  231:    settings.ssl_ciphers = NULL;
        -:  232:    settings.ssl_ca_cert = NULL;
        -:  233:    settings.ssl_last_cert_refresh_time = current_time;
        -:  234:    settings.ssl_wbuf_size = 16 * 1024; // default is 16KB (SSL max frame size is 17KB)
        -:  235:    settings.ssl_session_cache = false;
        -:  236:    settings.ssl_kernel_tls = false;
        -:  237:    settings.ssl_min_version = TLS1_2_VERSION;
        -:  238:#endif
        -:  239:    /* By default this string should be NULL for getaddrinfo() */
      403:  240:    settings.inter = NULL;
      403:  241:    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */
      403:  242:    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */
      403:  243:    settings.verbose = 0;
      403:  244:    settings.oldest_live = 0;
      403:  245:    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */
      403:  246:    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */
      403:  247:    settings.socketpath = NULL;       /* by default, not using a unix socket */
      403:  248:    settings.auth_file = NULL;        /* by default, not using ASCII authentication tokens */
      403:  249:    settings.factor = 1.25;
      403:  250:    settings.chunk_size = 48;         /* space for a modest key and value */
      403:  251:    settings.num_threads = 4;         /* N workers */
      403:  252:    settings.num_threads_per_udp = 0;
      403:  253:    settings.prefix_delimiter = ':';
      403:  254:    settings.detail_enabled = 0;
      403:  255:    settings.reqs_per_event = 20;
      403:  256:    settings.backlog = 1024;
      403:  257:    settings.binding_protocol = negotiating_prot;
      403:  258:    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */
      403:  259:    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */
      403:  260:    settings.slab_chunk_size_max = settings.slab_page_size / 2;
      403:  261:    settings.sasl = false;
      403:  262:    settings.maxconns_fast = true;
      403:  263:    settings.lru_crawler = false;
      403:  264:    settings.lru_crawler_sleep = 100;
      403:  265:    settings.lru_crawler_tocrawl = 0;
      403:  266:    settings.lru_maintainer_thread = false;
      403:  267:    settings.lru_segmented = true;
      403:  268:    settings.hot_lru_pct = 20;
      403:  269:    settings.warm_lru_pct = 40;
      403:  270:    settings.hot_max_factor = 0.2;
      403:  271:    settings.warm_max_factor = 2.0;
      403:  272:    settings.temp_lru = false;
      403:  273:    settings.temporary_ttl = 61;
      403:  274:    settings.idle_timeout = 0; /* disabled */
      403:  275:    settings.hashpower_init = 0;
      403:  276:    settings.slab_reassign = true;
      403:  277:    settings.slab_automove = 1;
      403:  278:    settings.slab_automove_ratio = 0.8;
      403:  279:    settings.slab_automove_window = 30;
      403:  280:    settings.shutdown_command = false;
      403:  281:    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;
      403:  282:    settings.flush_enabled = true;
      403:  283:    settings.dump_enabled = true;
      403:  284:    settings.crawls_persleep = 1000;
      403:  285:    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;
      403:  286:    settings.logger_buf_size = LOGGER_BUF_SIZE;
      403:  287:    settings.drop_privileges = false;
      403:  288:    settings.watch_enabled = true;
      403:  289:    settings.read_buf_mem_limit = 0;
        -:  290:#ifdef MEMCACHED_DEBUG
      403:  291:    settings.relaxed_privileges = false;
        -:  292:#endif
      403:  293:    settings.num_napi_ids = 0;
      403:  294:    settings.memory_file = NULL;
        -:  295:#ifdef SOCK_COOKIE_ID
      403:  296:    settings.sock_cookie_id = 0;
        -:  297:#endif
      403:  298:}
        -:  299:
        -:  300:extern pthread_mutex_t conn_lock;
        -:  301:
        -:  302:/* Connection timeout thread bits */
        -:  303:static pthread_t conn_timeout_tid;
        -:  304:static int do_run_conn_timeout_thread;
        -:  305:static pthread_cond_t conn_timeout_cond = PTHREAD_COND_INITIALIZER;
        -:  306:static pthread_mutex_t conn_timeout_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  307:
        -:  308:#define CONNS_PER_SLICE 100
        1:  309:static void *conn_timeout_thread(void *arg) {
        1:  310:    int i;
        1:  311:    conn *c;
        1:  312:    rel_time_t oldest_last_cmd;
        1:  313:    int sleep_time;
        1:  314:    int sleep_slice = max_fds / CONNS_PER_SLICE;
        1:  315:    if (sleep_slice == 0)
    #####:  316:        sleep_slice = CONNS_PER_SLICE;
        -:  317:
        1:  318:    useconds_t timeslice = 1000000 / sleep_slice;
        -:  319:
        1:  320:    mutex_lock(&conn_timeout_lock);
        4:  321:    while(do_run_conn_timeout_thread) {
        4:  322:        if (settings.verbose > 2)
    #####:  323:            fprintf(stderr, "idle timeout thread at top of connection list\n");
        -:  324:
        4:  325:        oldest_last_cmd = current_time;
        -:  326:
     4100:  327:        for (i = 0; i < max_fds; i++) {
     4096:  328:            if ((i % CONNS_PER_SLICE) == 0) {
       44:  329:                if (settings.verbose > 2)
    #####:  330:                    fprintf(stderr, "idle timeout thread sleeping for %ulus\n",
        -:  331:                        (unsigned int)timeslice);
       44:  332:                usleep(timeslice);
        -:  333:            }
        -:  334:
     4096:  335:            if (!conns[i])
     4073:  336:                continue;
        -:  337:
       23:  338:            c = conns[i];
        -:  339:
       23:  340:            if (!IS_TCP(c->transport))
       16:  341:                continue;
        -:  342:
        7:  343:            if (c->state != conn_new_cmd && c->state != conn_read)
        5:  344:                continue;
        -:  345:
        2:  346:            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  347:                timeout_conn(c);
        -:  348:            } else {
        1:  349:                if (c->last_cmd_time < oldest_last_cmd)
        -:  350:                    oldest_last_cmd = c->last_cmd_time;
        -:  351:            }
        -:  352:        }
        -:  353:
        -:  354:        /* This is the soonest we could have another connection time out */
        4:  355:        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;
        4:  356:        if (sleep_time <= 0)
        -:  357:            sleep_time = 1;
        -:  358:
        4:  359:        if (settings.verbose > 2)
    #####:  360:            fprintf(stderr,
        -:  361:                    "idle timeout thread finished pass, sleeping for %ds\n",
        -:  362:                    sleep_time);
        -:  363:
        4:  364:        struct timeval now;
        4:  365:        struct timespec to_sleep;
        4:  366:        gettimeofday(&now, NULL);
        4:  367:        to_sleep.tv_sec = now.tv_sec + sleep_time;
        4:  368:        to_sleep.tv_nsec = 0;
        -:  369:
        4:  370:        pthread_cond_timedwait(&conn_timeout_cond, &conn_timeout_lock, &to_sleep);
        -:  371:    }
        -:  372:
    #####:  373:    mutex_unlock(&conn_timeout_lock);
    #####:  374:    return NULL;
        -:  375:}
        -:  376:
        1:  377:static int start_conn_timeout_thread(void) {
        1:  378:    int ret;
        -:  379:
        1:  380:    if (settings.idle_timeout == 0)
        -:  381:        return -1;
        -:  382:
        1:  383:    do_run_conn_timeout_thread = 1;
        1:  384:    if ((ret = pthread_create(&conn_timeout_tid, NULL,
        -:  385:        conn_timeout_thread, NULL)) != 0) {
    #####:  386:        fprintf(stderr, "Can't create idle connection timeout thread: %s\n",
        -:  387:            strerror(ret));
    #####:  388:        return -1;
        -:  389:    }
        1:  390:    thread_setname(conn_timeout_tid, "mc-idletimeout");
        -:  391:
        1:  392:    return 0;
        -:  393:}
        -:  394:
        2:  395:int stop_conn_timeout_thread(void) {
        2:  396:    if (!do_run_conn_timeout_thread)
        -:  397:        return -1;
    #####:  398:    mutex_lock(&conn_timeout_lock);
    #####:  399:    do_run_conn_timeout_thread = 0;
    #####:  400:    pthread_cond_signal(&conn_timeout_cond);
    #####:  401:    mutex_unlock(&conn_timeout_lock);
    #####:  402:    pthread_join(conn_timeout_tid, NULL);
    #####:  403:    return 0;
        -:  404:}
        -:  405:
        -:  406:/*
        -:  407: * read buffer cache helper functions
        -:  408: */
   458785:  409:static void rbuf_release(conn *c) {
   458785:  410:    if (c->rbuf != NULL && c->rbytes == 0 && !IS_UDP(c->transport)) {
   452926:  411:        if (c->rbuf_malloced) {
        2:  412:            free(c->rbuf);
        2:  413:            c->rbuf_malloced = false;
        -:  414:        } else {
   452924:  415:            do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  416:        }
   452926:  417:        c->rsize = 0;
   452926:  418:        c->rbuf = NULL;
   452926:  419:        c->rcurr = NULL;
        -:  420:    }
   458785:  421:}
        -:  422:
   456663:  423:static bool rbuf_alloc(conn *c) {
   456663:  424:    if (c->rbuf == NULL) {
   452927:  425:        c->rbuf = do_cache_alloc(c->thread->rbuf_cache);
   452927:  426:        if (!c->rbuf) {
    #####:  427:            THR_STATS_LOCK(c->thread);
    #####:  428:            c->thread->stats.read_buf_oom++;
    #####:  429:            THR_STATS_UNLOCK(c->thread);
    #####:  430:            return false;
        -:  431:        }
   452927:  432:        c->rsize = READ_BUFFER_SIZE;
   452927:  433:        c->rcurr = c->rbuf;
        -:  434:    }
        -:  435:    return true;
        -:  436:}
        -:  437:
        -:  438:// Just for handling huge ASCII multigets.
        -:  439:// The previous system was essentially the same; realloc'ing until big enough,
        -:  440:// then realloc'ing back down after the request finished.
        2:  441:bool rbuf_switch_to_malloc(conn *c) {
        -:  442:    // Might as well start with x2 and work from there.
        2:  443:    size_t size = c->rsize * 2;
        2:  444:    char *tmp = malloc(size);
        2:  445:    if (!tmp)
        -:  446:        return false;
        -:  447:
        2:  448:    memcpy(tmp, c->rcurr, c->rbytes);
        2:  449:    do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  450:
        2:  451:    c->rcurr = c->rbuf = tmp;
        2:  452:    c->rsize = size;
        2:  453:    c->rbuf_malloced = true;
        2:  454:    return true;
        -:  455:}
        -:  456:
        -:  457:/*
        -:  458: * Initializes the connections array. We don't actually allocate connection
        -:  459: * structures until they're needed, so as to avoid wasting memory when the
        -:  460: * maximum connection count is much higher than the actual number of
        -:  461: * connections.
        -:  462: *
        -:  463: * This does end up wasting a few pointers' worth of memory for FDs that are
        -:  464: * used for things other than connections, but that's worth it in exchange for
        -:  465: * being able to directly index the conns array by FD.
        -:  466: */
      116:  467:static void conn_init(void) {
        -:  468:    /* We're unlikely to see an FD much higher than maxconns. */
      116:  469:    int next_fd = dup(1);
      116:  470:    if (next_fd < 0) {
    #####:  471:        perror("Failed to duplicate file descriptor\n");
    #####:  472:        exit(1);
        -:  473:    }
      116:  474:    int headroom = 10;      /* account for extra unexpected open FDs */
      116:  475:    struct rlimit rl;
        -:  476:
      116:  477:    max_fds = settings.maxconns + headroom + next_fd;
        -:  478:
        -:  479:    /* But if possible, get the actual highest FD we can possibly ever see. */
      116:  480:    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {
      116:  481:        max_fds = rl.rlim_max;
        -:  482:    } else {
    #####:  483:        fprintf(stderr, "Failed to query maximum file descriptor; "
        -:  484:                        "falling back to maxconns\n");
        -:  485:    }
        -:  486:
      116:  487:    close(next_fd);
        -:  488:
      116:  489:    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {
    #####:  490:        fprintf(stderr, "Failed to allocate connection structures\n");
        -:  491:        /* This is unrecoverable so bail out early. */
    #####:  492:        exit(1);
        -:  493:    }
      116:  494:}
        -:  495:
     301*:  496:static const char *prot_text(enum protocol prot) {
     301*:  497:    char *rv = "unknown";
     301*:  498:    switch(prot) {
       2*:  499:        case ascii_prot:
       2*:  500:            rv = "ascii";
       2*:  501:            break;
       1*:  502:        case binary_prot:
       1*:  503:            rv = "binary";
       1*:  504:            break;
     298*:  505:        case negotiating_prot:
     298*:  506:            rv = "auto-negotiate";
     298*:  507:            break;
        -:  508:#ifdef PROXY
        -:  509:        case proxy_prot:
        -:  510:            rv = "proxy";
        -:  511:            break;
        -:  512:#endif
        -:  513:    }
     301*:  514:    return rv;
        -:  515:}
        -:  516:
        1:  517:void conn_close_idle(conn *c) {
        1:  518:    if (settings.idle_timeout > 0 &&
        1:  519:        (current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  520:        if (c->state != conn_new_cmd && c->state != conn_read) {
    #####:  521:            if (settings.verbose > 1)
    #####:  522:                fprintf(stderr,
        -:  523:                    "fd %d wants to timeout, but isn't in read state", c->sfd);
    #####:  524:            return;
        -:  525:        }
        -:  526:
        1:  527:        if (settings.verbose > 1)
    #####:  528:            fprintf(stderr, "Closing idle fd %d\n", c->sfd);
        -:  529:
        1:  530:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  531:        c->thread->stats.idle_kicks++;
        1:  532:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  533:
        1:  534:        c->close_reason = IDLE_TIMEOUT_CLOSE;
        -:  535:
        1:  536:        conn_set_state(c, conn_closing);
        1:  537:        drive_machine(c);
        -:  538:    }
        -:  539:}
        -:  540:
        -:  541:/* bring conn back from a sidethread. could have had its event base moved. */
      394:  542:void conn_worker_readd(conn *c) {
      394:  543:    if (c->state == conn_io_queue) {
      383:  544:        c->io_queues_submitted--;
        -:  545:        // If we're still waiting for other queues to return, don't re-add the
        -:  546:        // connection yet.
      383:  547:        if (c->io_queues_submitted != 0) {
        -:  548:            return;
        -:  549:        }
        -:  550:    }
      394:  551:    c->ev_flags = EV_READ | EV_PERSIST;
      394:  552:    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);
      394:  553:    event_base_set(c->thread->base, &c->event);
        -:  554:
        -:  555:    // TODO: call conn_cleanup/fail/etc
      394:  556:    if (event_add(&c->event, 0) == -1) {
    #####:  557:        perror("event_add");
        -:  558:    }
        -:  559:
        -:  560:    // side thread wanted us to close immediately.
      394:  561:    if (c->state == conn_closing) {
        9:  562:        drive_machine(c);
        9:  563:        return;
      385:  564:    } else if (c->state == conn_io_queue) {
        -:  565:        // machine will know how to return based on secondary state.
      383:  566:        drive_machine(c);
        -:  567:    } else {
        2:  568:        conn_set_state(c, conn_new_cmd);
        -:  569:    }
        -:  570:}
        -:  571:
      520:  572:void thread_io_queue_add(LIBEVENT_THREAD *t, int type, void *ctx, io_queue_stack_cb cb) {
      520:  573:    io_queue_cb_t *q = t->io_queues;
      552:  574:    while (q->type != IO_QUEUE_NONE) {
       32:  575:        q++;
        -:  576:    }
      520:  577:    q->type = type;
      520:  578:    q->ctx = ctx;
      520:  579:    q->submit_cb = cb;
      520:  580:    return;
        -:  581:}
        -:  582:
     2162:  583:void conn_io_queue_setup(conn *c) {
     2162:  584:    io_queue_cb_t *qcb = c->thread->io_queues;
     2162:  585:    io_queue_t *q = c->io_queues;
     3146:  586:    while (qcb->type != IO_QUEUE_NONE) {
      984:  587:        q->type = qcb->type;
      984:  588:        q->ctx = qcb->ctx;
      984:  589:        q->stack_ctx = NULL;
      984:  590:        q->count = 0;
      984:  591:        qcb++;
      984:  592:        q++;
        -:  593:    }
     2162:  594:}
        -:  595:
        -:  596:// To be called from conn_release_items to ensure the stack ptrs are reset.
       26:  597:static void conn_io_queue_reset(conn *c) {
       28:  598:    for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
       2*:  599:        assert(q->count == 0);
        2:  600:        q->stack_ctx = NULL;
        -:  601:    }
       26:  602:}
        -:  603:
     383*:  604:io_queue_cb_t *thread_io_queue_get(LIBEVENT_THREAD *t, int type) {
     383*:  605:    io_queue_cb_t *q = t->io_queues;
     383*:  606:    while (q->type != IO_QUEUE_NONE) {
     383*:  607:        if (q->type == type) {
    #####:  608:            return q;
        -:  609:        }
    #####:  610:        q++;
        -:  611:    }
        -:  612:    return NULL;
        -:  613:}
        -:  614:
      777:  615:io_queue_t *conn_io_queue_get(conn *c, int type) {
      777:  616:    io_queue_t *q = c->io_queues;
      777:  617:    while (q->type != IO_QUEUE_NONE) {
      777:  618:        if (q->type == type) {
      777:  619:            return q;
        -:  620:        }
    #####:  621:        q++;
        -:  622:    }
        -:  623:    return NULL;
        -:  624:}
        -:  625:
        -:  626:// called to return a single IO object to the original worker thread.
      385:  627:void conn_io_queue_return(io_pending_t *io) {
      385:  628:    io->return_cb(io);
      385:  629:}
        -:  630:
     2287:  631:conn *conn_new(const int sfd, enum conn_states init_state,
        -:  632:                const int event_flags,
        -:  633:                const int read_buffer_size, enum network_transport transport,
        -:  634:                struct event_base *base, void *ssl, uint64_t conntag,
        -:  635:                enum protocol bproto) {
     2287:  636:    conn *c;
        -:  637:
    2287*:  638:    assert(sfd >= 0 && sfd < max_fds);
     2287:  639:    c = conns[sfd];
        -:  640:
     2287:  641:    if (NULL == c) {
     2275:  642:        if (!(c = (conn *)calloc(1, sizeof(conn)))) {
    #####:  643:            STATS_LOCK();
    #####:  644:            stats.malloc_fails++;
    #####:  645:            STATS_UNLOCK();
    #####:  646:            fprintf(stderr, "Failed to allocate connection object\n");
    #####:  647:            return NULL;
        -:  648:        }
     2275:  649:        MEMCACHED_CONN_CREATE(c);
     2275:  650:        c->read = NULL;
     2275:  651:        c->sendmsg = NULL;
     2275:  652:        c->write = NULL;
     2275:  653:        c->rbuf = NULL;
        -:  654:
     2275:  655:        c->rsize = read_buffer_size;
        -:  656:
        -:  657:        // UDP connections use a persistent static buffer.
     2275:  658:        if (c->rsize) {
      197:  659:            c->rbuf = (char *)malloc((size_t)c->rsize);
        -:  660:        }
        -:  661:
     2275:  662:        if (c->rsize && c->rbuf == NULL) {
    #####:  663:            conn_free(c);
    #####:  664:            STATS_LOCK();
    #####:  665:            stats.malloc_fails++;
    #####:  666:            STATS_UNLOCK();
    #####:  667:            fprintf(stderr, "Failed to allocate buffers for connection\n");
    #####:  668:            return NULL;
        -:  669:        }
        -:  670:
        -:  671:
     2275:  672:        STATS_LOCK();
     2275:  673:        stats_state.conn_structs++;
     2275:  674:        STATS_UNLOCK();
        -:  675:
     2275:  676:        c->sfd = sfd;
     2275:  677:        conns[sfd] = c;
        -:  678:    }
        -:  679:
     2287:  680:    c->transport = transport;
     2287:  681:    c->protocol = bproto;
     2287:  682:    c->tag = conntag;
        -:  683:
        -:  684:    /* unix socket mode doesn't need this, so zeroed out.  but why
        -:  685:     * is this done for every command?  presumably for UDP
        -:  686:     * mode.  */
     2287:  687:    if (!settings.socketpath) {
      122:  688:        c->request_addr_size = sizeof(c->request_addr);
        -:  689:    } else {
     2165:  690:        c->request_addr_size = 0;
        -:  691:    }
        -:  692:
     2287:  693:    if (transport == tcp_transport && init_state == conn_new_cmd) {
       20:  694:        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,
        -:  695:                        &c->request_addr_size)) {
    #####:  696:            perror("getpeername");
    #####:  697:            memset(&c->request_addr, 0, sizeof(c->request_addr));
        -:  698:        }
        -:  699:    }
        -:  700:
     2287:  701:    if (init_state == conn_new_cmd) {
     2090:  702:        LOGGER_LOG(NULL, LOG_CONNEVENTS, LOGGER_CONNECTION_NEW, NULL,
        -:  703:                &c->request_addr, c->request_addr_size, c->transport, 0, sfd);
        -:  704:    }
        -:  705:
     2287:  706:    if (settings.verbose > 1) {
        6:  707:        if (init_state == conn_listening) {
        6:  708:            fprintf(stderr, "<%d server listening (%s)\n", sfd,
        -:  709:                prot_text(c->protocol));
        3:  710:        } else if (IS_UDP(transport)) {
    #####:  711:            fprintf(stderr, "<%d server listening (udp)\n", sfd);
        3:  712:        } else if (c->protocol == negotiating_prot) {
        1:  713:            fprintf(stderr, "<%d new auto-negotiating client connection\n",
        -:  714:                    sfd);
        2:  715:        } else if (c->protocol == ascii_prot) {
        1:  716:            fprintf(stderr, "<%d new ascii client connection.\n", sfd);
        1:  717:        } else if (c->protocol == binary_prot) {
        1:  718:            fprintf(stderr, "<%d new binary client connection.\n", sfd);
        -:  719:#ifdef PROXY
        -:  720:        } else if (c->protocol == proxy_prot) {
        -:  721:            fprintf(stderr, "<%d new proxy client connection.\n", sfd);
        -:  722:#endif
        -:  723:        } else {
    #####:  724:            fprintf(stderr, "<%d new unknown (%d) client connection\n",
        -:  725:                sfd, c->protocol);
    #####:  726:            assert(false);
        -:  727:        }
        -:  728:    }
        -:  729:
        -:  730:#ifdef TLS
        -:  731:    c->ssl = NULL;
        -:  732:    c->ssl_wbuf = NULL;
        -:  733:    c->ssl_enabled = false;
        -:  734:#endif
     2287:  735:    c->state = init_state;
     2287:  736:    c->rlbytes = 0;
     2287:  737:    c->cmd = -1;
     2287:  738:    c->rbytes = 0;
     2287:  739:    c->rcurr = c->rbuf;
     2287:  740:    c->ritem = 0;
     2287:  741:    c->rbuf_malloced = false;
     2287:  742:    c->item_malloced = false;
     2287:  743:    c->sasl_started = false;
     2287:  744:    c->set_stale = false;
     2287:  745:    c->mset_res = false;
     2287:  746:    c->close_after_write = false;
     2287:  747:    c->last_cmd_time = current_time; /* initialize for idle kicker */
        -:  748:    // wipe all queues.
     2287:  749:    memset(c->io_queues, 0, sizeof(c->io_queues));
     2287:  750:    c->io_queues_submitted = 0;
        -:  751:
     2287:  752:    c->item = 0;
        -:  753:
     2287:  754:    c->noreply = false;
        -:  755:
        -:  756:#ifdef TLS
        -:  757:    if (ssl) {
        -:  758:        c->ssl = (SSL*)ssl;
        -:  759:        c->read = ssl_read;
        -:  760:        c->sendmsg = ssl_sendmsg;
        -:  761:        c->write = ssl_write;
        -:  762:        c->ssl_enabled = true;
        -:  763:        SSL_set_info_callback(c->ssl, ssl_callback);
        -:  764:    } else
        -:  765:#else
        -:  766:    // This must be NULL if TLS is not enabled.
    2287*:  767:    assert(ssl == NULL);
        -:  768:#endif
        -:  769:    {
     2287:  770:        c->read = tcp_read;
     2287:  771:        c->sendmsg = tcp_sendmsg;
     2287:  772:        c->write = tcp_write;
        -:  773:    }
        -:  774:
     2287:  775:    if (IS_UDP(transport)) {
       72:  776:        c->try_read_command = try_read_command_udp;
        -:  777:    } else {
     2215:  778:        switch (c->protocol) {
        7:  779:            case ascii_prot:
        7:  780:                if (settings.auth_file == NULL) {
        4:  781:                    c->authenticated = true;
        4:  782:                    c->try_read_command = try_read_command_ascii;
        -:  783:                } else {
        3:  784:                    c->authenticated = false;
        3:  785:                    c->try_read_command = try_read_command_asciiauth;
        -:  786:                }
        -:  787:                break;
        6:  788:            case binary_prot:
        -:  789:                // binprot handles its own authentication via SASL parsing.
        6:  790:                c->authenticated = false;
        6:  791:                c->try_read_command = try_read_command_binary;
        6:  792:                break;
     2202:  793:            case negotiating_prot:
     2202:  794:                c->try_read_command = try_read_command_negotiate;
     2202:  795:                break;
        -:  796:#ifdef PROXY
        -:  797:            case proxy_prot:
        -:  798:                c->try_read_command = try_read_command_proxy;
        -:  799:                break;
        -:  800:#endif
        -:  801:        }
     2287:  802:    }
        -:  803:
     2287:  804:    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);
     2287:  805:    event_base_set(base, &c->event);
     2287:  806:    c->ev_flags = event_flags;
        -:  807:
     2287:  808:    if (event_add(&c->event, 0) == -1) {
    #####:  809:        perror("event_add");
    #####:  810:        return NULL;
        -:  811:    }
        -:  812:
     2287:  813:    STATS_LOCK();
     2287:  814:    stats_state.curr_conns++;
     2287:  815:    stats.total_conns++;
     2287:  816:    STATS_UNLOCK();
        -:  817:
     2287:  818:    MEMCACHED_CONN_ALLOCATE(c->sfd);
        -:  819:
     2287:  820:    return c;
        -:  821:}
        -:  822:
   464548:  823:void conn_release_items(conn *c) {
  464548*:  824:    assert(c != NULL);
        -:  825:
   464548:  826:    if (c->item) {
        2:  827:        if (c->item_malloced) {
    #####:  828:            free(c->item);
    #####:  829:            c->item_malloced = false;
        -:  830:        } else {
        2:  831:            item_remove(c->item);
        -:  832:        }
        2:  833:        c->item = 0;
        -:  834:    }
        -:  835:
        -:  836:    // Cull any unsent responses.
   464548:  837:    if (c->resp_head) {
        -:  838:        mc_resp *resp = c->resp_head;
        -:  839:        // r_f() handles the chain maintenance.
      118:  840:        while (resp) {
        -:  841:            // temporary by default. hide behind a debug flag in the future:
        -:  842:            // double free detection. Transmit loops can drop out early, but
        -:  843:            // here we could infinite loop.
       92:  844:            if (resp->free) {
    #####:  845:                fprintf(stderr, "ERROR: double free detected during conn_release_items(): [%d] [%s]\n",
    #####:  846:                        c->sfd, c->protocol == binary_prot ? "binary" : "ascii");
        -:  847:                // Since this is a critical failure, just leak the memory.
        -:  848:                // If these errors are seen, an abort() can be used instead.
    #####:  849:                c->resp_head = NULL;
    #####:  850:                c->resp = NULL;
    #####:  851:                break;
        -:  852:            }
       92:  853:            resp = resp_finish(c, resp);
        -:  854:        }
       26:  855:        conn_io_queue_reset(c);
        -:  856:    }
   464548:  857:}
        -:  858:
     2086:  859:static void conn_cleanup(conn *c) {
    2086*:  860:    assert(c != NULL);
        -:  861:
     2086:  862:    conn_release_items(c);
        -:  863:#ifdef PROXY
        -:  864:    if (c->proxy_coro_ref) {
        -:  865:        proxy_cleanup_conn(c);
        -:  866:    }
        -:  867:#endif
     2086:  868:    if (c->sasl_conn) {
    #####:  869:        assert(settings.sasl);
    #####:  870:        sasl_dispose(&c->sasl_conn);
    #####:  871:        c->sasl_conn = NULL;
        -:  872:    }
        -:  873:
     2086:  874:    if (IS_UDP(c->transport)) {
    #####:  875:        conn_set_state(c, conn_read);
        -:  876:    }
     2086:  877:}
        -:  878:
        -:  879:/*
        -:  880: * Frees a connection.
        -:  881: */
    #####:  882:void conn_free(conn *c) {
    #####:  883:    if (c) {
    #####:  884:        assert(c != NULL);
    #####:  885:        assert(c->sfd >= 0 && c->sfd < max_fds);
        -:  886:
    #####:  887:        MEMCACHED_CONN_DESTROY(c);
    #####:  888:        conns[c->sfd] = NULL;
    #####:  889:        if (c->rbuf)
    #####:  890:            free(c->rbuf);
        -:  891:#ifdef TLS
        -:  892:        if (c->ssl_wbuf)
        -:  893:            c->ssl_wbuf = NULL;
        -:  894:#endif
        -:  895:
    #####:  896:        free(c);
        -:  897:    }
    #####:  898:}
        -:  899:
     2086:  900:static void conn_close(conn *c) {
    2086*:  901:    assert(c != NULL);
        -:  902:
     2086:  903:    if (c->thread) {
    2084*:  904:        LOGGER_LOG(c->thread->l, LOG_CONNEVENTS, LOGGER_CONNECTION_CLOSE, NULL,
        -:  905:                &c->request_addr, c->request_addr_size, c->transport,
        -:  906:                c->close_reason, c->sfd);
        -:  907:    }
        -:  908:
        -:  909:    /* delete the event, the socket and the conn */
     2086:  910:    event_del(&c->event);
        -:  911:
     2086:  912:    if (settings.verbose > 1)
        3:  913:        fprintf(stderr, "<%d connection closed.\n", c->sfd);
        -:  914:
     2086:  915:    conn_cleanup(c);
        -:  916:
        -:  917:    // force release of read buffer.
     2086:  918:    if (c->thread) {
     2084:  919:        c->rbytes = 0;
     2084:  920:        rbuf_release(c);
        -:  921:    }
        -:  922:
     2086:  923:    MEMCACHED_CONN_RELEASE(c->sfd);
     2086:  924:    conn_set_state(c, conn_closed);
        -:  925:#ifdef TLS
        -:  926:    if (c->ssl) {
        -:  927:        SSL_shutdown(c->ssl);
        -:  928:        SSL_free(c->ssl);
        -:  929:    }
        -:  930:#endif
     2086:  931:    close(c->sfd);
     2086:  932:    c->close_reason = 0;
     2086:  933:    pthread_mutex_lock(&conn_lock);
     2086:  934:    allow_new_conns = true;
     2086:  935:    pthread_mutex_unlock(&conn_lock);
        -:  936:
     2086:  937:    STATS_LOCK();
     2086:  938:    stats_state.curr_conns--;
     2086:  939:    STATS_UNLOCK();
        -:  940:
     2086:  941:    return;
        -:  942:}
        -:  943:
        -:  944:// Since some connections might be off on side threads and some are managed as
        -:  945:// listeners we need to walk through them all from a central point.
        -:  946:// Must be called with all worker threads hung or in the process of closing.
        2:  947:void conn_close_all(void) {
        2:  948:    int i;
     2050:  949:    for (i = 0; i < max_fds; i++) {
     2048:  950:        if (conns[i] && conns[i]->state != conn_closed) {
        3:  951:            conn_close(conns[i]);
        -:  952:        }
        -:  953:    }
        2:  954:}
        -:  955:
        -:  956:/**
        -:  957: * Convert a state name to a human readable form.
        -:  958: */
      16*:  959:static const char *state_text(enum conn_states state) {
      16*:  960:    const char* const statenames[] = { "conn_listening",
        -:  961:                                       "conn_new_cmd",
        -:  962:                                       "conn_waiting",
        -:  963:                                       "conn_read",
        -:  964:                                       "conn_parse_cmd",
        -:  965:                                       "conn_write",
        -:  966:                                       "conn_nread",
        -:  967:                                       "conn_swallow",
        -:  968:                                       "conn_closing",
        -:  969:                                       "conn_mwrite",
        -:  970:                                       "conn_closed",
        -:  971:                                       "conn_watch",
        -:  972:                                       "conn_io_queue" };
      16*:  973:    return statenames[state];
        -:  974:}
        -:  975:
        -:  976:/*
        -:  977: * Sets a connection's current state in the state machine. Any special
        -:  978: * processing that needs to happen on certain state transitions can
        -:  979: * happen here.
        -:  980: */
  3252936:  981:void conn_set_state(conn *c, enum conn_states state) {
 3252936*:  982:    assert(c != NULL);
 3252936*:  983:    assert(state >= conn_listening && state < conn_max_state);
        -:  984:
  3252936:  985:    if (state != c->state) {
  3252935:  986:        if (settings.verbose > 2) {
    #####:  987:            fprintf(stderr, "%d: going from %s to %s\n",
        -:  988:                    c->sfd, state_text(c->state),
        -:  989:                    state_text(state));
        -:  990:        }
        -:  991:
  3252935:  992:        if (state == conn_write || state == conn_mwrite) {
  3252935:  993:            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->resp->wbuf, c->resp->wbytes);
        -:  994:        }
  3252935:  995:        c->state = state;
        -:  996:    }
  3252936:  997:}
        -:  998:
        -:  999:/*
        -: 1000: * response object helper functions
        -: 1001: */
   459958: 1002:void resp_reset(mc_resp *resp) {
   459958: 1003:    if (resp->item) {
    #####: 1004:        item_remove(resp->item);
    #####: 1005:        resp->item = NULL;
        -: 1006:    }
   459958: 1007:    if (resp->write_and_free) {
    #####: 1008:        free(resp->write_and_free);
    #####: 1009:        resp->write_and_free = NULL;
        -: 1010:    }
   459958: 1011:    resp->wbytes = 0;
   459958: 1012:    resp->tosend = 0;
   459958: 1013:    resp->iovcnt = 0;
   459958: 1014:    resp->chunked_data_iov = 0;
   459958: 1015:    resp->chunked_total = 0;
   459958: 1016:    resp->skip = false;
   459958: 1017:}
        -: 1018:
   529365: 1019:void resp_add_iov(mc_resp *resp, const void *buf, int len) {
  529365*: 1020:    assert(resp->iovcnt < MC_RESP_IOVCOUNT);
   529365: 1021:    int x = resp->iovcnt;
   529365: 1022:    resp->iov[x].iov_base = (void *)buf;
   529365: 1023:    resp->iov[x].iov_len = len;
   529365: 1024:    resp->iovcnt++;
   529365: 1025:    resp->tosend += len;
   529365: 1026:}
        -: 1027:
        -: 1028:// Notes that an IOV should be handled as a chunked item header.
        -: 1029:// TODO: I'm hoping this isn't a permanent abstraction while I learn what the
        -: 1030:// API should be.
    18975: 1031:void resp_add_chunked_iov(mc_resp *resp, const void *buf, int len) {
    18975: 1032:    resp->chunked_data_iov = resp->iovcnt;
    18975: 1033:    resp->chunked_total = len;
    18975: 1034:    resp_add_iov(resp, buf, len);
    18975: 1035:}
        -: 1036:
        -: 1037:// resp_allocate and resp_free are a wrapper around read buffers which makes
        -: 1038:// read buffers the only network memory to track.
        -: 1039:// Normally this would be too excessive. In this case it allows end users to
        -: 1040:// track a single memory limit for ephemeral connection buffers.
        -: 1041:// Fancy bit twiddling tricks are avoided to help keep this straightforward.
        -: 1042:static mc_resp* resp_allocate(conn *c) {
        -: 1043:    LIBEVENT_THREAD *th = c->thread;
        -: 1044:    mc_resp *resp = NULL;
        -: 1045:    mc_resp_bundle *b = th->open_bundle;
        -: 1046:
        -: 1047:    if (b != NULL) {
        -: 1048:        for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1049:            // loop around starting from the most likely to be free
        -: 1050:            int x = (i + b->next_check) % MAX_RESP_PER_BUNDLE;
        -: 1051:            if (b->r[x].free) {
        -: 1052:                resp = &b->r[x];
        -: 1053:                b->next_check = x+1;
        -: 1054:                break;
        -: 1055:            }
        -: 1056:        }
        -: 1057:
        -: 1058:        if (resp != NULL) {
        -: 1059:            b->refcount++;
        -: 1060:            memset(resp, 0, sizeof(*resp));
        -: 1061:            resp->free = false; // redundant, for clarity.
        -: 1062:            resp->bundle = b;
        -: 1063:            if (b->refcount == MAX_RESP_PER_BUNDLE) {
        -: 1064:                assert(b->prev == NULL);
        -: 1065:                // We only allocate off the head. Assign new head.
        -: 1066:                th->open_bundle = b->next;
        -: 1067:                // Remove ourselves from the list.
        -: 1068:                if (b->next) {
        -: 1069:                    b->next->prev = 0;
        -: 1070:                    b->next = 0;
        -: 1071:                }
        -: 1072:            }
        -: 1073:        }
        -: 1074:    }
        -: 1075:
        -: 1076:    if (resp == NULL) {
        -: 1077:        assert(th->open_bundle == NULL);
        -: 1078:        b = do_cache_alloc(th->rbuf_cache);
        -: 1079:        if (b) {
        -: 1080:            THR_STATS_LOCK(th);
        -: 1081:            th->stats.response_obj_bytes += READ_BUFFER_SIZE;
        -: 1082:            THR_STATS_UNLOCK(th);
        -: 1083:            b->next_check = 1;
        -: 1084:            b->refcount = 1;
        -: 1085:            for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1086:                b->r[i].free = true;
        -: 1087:            }
        -: 1088:            b->next = 0;
        -: 1089:            b->prev = 0;
        -: 1090:            th->open_bundle = b;
        -: 1091:            resp = &b->r[0];
        -: 1092:            memset(resp, 0, sizeof(*resp));
        -: 1093:            resp->free = false; // redundant. for clarity.
        -: 1094:            resp->bundle = b;
        -: 1095:        } else {
        -: 1096:            return NULL;
        -: 1097:        }
        -: 1098:    }
        -: 1099:
        -: 1100:    return resp;
        -: 1101:}
        -: 1102:
   616274: 1103:void resp_free(LIBEVENT_THREAD *th, mc_resp *resp) {
   616274: 1104:    mc_resp_bundle *b = resp->bundle;
        -: 1105:
   616274: 1106:    resp->free = true;
   616274: 1107:    b->refcount--;
   616274: 1108:    if (b->refcount == 0) {
   468796: 1109:        if (b == th->open_bundle && b->next == 0) {
        -: 1110:            // This is the final bundle. Just hold and reuse to skip init loop
  462482*: 1111:            assert(b->prev == 0);
   462482: 1112:            b->next_check = 0;
        -: 1113:        } else {
        -: 1114:            // Assert that we're either in the list or at the head.
    6314*: 1115:            assert((b->next || b->prev) || b == th->open_bundle);
        -: 1116:
        -: 1117:            // unlink from list.
     6314: 1118:            mc_resp_bundle **head = &th->open_bundle;
     6314: 1119:            if (*head == b) *head = b->next;
        -: 1120:            // Not tracking the tail.
    6314*: 1121:            assert(b->next != b && b->prev != b);
        -: 1122:
     6314: 1123:            if (b->next) b->next->prev = b->prev;
    6314*: 1124:            if (b->prev) b->prev->next = b->next;
        -: 1125:
        -: 1126:            // Now completely done with this buffer.
     6314: 1127:            do_cache_free(th->rbuf_cache, b);
     6314: 1128:            THR_STATS_LOCK(th);
     6314: 1129:            th->stats.response_obj_bytes -= READ_BUFFER_SIZE;
     6314: 1130:            THR_STATS_UNLOCK(th);
        -: 1131:        }
        -: 1132:    } else {
   147478: 1133:        mc_resp_bundle **head = &th->open_bundle;
        -: 1134:        // NOTE: since we're not tracking tail, latest free ends up in head.
   147478: 1135:        if (b == th->open_bundle || (b->prev || b->next)) {
        -: 1136:            // If we're already linked, leave it in place to save CPU.
        -: 1137:        } else {
        -: 1138:            // Non-zero refcount, need to link into the freelist.
     6331: 1139:            b->prev = 0;
     6331: 1140:            b->next = *head;
     6331: 1141:            if (b->next) b->next->prev = b;
     6331: 1142:            *head = b;
        -: 1143:        }
        -: 1144:
        -: 1145:    }
   616274: 1146:    THR_STATS_LOCK(th);
   616274: 1147:    th->stats.response_obj_count--;
   616274: 1148:    THR_STATS_UNLOCK(th);
   616274: 1149:}
        -: 1150:
   616277: 1151:bool resp_start(conn *c) {
   616277: 1152:    mc_resp *resp = resp_allocate(c);
   616277: 1153:    if (!resp) {
        2: 1154:        THR_STATS_LOCK(c->thread);
        2: 1155:        c->thread->stats.response_obj_oom++;
        2: 1156:        THR_STATS_UNLOCK(c->thread);
        2: 1157:        return false;
        -: 1158:    }
        -: 1159:
        -: 1160:    // handling the stats counters here to simplify testing
   616275: 1161:    THR_STATS_LOCK(c->thread);
   616275: 1162:    c->thread->stats.response_obj_count++;
   616275: 1163:    THR_STATS_UNLOCK(c->thread);
        -: 1164:
   616275: 1165:    if (!c->resp_head) {
   462485: 1166:        c->resp_head = resp;
        -: 1167:    }
   616275: 1168:    if (!c->resp) {
   462485: 1169:        c->resp = resp;
        -: 1170:    } else {
   153790: 1171:        c->resp->next = resp;
   153790: 1172:        c->resp = resp;
        -: 1173:    }
   616275: 1174:    if (IS_UDP(c->transport)) {
        -: 1175:        // need to hold on to some data for async responses.
       18: 1176:        c->resp->request_id = c->request_id;
       18: 1177:        c->resp->request_addr = c->request_addr;
       18: 1178:        c->resp->request_addr_size = c->request_addr_size;
        -: 1179:    }
        -: 1180:    return true;
        -: 1181:}
        -: 1182:
    #####: 1183:mc_resp *resp_start_unlinked(conn *c) {
    #####: 1184:    mc_resp *resp = resp_allocate(c);
    #####: 1185:    if (!resp) {
    #####: 1186:        THR_STATS_LOCK(c->thread);
    #####: 1187:        c->thread->stats.response_obj_oom++;
    #####: 1188:        THR_STATS_UNLOCK(c->thread);
    #####: 1189:        return false;
        -: 1190:    }
        -: 1191:
        -: 1192:    // handling the stats counters here to simplify testing
    #####: 1193:    THR_STATS_LOCK(c->thread);
    #####: 1194:    c->thread->stats.response_obj_count++;
    #####: 1195:    THR_STATS_UNLOCK(c->thread);
        -: 1196:
    #####: 1197:    if (IS_UDP(c->transport)) {
        -: 1198:        // need to hold on to some data for async responses.
    #####: 1199:        c->resp->request_id = c->request_id;
    #####: 1200:        c->resp->request_addr = c->request_addr;
    #####: 1201:        c->resp->request_addr_size = c->request_addr_size;
        -: 1202:    }
        -: 1203:
        -: 1204:    return resp;
        -: 1205:}
        -: 1206:
        -: 1207:// returns next response in chain.
   616274: 1208:mc_resp* resp_finish(conn *c, mc_resp *resp) {
   616274: 1209:    mc_resp *next = resp->next;
   616274: 1210:    if (resp->item) {
        -: 1211:        // TODO: cache hash value in resp obj?
    55030: 1212:        item_remove(resp->item);
    55030: 1213:        resp->item = NULL;
        -: 1214:    }
   616274: 1215:    if (resp->write_and_free) {
     3968: 1216:        free(resp->write_and_free);
        -: 1217:    }
   616274: 1218:    if (resp->io_pending) {
      388: 1219:        io_pending_t *io = resp->io_pending;
        -: 1220:        // If we had a pending IO, tell it to internally clean up then return
        -: 1221:        // the main object back to our thread cache.
      388: 1222:        io->finalize_cb(io);
      388: 1223:        do_cache_free(c->thread->io_cache, io);
      388: 1224:        resp->io_pending = NULL;
        -: 1225:    }
   616274: 1226:    if (c->resp_head == resp) {
   616274: 1227:        c->resp_head = next;
        -: 1228:    }
   616274: 1229:    if (c->resp == resp) {
   462484: 1230:        c->resp = NULL;
        -: 1231:    }
   616274: 1232:    resp_free(c->thread, resp);
   616274: 1233:    return next;
        -: 1234:}
        -: 1235:
        -: 1236:// tells if connection has a depth of response objects to process.
       13: 1237:bool resp_has_stack(conn *c) {
       13: 1238:    return c->resp_head->next != NULL ? true : false;
        -: 1239:}
        -: 1240:
   445058: 1241:void out_string(conn *c, const char *str) {
   445058: 1242:    size_t len;
  445058*: 1243:    assert(c != NULL);
   445058: 1244:    mc_resp *resp = c->resp;
        -: 1245:
        -: 1246:    // if response was original filled with something, but we're now writing
        -: 1247:    // out an error or similar, have to reset the object first.
        -: 1248:    // TODO: since this is often redundant with allocation, how many callers
        -: 1249:    // are actually requiring it be reset? Can we fast test by just looking at
        -: 1250:    // tosend and reset if nonzero?
   445058: 1251:    resp_reset(resp);
        -: 1252:
   445058: 1253:    if (c->noreply) {
        -: 1254:        // TODO: just invalidate the response since nothing's been attempted
        -: 1255:        // to send yet?
   162851: 1256:        resp->skip = true;
   162851: 1257:        if (settings.verbose > 1)
    #####: 1258:            fprintf(stderr, ">%d NOREPLY %s\n", c->sfd, str);
   162851: 1259:        conn_set_state(c, conn_new_cmd);
   162851: 1260:        return;
        -: 1261:    }
        -: 1262:
   282207: 1263:    if (settings.verbose > 1)
    #####: 1264:        fprintf(stderr, ">%d %s\n", c->sfd, str);
        -: 1265:
        -: 1266:    // Fill response object with static string.
        -: 1267:
   282207: 1268:    len = strlen(str);
   282207: 1269:    if ((len + 2) > WRITE_BUFFER_SIZE) {
        -: 1270:        /* ought to be always enough. just fail for simplicity */
    #####: 1271:        str = "SERVER_ERROR output line too long";
    #####: 1272:        len = strlen(str);
        -: 1273:    }
        -: 1274:
   282207: 1275:    memcpy(resp->wbuf, str, len);
   282207: 1276:    memcpy(resp->wbuf + len, "\r\n", 2);
   282207: 1277:    resp_add_iov(resp, resp->wbuf, len + 2);
        -: 1278:
   282207: 1279:    conn_set_state(c, conn_new_cmd);
   282207: 1280:    return;
        -: 1281:}
        -: 1282:
        -: 1283:// For metaget-style ASCII commands. Ignores noreply, ensuring clients see
        -: 1284:// protocol level errors.
        4: 1285:void out_errstring(conn *c, const char *str) {
        4: 1286:    c->noreply = false;
        4: 1287:    out_string(c, str);
        4: 1288:}
        -: 1289:
        -: 1290:/*
        -: 1291: * Outputs a protocol-specific "out of memory" error. For ASCII clients,
        -: 1292: * this is equivalent to out_string().
        -: 1293: */
        7: 1294:void out_of_memory(conn *c, char *ascii_error) {
        7: 1295:    const static char error_prefix[] = "SERVER_ERROR ";
        7: 1296:    const static int error_prefix_len = sizeof(error_prefix) - 1;
        -: 1297:
        7: 1298:    if (c->protocol == binary_prot) {
        -: 1299:        /* Strip off the generic error prefix; it's irrelevant in binary */
    #####: 1300:        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {
    #####: 1301:            ascii_error += error_prefix_len;
        -: 1302:        }
    #####: 1303:        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);
        -: 1304:    } else {
        7: 1305:        out_string(c, ascii_error);
        -: 1306:    }
        7: 1307:}
        -: 1308:
     3306: 1309:static void append_bin_stats(const char *key, const uint16_t klen,
        -: 1310:                             const char *val, const uint32_t vlen,
        -: 1311:                             conn *c) {
     3306: 1312:    char *buf = c->stats.buffer + c->stats.offset;
     3306: 1313:    uint32_t bodylen = klen + vlen;
     3306: 1314:    protocol_binary_response_header header = {
        -: 1315:        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,
        -: 1316:        .response.opcode = PROTOCOL_BINARY_CMD_STAT,
     3306: 1317:        .response.keylen = (uint16_t)htons(klen),
        -: 1318:        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,
     3306: 1319:        .response.bodylen = htonl(bodylen),
     3306: 1320:        .response.opaque = c->opaque
        -: 1321:    };
        -: 1322:
     3306: 1323:    memcpy(buf, header.bytes, sizeof(header.response));
     3306: 1324:    buf += sizeof(header.response);
        -: 1325:
     3306: 1326:    if (klen > 0) {
     3262: 1327:        memcpy(buf, key, klen);
     3262: 1328:        buf += klen;
        -: 1329:
     3262: 1330:        if (vlen > 0) {
     3262: 1331:            memcpy(buf, val, vlen);
        -: 1332:        }
        -: 1333:    }
        -: 1334:
     3306: 1335:    c->stats.offset += sizeof(header.response) + bodylen;
     3306: 1336:}
        -: 1337:
   383159: 1338:static void append_ascii_stats(const char *key, const uint16_t klen,
        -: 1339:                               const char *val, const uint32_t vlen,
        -: 1340:                               conn *c) {
   383159: 1341:    char *pos = c->stats.buffer + c->stats.offset;
   383159: 1342:    uint32_t nbytes = 0;
   383159: 1343:    int remaining = c->stats.size - c->stats.offset;
   383159: 1344:    int room = remaining - 1;
        -: 1345:
   383159: 1346:    if (klen == 0 && vlen == 0) {
     3914: 1347:        nbytes = snprintf(pos, room, "END\r\n");
   379245: 1348:    } else if (vlen == 0) {
    #####: 1349:        nbytes = snprintf(pos, room, "STAT %s\r\n", key);
        -: 1350:    } else {
   379245: 1351:        nbytes = snprintf(pos, room, "STAT %s %s\r\n", key, val);
        -: 1352:    }
        -: 1353:
   383159: 1354:    c->stats.offset += nbytes;
   383159: 1355:}
        -: 1356:
   386465: 1357:static bool grow_stats_buf(conn *c, size_t needed) {
   386465: 1358:    size_t nsize = c->stats.size;
   386465: 1359:    size_t available = nsize - c->stats.offset;
   386465: 1360:    bool rv = true;
        -: 1361:
        -: 1362:    /* Special case: No buffer -- need to allocate fresh */
   386465: 1363:    if (c->stats.buffer == NULL) {
     3958: 1364:        nsize = 1024;
     3958: 1365:        available = c->stats.size = c->stats.offset = 0;
        -: 1366:    }
        -: 1367:
   394222: 1368:    while (needed > available) {
    7757*: 1369:        assert(nsize > 0);
     7757: 1370:        nsize = nsize << 1;
     7757: 1371:        available = nsize - c->stats.offset;
        -: 1372:    }
        -: 1373:
   386465: 1374:    if (nsize != c->stats.size) {
     7757: 1375:        char *ptr = realloc(c->stats.buffer, nsize);
     7757: 1376:        if (ptr) {
     7757: 1377:            c->stats.buffer = ptr;
     7757: 1378:            c->stats.size = nsize;
        -: 1379:        } else {
    #####: 1380:            STATS_LOCK();
    #####: 1381:            stats.malloc_fails++;
    #####: 1382:            STATS_UNLOCK();
    #####: 1383:            rv = false;
        -: 1384:        }
        -: 1385:    }
        -: 1386:
   386465: 1387:    return rv;
        -: 1388:}
        -: 1389:
   386465: 1390:void append_stats(const char *key, const uint16_t klen,
        -: 1391:                  const char *val, const uint32_t vlen,
        -: 1392:                  const void *cookie)
        -: 1393:{
        -: 1394:    /* value without a key is invalid */
   386465: 1395:    if (klen == 0 && vlen > 0) {
        -: 1396:        return;
        -: 1397:    }
        -: 1398:
   386465: 1399:    conn *c = (conn*)cookie;
        -: 1400:
   386465: 1401:    if (c->protocol == binary_prot) {
     3306: 1402:        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);
     3306: 1403:        if (!grow_stats_buf(c, needed)) {
        -: 1404:            return;
        -: 1405:        }
     3306: 1406:        append_bin_stats(key, klen, val, vlen, c);
        -: 1407:    } else {
   383159: 1408:        size_t needed = vlen + klen + 10; // 10 == "STAT = \r\n"
   383159: 1409:        if (!grow_stats_buf(c, needed)) {
        -: 1410:            return;
        -: 1411:        }
   383159: 1412:        append_ascii_stats(key, klen, val, vlen, c);
        -: 1413:    }
        -: 1414:
  386465*: 1415:    assert(c->stats.offset <= c->stats.size);
        -: 1416:}
        -: 1417:
   939425: 1418:static void reset_cmd_handler(conn *c) {
   939425: 1419:    c->cmd = -1;
   939425: 1420:    c->substate = bin_no_state;
   939425: 1421:    if (c->item != NULL) {
        -: 1422:        // TODO: Any other way to get here?
        -: 1423:        // SASL auth was mistakenly using it. Nothing else should?
    #####: 1424:        if (c->item_malloced) {
    #####: 1425:            free(c->item);
    #####: 1426:            c->item_malloced = false;
        -: 1427:        } else {
    #####: 1428:            item_remove(c->item);
        -: 1429:        }
    #####: 1430:        c->item = NULL;
        -: 1431:    }
   939425: 1432:    if (c->rbytes > 0) {
   149612: 1433:        conn_set_state(c, conn_parse_cmd);
   789813: 1434:    } else if (c->resp_head) {
   336861: 1435:        conn_set_state(c, conn_mwrite);
        -: 1436:    } else {
   452952: 1437:        conn_set_state(c, conn_waiting);
        -: 1438:    }
   939425: 1439:}
        -: 1440:
   325891: 1441:static void complete_nread(conn *c) {
  325891*: 1442:    assert(c != NULL);
        -: 1443:#ifdef PROXY
        -: 1444:    assert(c->protocol == ascii_prot
        -: 1445:           || c->protocol == binary_prot
        -: 1446:           || c->protocol == proxy_prot);
        -: 1447:#else
  325891*: 1448:    assert(c->protocol == ascii_prot
        -: 1449:           || c->protocol == binary_prot);
        -: 1450:#endif
   325891: 1451:    if (c->protocol == ascii_prot) {
   301552: 1452:        complete_nread_ascii(c);
    24339: 1453:    } else if (c->protocol == binary_prot) {
    24339: 1454:        complete_nread_binary(c);
        -: 1455:#ifdef PROXY
        -: 1456:    } else if (c->protocol == proxy_prot) {
        -: 1457:        complete_nread_proxy(c);
        -: 1458:#endif
        -: 1459:    }
   325891: 1460:}
        -: 1461:
        -: 1462:/* Destination must always be chunked */
        -: 1463:/* This should be part of item.c */
    27032: 1464:static int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {
    27032: 1465:    item_chunk *dch = (item_chunk *) ITEM_schunk(d_it);
        -: 1466:    /* Advance dch until we find free space */
    77099: 1467:    while (dch->size == dch->used) {
    77099: 1468:        if (dch->next) {
        -: 1469:            dch = dch->next;
        -: 1470:        } else {
        -: 1471:            break;
        -: 1472:        }
        -: 1473:    }
        -: 1474:
    27032: 1475:    if (s_it->it_flags & ITEM_CHUNKED) {
    13516: 1476:        int remain = len;
    13516: 1477:        item_chunk *sch = (item_chunk *) ITEM_schunk(s_it);
    13516: 1478:        int copied = 0;
        -: 1479:        /* Fills dch's to capacity, not straight copy sch in case data is
        -: 1480:         * being added or removed (ie append/prepend)
        -: 1481:         */
   136671: 1482:        while (sch && dch && remain) {
  123155*: 1483:            assert(dch->used <= dch->size);
   123155: 1484:            int todo = (dch->size - dch->used < sch->used - copied)
        -: 1485:                ? dch->size - dch->used : sch->used - copied;
   123155: 1486:            if (remain < todo)
        -: 1487:                todo = remain;
   123155: 1488:            memcpy(dch->data + dch->used, sch->data + copied, todo);
   123155: 1489:            dch->used += todo;
   123155: 1490:            copied += todo;
   123155: 1491:            remain -= todo;
  123155*: 1492:            assert(dch->used <= dch->size);
   123155: 1493:            if (dch->size == dch->used) {
    73103: 1494:                item_chunk *tch = do_item_alloc_chunk(dch, remain);
    73103: 1495:                if (tch) {
        -: 1496:                    dch = tch;
        -: 1497:                } else {
        -: 1498:                    return -1;
        -: 1499:                }
        -: 1500:            }
  123155*: 1501:            assert(copied <= sch->used);
   123155: 1502:            if (copied == sch->used) {
    93361: 1503:                copied = 0;
    93361: 1504:                sch = sch->next;
        -: 1505:            }
        -: 1506:        }
        -: 1507:        /* assert that the destination had enough space for the source */
   13516*: 1508:        assert(remain == 0);
        -: 1509:    } else {
        -: 1510:        int done = 0;
        -: 1511:        /* Fill dch's via a non-chunked item. */
    40548: 1512:        while (len > done && dch) {
    27032: 1513:            int todo = (dch->size - dch->used < len - done)
        -: 1514:                ? dch->size - dch->used : len - done;
        -: 1515:            //assert(dch->size - dch->used != 0);
    27032: 1516:            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);
    27032: 1517:            done += todo;
    27032: 1518:            dch->used += todo;
   27032*: 1519:            assert(dch->used <= dch->size);
    27032: 1520:            if (dch->size == dch->used) {
    27032: 1521:                item_chunk *tch = do_item_alloc_chunk(dch, len - done);
    27032: 1522:                if (tch) {
        -: 1523:                    dch = tch;
        -: 1524:                } else {
        -: 1525:                    return -1;
        -: 1526:                }
        -: 1527:            }
        -: 1528:        }
   13516*: 1529:        assert(len == done);
        -: 1530:    }
        -: 1531:    return 0;
        -: 1532:}
        -: 1533:
    16015: 1534:static int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {
    16015: 1535:    if (comm == NREAD_APPEND) {
     8007: 1536:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1537:            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||
     6758: 1538:                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {
    #####: 1539:                return -1;
        -: 1540:            }
        -: 1541:        } else {
     1249: 1542:            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);
     1249: 1543:            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);
        -: 1544:        }
        -: 1545:    } else {
        -: 1546:        /* NREAD_PREPEND */
     8008: 1547:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1548:            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||
     6758: 1549:                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {
    #####: 1550:                return -1;
        -: 1551:            }
        -: 1552:        } else {
     1250: 1553:            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);
     1250: 1554:            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);
        -: 1555:        }
        -: 1556:    }
        -: 1557:    return 0;
        -: 1558:}
        -: 1559:
        -: 1560:/*
        -: 1561: * Stores an item in the cache according to the semantics of one of the set
        -: 1562: * commands. Protected by the item lock.
        -: 1563: *
        -: 1564: * Returns the state of storage.
        -: 1565: */
   325966: 1566:enum store_item_type do_store_item(item *it, int comm, LIBEVENT_THREAD *t, const uint32_t hv, uint64_t *cas, bool cas_stale) {
   325966: 1567:    char *key = ITEM_key(it);
   325966: 1568:    item *old_it = do_item_get(key, it->nkey, hv, t, DONT_UPDATE);
   325966: 1569:    enum store_item_type stored = NOT_STORED;
        -: 1570:
   325966: 1571:    enum cas_result { CAS_NONE, CAS_MATCH, CAS_BADVAL, CAS_STALE, CAS_MISS };
        -: 1572:
   325966: 1573:    item *new_it = NULL;
   325966: 1574:    uint32_t flags;
        -: 1575:
        -: 1576:    /* Do the CAS test up front so we can apply to all store modes */
   325966: 1577:    enum cas_result cas_res = CAS_NONE;
        -: 1578:
   325966: 1579:    bool do_store = false;
   325966: 1580:    if (old_it != NULL) {
        -: 1581:        // Most of the CAS work requires something to compare to.
    36404: 1582:        uint64_t it_cas = ITEM_get_cas(it);
    36404: 1583:        uint64_t old_cas = ITEM_get_cas(old_it);
    36404: 1584:        if (it_cas == 0) {
        -: 1585:            cas_res = CAS_NONE;
       20: 1586:        } else if (it_cas == old_cas) {
        -: 1587:            cas_res = CAS_MATCH;
        9: 1588:        } else if (cas_stale && it_cas < old_cas) {
        -: 1589:            cas_res = CAS_STALE;
        -: 1590:        } else {
        8: 1591:            cas_res = CAS_BADVAL;
        -: 1592:        }
        -: 1593:
    36404: 1594:        switch (comm) {
      649: 1595:            case NREAD_ADD:
        -: 1596:                /* add only adds a nonexistent item, but promote to head of LRU */
      649: 1597:                do_item_update(old_it);
      649: 1598:                break;
       22: 1599:            case NREAD_CAS:
       22: 1600:                if (cas_res == CAS_MATCH) {
        -: 1601:                    // cas validates
        -: 1602:                    // it and old_it may belong to different classes.
        -: 1603:                    // I'm updating the stats for the one that's getting pushed out
       11: 1604:                    pthread_mutex_lock(&t->stats.mutex);
       11: 1605:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
       11: 1606:                    pthread_mutex_unlock(&t->stats.mutex);
       11: 1607:                    do_store = true;
       11: 1608:                } else if (cas_res == CAS_STALE) {
        -: 1609:                    // if we're allowed to set a stale value, CAS must be lower than
        -: 1610:                    // the current item's CAS.
        -: 1611:                    // This replaces the value, but should preserve TTL, and stale
        -: 1612:                    // item marker bit + token sent if exists.
        1: 1613:                    it->exptime = old_it->exptime;
        1: 1614:                    it->it_flags |= ITEM_STALE;
        1: 1615:                    if (old_it->it_flags & ITEM_TOKEN_SENT) {
        1: 1616:                        it->it_flags |= ITEM_TOKEN_SENT;
        -: 1617:                    }
        -: 1618:
        1: 1619:                    pthread_mutex_lock(&t->stats.mutex);
        1: 1620:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
        1: 1621:                    pthread_mutex_unlock(&t->stats.mutex);
        1: 1622:                    do_store = true;
        -: 1623:                } else {
        -: 1624:                    // NONE or BADVAL are the same for CAS cmd
       10: 1625:                    pthread_mutex_lock(&t->stats.mutex);
       10: 1626:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;
       10: 1627:                    pthread_mutex_unlock(&t->stats.mutex);
        -: 1628:
       10: 1629:                    if (settings.verbose > 1) {
    #####: 1630:                        fprintf(stderr, "CAS:  failure: expected %llu, got %llu\n",
    #####: 1631:                                (unsigned long long)ITEM_get_cas(old_it),
    #####: 1632:                                (unsigned long long)ITEM_get_cas(it));
        -: 1633:                    }
        -: 1634:                    stored = EXISTS;
        -: 1635:                }
        -: 1636:                break;
    16017: 1637:            case NREAD_APPEND:
        -: 1638:            case NREAD_PREPEND:
    16017: 1639:                if (cas_res != CAS_NONE && cas_res != CAS_MATCH) {
        -: 1640:                    stored = EXISTS;
        -: 1641:                    break;
        -: 1642:                }
        -: 1643:#ifdef EXTSTORE
    16017: 1644:                if ((old_it->it_flags & ITEM_HDR) != 0) {
        -: 1645:                    /* block append/prepend from working with extstore-d items.
        -: 1646:                     * leave response code to NOT_STORED default */
        -: 1647:                    break;
        -: 1648:                }
        -: 1649:#endif
        -: 1650:                /* we have it and old_it here - alloc memory to hold both */
    16015: 1651:                FLAGS_CONV(old_it, flags);
    16015: 1652:                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);
        -: 1653:
        -: 1654:                // OOM trying to copy.
    16015: 1655:                if (new_it == NULL)
        -: 1656:                    break;
        -: 1657:                /* copy data from it and old_it to new_it */
    16015: 1658:                if (_store_item_copy_data(comm, old_it, new_it, it) == -1) {
        -: 1659:                    // failed data copy
        -: 1660:                    break;
        -: 1661:                } else {
        -: 1662:                    // refcount of new_it is 1 here. will end up 2 after link.
        -: 1663:                    // it's original ref is managed outside of this function
    16015: 1664:                    it = new_it;
    16015: 1665:                    do_store = true;
        -: 1666:                }
    16015: 1667:                break;
    19716: 1668:            case NREAD_REPLACE:
        -: 1669:            case NREAD_SET:
    19716: 1670:                do_store = true;
    19716: 1671:                break;
        -: 1672:        }
        -: 1673:
   36404*: 1674:        if (do_store) {
    35743: 1675:            STORAGE_delete(t->storage, old_it);
    35743: 1676:            item_replace(old_it, it, hv);
    35743: 1677:            stored = STORED;
        -: 1678:        }
        -: 1679:
    36404: 1680:        do_item_remove(old_it);         /* release our reference */
    36404: 1681:        if (new_it != NULL) {
        -: 1682:            // append/prepend end up with an extra reference for new_it.
    16015: 1683:            do_item_remove(new_it);
        -: 1684:        }
        -: 1685:    } else {
        -: 1686:        /* No pre-existing item to replace or compare to. */
   289562: 1687:        if (ITEM_get_cas(it) != 0) {
        -: 1688:            /* Asked for a CAS match but nothing to compare it to. */
   289562: 1689:            cas_res = CAS_MISS;
        -: 1690:        }
        -: 1691:
   289562: 1692:        switch (comm) {
        -: 1693:            case NREAD_ADD:
        -: 1694:            case NREAD_SET:
   289474: 1695:                do_store = true;
   289474: 1696:                break;
        3: 1697:            case NREAD_CAS:
        -: 1698:                // LRU expired
        3: 1699:                stored = NOT_FOUND;
        3: 1700:                pthread_mutex_lock(&t->stats.mutex);
        3: 1701:                t->stats.cas_misses++;
        3: 1702:                pthread_mutex_unlock(&t->stats.mutex);
        3: 1703:                break;
        -: 1704:            case NREAD_REPLACE:
        -: 1705:            case NREAD_APPEND:
        -: 1706:            case NREAD_PREPEND:
        -: 1707:                /* Requires an existing item. */
        -: 1708:                break;
        -: 1709:        }
        -: 1710:
        3: 1711:        if (do_store) {
   289474: 1712:            do_item_link(it, hv);
   289474: 1713:            stored = STORED;
        -: 1714:        }
        -: 1715:    }
        -: 1716:
   325966: 1717:    if (stored == STORED && cas != NULL) {
   325214: 1718:        *cas = ITEM_get_cas(it);
        -: 1719:    }
  325966*: 1720:    LOGGER_LOG(t->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,
        -: 1721:            stored, comm, ITEM_key(it), it->nkey, it->nbytes, it->exptime,
        -: 1722:            ITEM_clsid(it), t->cur_sfd);
        -: 1723:
   325966: 1724:    return stored;
        -: 1725:}
        -: 1726:
        -: 1727:/* set up a connection to write a buffer then free it, used for stats */
     3968: 1728:void write_and_free(conn *c, char *buf, int bytes) {
     3968: 1729:    if (buf) {
     3968: 1730:        mc_resp *resp = c->resp;
     3968: 1731:        resp->write_and_free = buf;
     3968: 1732:        resp_add_iov(resp, buf, bytes);
     3968: 1733:        conn_set_state(c, conn_new_cmd);
        -: 1734:    } else {
    #####: 1735:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -: 1736:    }
     3968: 1737:}
        -: 1738:
   376611: 1739:void append_stat(const char *name, ADD_STAT add_stats, conn *c,
        -: 1740:                 const char *fmt, ...) {
   376611: 1741:    char val_str[STAT_VAL_LEN];
   376611: 1742:    int vlen;
   376611: 1743:    va_list ap;
        -: 1744:
  376611*: 1745:    assert(name);
  376611*: 1746:    assert(add_stats);
  376611*: 1747:    assert(c);
  376611*: 1748:    assert(fmt);
        -: 1749:
   376611: 1750:    va_start(ap, fmt);
   376611: 1751:    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);
   376611: 1752:    va_end(ap);
        -: 1753:
   376611: 1754:    add_stats(name, strlen(name), val_str, vlen, c);
   376611: 1755:}
        -: 1756:
        -: 1757:/* return server specific stats only */
     3797: 1758:void server_stats(ADD_STAT add_stats, conn *c) {
     3797: 1759:    pid_t pid = getpid();
     3797: 1760:    rel_time_t now = current_time;
        -: 1761:
     3797: 1762:    struct thread_stats thread_stats;
     3797: 1763:    threadlocal_stats_aggregate(&thread_stats);
     3797: 1764:    struct slab_stats slab_stats;
     3797: 1765:    slab_stats_aggregate(&thread_stats, &slab_stats);
        -: 1766:#ifndef WIN32
     3797: 1767:    struct rusage usage;
     3797: 1768:    getrusage(RUSAGE_SELF, &usage);
        -: 1769:#endif /* !WIN32 */
        -: 1770:
     3797: 1771:    STATS_LOCK();
        -: 1772:
     3797: 1773:    APPEND_STAT("pid", "%lu", (long)pid);
     3797: 1774:    APPEND_STAT("uptime", "%u", now - ITEM_UPDATE_INTERVAL);
     3797: 1775:    APPEND_STAT("time", "%ld", now + (long)process_started);
     3797: 1776:    APPEND_STAT("version", "%s", VERSION);
     3797: 1777:    APPEND_STAT("libevent", "%s", event_get_version());
     3797: 1778:    APPEND_STAT("pointer_size", "%d", (int)(8 * sizeof(void *)));
        -: 1779:
        -: 1780:#ifndef WIN32
     3797: 1781:    append_stat("rusage_user", add_stats, c, "%ld.%06ld",
     3797: 1782:                (long)usage.ru_utime.tv_sec,
     3797: 1783:                (long)usage.ru_utime.tv_usec);
     3797: 1784:    append_stat("rusage_system", add_stats, c, "%ld.%06ld",
     3797: 1785:                (long)usage.ru_stime.tv_sec,
     3797: 1786:                (long)usage.ru_stime.tv_usec);
        -: 1787:#endif /* !WIN32 */
        -: 1788:
     3797: 1789:    APPEND_STAT("max_connections", "%d", settings.maxconns);
     3797: 1790:    APPEND_STAT("curr_connections", "%llu", (unsigned long long)stats_state.curr_conns - 1);
     3797: 1791:    APPEND_STAT("total_connections", "%llu", (unsigned long long)stats.total_conns);
     3797: 1792:    if (settings.maxconns_fast) {
     3787: 1793:        APPEND_STAT("rejected_connections", "%llu", (unsigned long long)stats.rejected_conns);
        -: 1794:    }
     3797: 1795:    APPEND_STAT("connection_structures", "%u", stats_state.conn_structs);
     3797: 1796:    APPEND_STAT("response_obj_oom", "%llu", (unsigned long long)thread_stats.response_obj_oom);
     3797: 1797:    APPEND_STAT("response_obj_count", "%llu", (unsigned long long)thread_stats.response_obj_count);
     3797: 1798:    APPEND_STAT("response_obj_bytes", "%llu", (unsigned long long)thread_stats.response_obj_bytes);
     3797: 1799:    APPEND_STAT("read_buf_count", "%llu", (unsigned long long)thread_stats.read_buf_count);
     3797: 1800:    APPEND_STAT("read_buf_bytes", "%llu", (unsigned long long)thread_stats.read_buf_bytes);
     3797: 1801:    APPEND_STAT("read_buf_bytes_free", "%llu", (unsigned long long)thread_stats.read_buf_bytes_free);
     3797: 1802:    APPEND_STAT("read_buf_oom", "%llu", (unsigned long long)thread_stats.read_buf_oom);
     3797: 1803:    APPEND_STAT("reserved_fds", "%u", stats_state.reserved_fds);
        -: 1804:#ifdef PROXY
        -: 1805:    if (settings.proxy_enabled) {
        -: 1806:        APPEND_STAT("proxy_conn_requests", "%llu", (unsigned long long)thread_stats.proxy_conn_requests);
        -: 1807:        APPEND_STAT("proxy_conn_errors", "%llu", (unsigned long long)thread_stats.proxy_conn_errors);
        -: 1808:        APPEND_STAT("proxy_conn_oom", "%llu", (unsigned long long)thread_stats.proxy_conn_oom);
        -: 1809:        APPEND_STAT("proxy_req_active", "%llu", (unsigned long long)thread_stats.proxy_req_active);
        -: 1810:        APPEND_STAT("proxy_await_active", "%llu", (unsigned long long)thread_stats.proxy_await_active);
        -: 1811:    }
        -: 1812:#endif
     3797: 1813:    APPEND_STAT("cmd_get", "%llu", (unsigned long long)thread_stats.get_cmds);
     3797: 1814:    APPEND_STAT("cmd_set", "%llu", (unsigned long long)slab_stats.set_cmds);
     3797: 1815:    APPEND_STAT("cmd_flush", "%llu", (unsigned long long)thread_stats.flush_cmds);
     3797: 1816:    APPEND_STAT("cmd_touch", "%llu", (unsigned long long)thread_stats.touch_cmds);
     3797: 1817:    APPEND_STAT("cmd_meta", "%llu", (unsigned long long)thread_stats.meta_cmds);
     3797: 1818:    APPEND_STAT("get_hits", "%llu", (unsigned long long)slab_stats.get_hits);
     3797: 1819:    APPEND_STAT("get_misses", "%llu", (unsigned long long)thread_stats.get_misses);
     3797: 1820:    APPEND_STAT("get_expired", "%llu", (unsigned long long)thread_stats.get_expired);
     3797: 1821:    APPEND_STAT("get_flushed", "%llu", (unsigned long long)thread_stats.get_flushed);
        -: 1822:#ifdef EXTSTORE
     3797: 1823:    if (c->thread->storage) {
     1053: 1824:        APPEND_STAT("get_extstore", "%llu", (unsigned long long)thread_stats.get_extstore);
     1053: 1825:        APPEND_STAT("get_aborted_extstore", "%llu", (unsigned long long)thread_stats.get_aborted_extstore);
     1053: 1826:        APPEND_STAT("get_oom_extstore", "%llu", (unsigned long long)thread_stats.get_oom_extstore);
     1053: 1827:        APPEND_STAT("recache_from_extstore", "%llu", (unsigned long long)thread_stats.recache_from_extstore);
     1053: 1828:        APPEND_STAT("miss_from_extstore", "%llu", (unsigned long long)thread_stats.miss_from_extstore);
     1053: 1829:        APPEND_STAT("badcrc_from_extstore", "%llu", (unsigned long long)thread_stats.badcrc_from_extstore);
        -: 1830:    }
        -: 1831:#endif
     3797: 1832:    APPEND_STAT("delete_misses", "%llu", (unsigned long long)thread_stats.delete_misses);
     3797: 1833:    APPEND_STAT("delete_hits", "%llu", (unsigned long long)slab_stats.delete_hits);
     3797: 1834:    APPEND_STAT("incr_misses", "%llu", (unsigned long long)thread_stats.incr_misses);
     3797: 1835:    APPEND_STAT("incr_hits", "%llu", (unsigned long long)slab_stats.incr_hits);
     3797: 1836:    APPEND_STAT("decr_misses", "%llu", (unsigned long long)thread_stats.decr_misses);
     3797: 1837:    APPEND_STAT("decr_hits", "%llu", (unsigned long long)slab_stats.decr_hits);
     3797: 1838:    APPEND_STAT("cas_misses", "%llu", (unsigned long long)thread_stats.cas_misses);
     3797: 1839:    APPEND_STAT("cas_hits", "%llu", (unsigned long long)slab_stats.cas_hits);
     3797: 1840:    APPEND_STAT("cas_badval", "%llu", (unsigned long long)slab_stats.cas_badval);
     3797: 1841:    APPEND_STAT("touch_hits", "%llu", (unsigned long long)slab_stats.touch_hits);
     3797: 1842:    APPEND_STAT("touch_misses", "%llu", (unsigned long long)thread_stats.touch_misses);
     3797: 1843:    APPEND_STAT("store_too_large", "%llu", (unsigned long long)thread_stats.store_too_large);
     3797: 1844:    APPEND_STAT("store_no_memory", "%llu", (unsigned long long)thread_stats.store_no_memory);
     3797: 1845:    APPEND_STAT("auth_cmds", "%llu", (unsigned long long)thread_stats.auth_cmds);
     3797: 1846:    APPEND_STAT("auth_errors", "%llu", (unsigned long long)thread_stats.auth_errors);
     3797: 1847:    if (settings.idle_timeout) {
        9: 1848:        APPEND_STAT("idle_kicks", "%llu", (unsigned long long)thread_stats.idle_kicks);
        -: 1849:    }
     3797: 1850:    APPEND_STAT("bytes_read", "%llu", (unsigned long long)thread_stats.bytes_read);
     3797: 1851:    APPEND_STAT("bytes_written", "%llu", (unsigned long long)thread_stats.bytes_written);
     3797: 1852:    APPEND_STAT("limit_maxbytes", "%llu", (unsigned long long)settings.maxbytes);
     3797: 1853:    APPEND_STAT("accepting_conns", "%u", stats_state.accepting_conns);
     3797: 1854:    APPEND_STAT("listen_disabled_num", "%llu", (unsigned long long)stats.listen_disabled_num);
     3797: 1855:    APPEND_STAT("time_in_listen_disabled_us", "%llu", stats.time_in_listen_disabled_us);
     3797: 1856:    APPEND_STAT("threads", "%d", settings.num_threads);
     3797: 1857:    APPEND_STAT("conn_yields", "%llu", (unsigned long long)thread_stats.conn_yields);
     3797: 1858:    APPEND_STAT("hash_power_level", "%u", stats_state.hash_power_level);
     3797: 1859:    APPEND_STAT("hash_bytes", "%llu", (unsigned long long)stats_state.hash_bytes);
     3797: 1860:    APPEND_STAT("hash_is_expanding", "%u", stats_state.hash_is_expanding);
     3797: 1861:    if (settings.slab_reassign) {
     3787: 1862:        APPEND_STAT("slab_reassign_rescues", "%llu", stats.slab_reassign_rescues);
     3787: 1863:        APPEND_STAT("slab_reassign_chunk_rescues", "%llu", stats.slab_reassign_chunk_rescues);
     3787: 1864:        APPEND_STAT("slab_reassign_evictions_nomem", "%llu", stats.slab_reassign_evictions_nomem);
     3787: 1865:        APPEND_STAT("slab_reassign_inline_reclaim", "%llu", stats.slab_reassign_inline_reclaim);
     3787: 1866:        APPEND_STAT("slab_reassign_busy_items", "%llu", stats.slab_reassign_busy_items);
     3787: 1867:        APPEND_STAT("slab_reassign_busy_deletes", "%llu", stats.slab_reassign_busy_deletes);
     3787: 1868:        APPEND_STAT("slab_reassign_running", "%u", stats_state.slab_reassign_running);
     3787: 1869:        APPEND_STAT("slabs_moved", "%llu", stats.slabs_moved);
        -: 1870:    }
     3797: 1871:    if (settings.lru_crawler) {
     3763: 1872:        APPEND_STAT("lru_crawler_running", "%u", stats_state.lru_crawler_running);
     3763: 1873:        APPEND_STAT("lru_crawler_starts", "%u", stats.lru_crawler_starts);
        -: 1874:    }
     3797: 1875:    if (settings.lru_maintainer_thread) {
     3771: 1876:        APPEND_STAT("lru_maintainer_juggles", "%llu", (unsigned long long)stats.lru_maintainer_juggles);
        -: 1877:    }
     3797: 1878:    APPEND_STAT("malloc_fails", "%llu",
     3797: 1879:                (unsigned long long)stats.malloc_fails);
     3797: 1880:    APPEND_STAT("log_worker_dropped", "%llu", (unsigned long long)stats.log_worker_dropped);
     3797: 1881:    APPEND_STAT("log_worker_written", "%llu", (unsigned long long)stats.log_worker_written);
     3797: 1882:    APPEND_STAT("log_watcher_skipped", "%llu", (unsigned long long)stats.log_watcher_skipped);
     3797: 1883:    APPEND_STAT("log_watcher_sent", "%llu", (unsigned long long)stats.log_watcher_sent);
     3797: 1884:    APPEND_STAT("log_watchers", "%llu", (unsigned long long)stats_state.log_watchers);
     3797: 1885:    STATS_UNLOCK();
        -: 1886:#ifdef EXTSTORE
     3797: 1887:    storage_stats(add_stats, c);
        -: 1888:#endif
        -: 1889:#ifdef PROXY
        -: 1890:    proxy_stats(settings.proxy_ctx, add_stats, c);
        -: 1891:#endif
        -: 1892:#ifdef TLS
        -: 1893:    if (settings.ssl_enabled) {
        -: 1894:        if (settings.ssl_session_cache) {
        -: 1895:            APPEND_STAT("ssl_new_sessions", "%llu", (unsigned long long)stats.ssl_new_sessions);
        -: 1896:        }
        -: 1897:        APPEND_STAT("ssl_handshake_errors", "%llu", (unsigned long long)stats.ssl_handshake_errors);
        -: 1898:        APPEND_STAT("time_since_server_cert_refresh", "%u", now - settings.ssl_last_cert_refresh_time);
        -: 1899:    }
        -: 1900:#endif
     3797: 1901:    APPEND_STAT("unexpected_napi_ids", "%llu", (unsigned long long)stats.unexpected_napi_ids);
     3797: 1902:    APPEND_STAT("round_robin_fallback", "%llu", (unsigned long long)stats.round_robin_fallback);
     3797: 1903:}
        -: 1904:
       19: 1905:void process_stat_settings(ADD_STAT add_stats, void *c) {
      19*: 1906:    assert(add_stats);
       19: 1907:    APPEND_STAT("maxbytes", "%llu", (unsigned long long)settings.maxbytes);
       19: 1908:    APPEND_STAT("maxconns", "%d", settings.maxconns);
       19: 1909:    APPEND_STAT("tcpport", "%d", settings.port);
       19: 1910:    APPEND_STAT("udpport", "%d", settings.udpport);
       19: 1911:    APPEND_STAT("inter", "%s", settings.inter ? settings.inter : "NULL");
       19: 1912:    APPEND_STAT("verbosity", "%d", settings.verbose);
       19: 1913:    APPEND_STAT("oldest", "%lu", (unsigned long)settings.oldest_live);
       19: 1914:    APPEND_STAT("evictions", "%s", settings.evict_to_free ? "on" : "off");
       38: 1915:    APPEND_STAT("domain_socket", "%s",
       19: 1916:                settings.socketpath ? settings.socketpath : "NULL");
       19: 1917:    APPEND_STAT("umask", "%o", settings.access);
       38: 1918:    APPEND_STAT("shutdown_command", "%s",
       19: 1919:                settings.shutdown_command ? "yes" : "no");
       19: 1920:    APPEND_STAT("growth_factor", "%.2f", settings.factor);
       19: 1921:    APPEND_STAT("chunk_size", "%d", settings.chunk_size);
       19: 1922:    APPEND_STAT("num_threads", "%d", settings.num_threads);
       19: 1923:    APPEND_STAT("num_threads_per_udp", "%d", settings.num_threads_per_udp);
       19: 1924:    APPEND_STAT("stat_key_prefix", "%c", settings.prefix_delimiter);
       37: 1925:    APPEND_STAT("detail_enabled", "%s",
       19: 1926:                settings.detail_enabled ? "yes" : "no");
       19: 1927:    APPEND_STAT("reqs_per_event", "%d", settings.reqs_per_event);
       20: 1928:    APPEND_STAT("cas_enabled", "%s", settings.use_cas ? "yes" : "no");
       19: 1929:    APPEND_STAT("tcp_backlog", "%d", settings.backlog);
       38: 1930:    APPEND_STAT("binding_protocol", "%s",
       19: 1931:                prot_text(settings.binding_protocol));
       38: 1932:    APPEND_STAT("auth_enabled_sasl", "%s", settings.sasl ? "yes" : "no");
       19: 1933:    APPEND_STAT("auth_enabled_ascii", "%s", settings.auth_file ? settings.auth_file : "no");
       19: 1934:    APPEND_STAT("item_size_max", "%d", settings.item_size_max);
       23: 1935:    APPEND_STAT("maxconns_fast", "%s", settings.maxconns_fast ? "yes" : "no");
       19: 1936:    APPEND_STAT("hashpower_init", "%d", settings.hashpower_init);
       23: 1937:    APPEND_STAT("slab_reassign", "%s", settings.slab_reassign ? "yes" : "no");
       19: 1938:    APPEND_STAT("slab_automove", "%d", settings.slab_automove);
       19: 1939:    APPEND_STAT("slab_automove_ratio", "%.2f", settings.slab_automove_ratio);
       19: 1940:    APPEND_STAT("slab_automove_window", "%u", settings.slab_automove_window);
       19: 1941:    APPEND_STAT("slab_chunk_max", "%d", settings.slab_chunk_size_max);
       23: 1942:    APPEND_STAT("lru_crawler", "%s", settings.lru_crawler ? "yes" : "no");
       19: 1943:    APPEND_STAT("lru_crawler_sleep", "%d", settings.lru_crawler_sleep);
       19: 1944:    APPEND_STAT("lru_crawler_tocrawl", "%lu", (unsigned long)settings.lru_crawler_tocrawl);
       19: 1945:    APPEND_STAT("tail_repair_time", "%d", settings.tail_repair_time);
       19: 1946:    APPEND_STAT("flush_enabled", "%s", settings.flush_enabled ? "yes" : "no");
       19: 1947:    APPEND_STAT("dump_enabled", "%s", settings.dump_enabled ? "yes" : "no");
       19: 1948:    APPEND_STAT("hash_algorithm", "%s", settings.hash_algorithm);
       24: 1949:    APPEND_STAT("lru_maintainer_thread", "%s", settings.lru_maintainer_thread ? "yes" : "no");
       24: 1950:    APPEND_STAT("lru_segmented", "%s", settings.lru_segmented ? "yes" : "no");
       19: 1951:    APPEND_STAT("hot_lru_pct", "%d", settings.hot_lru_pct);
       19: 1952:    APPEND_STAT("warm_lru_pct", "%d", settings.warm_lru_pct);
       19: 1953:    APPEND_STAT("hot_max_factor", "%.2f", settings.hot_max_factor);
       19: 1954:    APPEND_STAT("warm_max_factor", "%.2f", settings.warm_max_factor);
       37: 1955:    APPEND_STAT("temp_lru", "%s", settings.temp_lru ? "yes" : "no");
       19: 1956:    APPEND_STAT("temporary_ttl", "%u", settings.temporary_ttl);
       19: 1957:    APPEND_STAT("idle_timeout", "%d", settings.idle_timeout);
       19: 1958:    APPEND_STAT("watcher_logbuf_size", "%u", settings.logger_watcher_buf_size);
       19: 1959:    APPEND_STAT("worker_logbuf_size", "%u", settings.logger_buf_size);
       19: 1960:    APPEND_STAT("read_buf_mem_limit", "%u", settings.read_buf_mem_limit);
       38: 1961:    APPEND_STAT("track_sizes", "%s", item_stats_sizes_status() ? "yes" : "no");
       19: 1962:    APPEND_STAT("inline_ascii_response", "%s", "no"); // setting is dead, cannot be yes.
        -: 1963:#ifdef HAVE_DROP_PRIVILEGES
        -: 1964:    APPEND_STAT("drop_privileges", "%s", settings.drop_privileges ? "yes" : "no");
        -: 1965:#endif
        -: 1966:#ifdef EXTSTORE
       19: 1967:    APPEND_STAT("ext_item_size", "%u", settings.ext_item_size);
       19: 1968:    APPEND_STAT("ext_item_age", "%u", settings.ext_item_age);
       19: 1969:    APPEND_STAT("ext_low_ttl", "%u", settings.ext_low_ttl);
       19: 1970:    APPEND_STAT("ext_recache_rate", "%u", settings.ext_recache_rate);
       19: 1971:    APPEND_STAT("ext_wbuf_size", "%u", settings.ext_wbuf_size);
       19: 1972:    APPEND_STAT("ext_compact_under", "%u", settings.ext_compact_under);
       19: 1973:    APPEND_STAT("ext_drop_under", "%u", settings.ext_drop_under);
       19: 1974:    APPEND_STAT("ext_max_sleep", "%u", settings.ext_max_sleep);
       19: 1975:    APPEND_STAT("ext_max_frag", "%.2f", settings.ext_max_frag);
       19: 1976:    APPEND_STAT("slab_automove_freeratio", "%.3f", settings.slab_automove_freeratio);
       38: 1977:    APPEND_STAT("ext_drop_unread", "%s", settings.ext_drop_unread ? "yes" : "no");
        -: 1978:#endif
        -: 1979:#ifdef TLS
        -: 1980:    APPEND_STAT("ssl_enabled", "%s", settings.ssl_enabled ? "yes" : "no");
        -: 1981:    APPEND_STAT("ssl_chain_cert", "%s", settings.ssl_chain_cert);
        -: 1982:    APPEND_STAT("ssl_key", "%s", settings.ssl_key);
        -: 1983:    APPEND_STAT("ssl_verify_mode", "%d", settings.ssl_verify_mode);
        -: 1984:    APPEND_STAT("ssl_keyformat", "%d", settings.ssl_keyformat);
        -: 1985:    APPEND_STAT("ssl_ciphers", "%s", settings.ssl_ciphers ? settings.ssl_ciphers : "NULL");
        -: 1986:    APPEND_STAT("ssl_ca_cert", "%s", settings.ssl_ca_cert ? settings.ssl_ca_cert : "NULL");
        -: 1987:    APPEND_STAT("ssl_wbuf_size", "%u", settings.ssl_wbuf_size);
        -: 1988:    APPEND_STAT("ssl_session_cache", "%s", settings.ssl_session_cache ? "yes" : "no");
        -: 1989:    APPEND_STAT("ssl_kernel_tls", "%s", settings.ssl_kernel_tls ? "yes" : "no");
        -: 1990:    APPEND_STAT("ssl_min_version", "%s", ssl_proto_text(settings.ssl_min_version));
        -: 1991:#endif
        -: 1992:#ifdef PROXY
        -: 1993:    APPEND_STAT("proxy_enabled", "%s", settings.proxy_enabled ? "yes" : "no");
        -: 1994:    APPEND_STAT("proxy_uring_enabled", "%s", settings.proxy_uring ? "yes" : "no");
        -: 1995:#endif
       19: 1996:    APPEND_STAT("num_napi_ids", "%s", settings.num_napi_ids);
       19: 1997:    APPEND_STAT("memory_file", "%s", settings.memory_file);
       19: 1998:}
        -: 1999:
      165: 2000:static int nz_strcmp(int nzlength, const char *nz, const char *z) {
      165: 2001:    int zlength=strlen(z);
      165: 2002:    return (zlength == nzlength) && (strncmp(nz, z, zlength) == 0) ? 0 : -1;
        -: 2003:}
        -: 2004:
     3933: 2005:bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {
     3933: 2006:    bool ret = true;
        -: 2007:
     3933: 2008:    if (add_stats != NULL) {
     3933: 2009:        if (!stat_type) {
        -: 2010:            /* prepare general statistics for the engine */
     3797: 2011:            STATS_LOCK();
     3797: 2012:            APPEND_STAT("bytes", "%llu", (unsigned long long)stats_state.curr_bytes);
     3797: 2013:            APPEND_STAT("curr_items", "%llu", (unsigned long long)stats_state.curr_items);
     3797: 2014:            APPEND_STAT("total_items", "%llu", (unsigned long long)stats.total_items);
     3797: 2015:            STATS_UNLOCK();
     3797: 2016:            APPEND_STAT("slab_global_page_pool", "%u", global_page_pool_size(NULL));
     3797: 2017:            item_stats_totals(add_stats, c);
      136: 2018:        } else if (nz_strcmp(nkey, stat_type, "items") == 0) {
      107: 2019:            item_stats(add_stats, c);
       29: 2020:        } else if (nz_strcmp(nkey, stat_type, "slabs") == 0) {
       29: 2021:            slabs_stats(add_stats, c);
    #####: 2022:        } else if (nz_strcmp(nkey, stat_type, "sizes") == 0) {
    #####: 2023:            item_stats_sizes(add_stats, c);
    #####: 2024:        } else if (nz_strcmp(nkey, stat_type, "sizes_enable") == 0) {
    #####: 2025:            item_stats_sizes_enable(add_stats, c);
    #####: 2026:        } else if (nz_strcmp(nkey, stat_type, "sizes_disable") == 0) {
    #####: 2027:            item_stats_sizes_disable(add_stats, c);
        -: 2028:        } else {
        -: 2029:            ret = false;
        -: 2030:        }
        -: 2031:    } else {
        -: 2032:        ret = false;
        -: 2033:    }
        -: 2034:
     3933: 2035:    return ret;
        -: 2036:}
        -: 2037:
        -: 2038:static inline void get_conn_text(const conn *c, const int af,
        -: 2039:                char* addr, struct sockaddr *sock_addr) {
        -: 2040:    char addr_text[MAXPATHLEN];
        -: 2041:    addr_text[0] = '\0';
        -: 2042:    const char *protoname = "?";
        -: 2043:    unsigned short port = 0;
        -: 2044:
        -: 2045:    switch (af) {
        -: 2046:        case AF_INET:
        -: 2047:            (void) inet_ntop(af,
        -: 2048:                    &((struct sockaddr_in *)sock_addr)->sin_addr,
        -: 2049:                    addr_text,
        -: 2050:                    sizeof(addr_text) - 1);
        -: 2051:            port = ntohs(((struct sockaddr_in *)sock_addr)->sin_port);
        -: 2052:            protoname = IS_UDP(c->transport) ? "udp" : "tcp";
        -: 2053:            break;
        -: 2054:
        -: 2055:        case AF_INET6:
        -: 2056:            addr_text[0] = '[';
        -: 2057:            addr_text[1] = '\0';
        -: 2058:            if (inet_ntop(af,
        -: 2059:                    &((struct sockaddr_in6 *)sock_addr)->sin6_addr,
        -: 2060:                    addr_text + 1,
        -: 2061:                    sizeof(addr_text) - 2)) {
        -: 2062:                strncat(addr_text, "]", 2);
        -: 2063:            }
        -: 2064:            port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);
        -: 2065:            protoname = IS_UDP(c->transport) ? "udp6" : "tcp6";
        -: 2066:            break;
        -: 2067:
        -: 2068:#ifndef DISABLE_UNIX_SOCKET
        -: 2069:        case AF_UNIX:
        -: 2070:        {
        -: 2071:            size_t pathlen = 0;
        -: 2072:            // this strncpy call originally could piss off an address
        -: 2073:            // sanitizer; we supplied the size of the dest buf as a limiter,
        -: 2074:            // but optimized versions of strncpy could read past the end of
        -: 2075:            // *src while looking for a null terminator. Since buf and
        -: 2076:            // sun_path here are both on the stack they could even overlap,
        -: 2077:            // which is "undefined". In all OSS versions of strncpy I could
        -: 2078:            // find this has no effect; it'll still only copy until the first null
        -: 2079:            // terminator is found. Thus it's possible to get the OS to
        -: 2080:            // examine past the end of sun_path but it's unclear to me if this
        -: 2081:            // can cause any actual problem.
        -: 2082:            //
        -: 2083:            // We need a safe_strncpy util function but I'll punt on figuring
        -: 2084:            // that out for now.
        -: 2085:            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
        -: 2086:            if (MAXPATHLEN <= pathlen) {
        -: 2087:                pathlen = MAXPATHLEN - 1;
        -: 2088:            }
        -: 2089:            strncpy(addr_text,
        -: 2090:                    ((struct sockaddr_un *)sock_addr)->sun_path,
        -: 2091:                    pathlen);
        -: 2092:            addr_text[pathlen] = '\0';
        -: 2093:            protoname = "unix";
        -: 2094:        }
        -: 2095:            break;
        -: 2096:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 2097:    }
        -: 2098:
        -: 2099:    if (strlen(addr_text) < 2) {
        -: 2100:        /* Most likely this is a connected UNIX-domain client which
        -: 2101:         * has no peer socket address, but there's no portable way
        -: 2102:         * to tell for sure.
        -: 2103:         */
        -: 2104:        snprintf(addr_text, MAXPATHLEN, "<AF %d>", af);
        -: 2105:    }
        -: 2106:
        -: 2107:    if (port) {
        -: 2108:        snprintf(addr, MAXPATHLEN + 11, "%s:%s:%u", protoname, addr_text, port);
        -: 2109:    } else {
        -: 2110:        snprintf(addr, MAXPATHLEN + 11, "%s:%s", protoname, addr_text);
        -: 2111:    }
        -: 2112:}
        -: 2113:
       16: 2114:static void conn_to_str(const conn *c, char *addr, char *svr_addr) {
       16: 2115:    if (!c) {
    #####: 2116:        memcpy(addr, "<null>", 6);
       16: 2117:    } else if (c->state == conn_closed) {
    #####: 2118:        memcpy(addr, "<closed>", 8);
        -: 2119:    } else {
       16: 2120:        struct sockaddr_in6 local_addr;
       16: 2121:        struct sockaddr *sock_addr = (void *)&c->request_addr;
        -: 2122:
        -: 2123:        /* For listen ports and idle UDP ports, show listen address */
       16: 2124:        if (c->state == conn_listening ||
       12: 2125:                (IS_UDP(c->transport) &&
        -: 2126:                 c->state == conn_read)) {
        8: 2127:            memset(&local_addr, 0, sizeof(local_addr));
        8: 2128:            socklen_t local_addr_len = sizeof(local_addr);
        -: 2129:
        8: 2130:            if (getsockname(c->sfd,
        -: 2131:                        (struct sockaddr *)&local_addr,
        -: 2132:                        &local_addr_len) == 0) {
        8: 2133:                sock_addr = (struct sockaddr *)&local_addr;
        -: 2134:            }
        -: 2135:        }
       16: 2136:        get_conn_text(c, sock_addr->sa_family, addr, sock_addr);
        -: 2137:
       16: 2138:        if (c->state != conn_listening && !(IS_UDP(c->transport) &&
        -: 2139:                 c->state == conn_read)) {
        8: 2140:            struct sockaddr_storage svr_sock_addr;
        8: 2141:            memset(&svr_sock_addr, 0, sizeof(svr_sock_addr));
        8: 2142:            socklen_t svr_addr_len = sizeof(svr_sock_addr);
        8: 2143:            getsockname(c->sfd, (struct sockaddr *)&svr_sock_addr, &svr_addr_len);
        8: 2144:            get_conn_text(c, svr_sock_addr.ss_family, svr_addr, (struct sockaddr *)&svr_sock_addr);
        -: 2145:        }
        -: 2146:    }
       16: 2147:}
        -: 2148:
        4: 2149:void process_stats_conns(ADD_STAT add_stats, void *c) {
        4: 2150:    int i;
        4: 2151:    char key_str[STAT_KEY_LEN];
        4: 2152:    char val_str[STAT_VAL_LEN];
        4: 2153:    size_t extras_len = sizeof(":unix:") + sizeof("65535");
        4: 2154:    char addr[MAXPATHLEN + extras_len];
        4: 2155:    char svr_addr[MAXPATHLEN + extras_len];
        4: 2156:    memset(addr, 0, sizeof(addr));
        4: 2157:    memset(svr_addr, 0, sizeof(svr_addr));
        4: 2158:    int klen = 0, vlen = 0;
        -: 2159:
       4*: 2160:    assert(add_stats);
        -: 2161:
     4100: 2162:    for (i = 0; i < max_fds; i++) {
     4096: 2163:        if (conns[i]) {
        -: 2164:            /* This is safe to do unlocked because conns are never freed; the
        -: 2165:             * worst that'll happen will be a minor inconsistency in the
        -: 2166:             * output -- not worth the complexity of the locking that'd be
        -: 2167:             * required to prevent it.
        -: 2168:             */
       16: 2169:            if (IS_UDP(conns[i]->transport)) {
        4: 2170:                APPEND_NUM_STAT(i, "UDP", "%s", "UDP");
        -: 2171:            }
       16: 2172:            if (conns[i]->state != conn_closed) {
       16: 2173:                conn_to_str(conns[i], addr, svr_addr);
        -: 2174:
       16: 2175:                APPEND_NUM_STAT(i, "addr", "%s", addr);
       16: 2176:                if (conns[i]->state != conn_listening &&
       12: 2177:                    !(IS_UDP(conns[i]->transport) && conns[i]->state == conn_read)) {
        8: 2178:                    APPEND_NUM_STAT(i, "listen_addr", "%s", svr_addr);
        -: 2179:                }
       16: 2180:                APPEND_NUM_STAT(i, "state", "%s",
       16: 2181:                        state_text(conns[i]->state));
       16: 2182:                APPEND_NUM_STAT(i, "secs_since_last_cmd", "%d",
     4096: 2183:                        current_time - conns[i]->last_cmd_time);
        -: 2184:            }
        -: 2185:        }
        -: 2186:    }
        4: 2187:}
        -: 2188:
        -: 2189:#define IT_REFCOUNT_LIMIT 60000
   132200: 2190:item* limited_get(const char *key, size_t nkey, LIBEVENT_THREAD *t, uint32_t exptime, bool should_touch, bool do_update, bool *overflow) {
   132200: 2191:    item *it;
   132200: 2192:    if (should_touch) {
        8: 2193:        it = item_touch(key, nkey, exptime, t);
        -: 2194:    } else {
   132192: 2195:        it = item_get(key, nkey, t, do_update);
        -: 2196:    }
   132200: 2197:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2198:        item_remove(it);
    #####: 2199:        it = NULL;
    #####: 2200:        *overflow = true;
        -: 2201:    } else {
   132200: 2202:        *overflow = false;
        -: 2203:    }
   132200: 2204:    return it;
        -: 2205:}
        -: 2206:
        -: 2207:// Semantics are different than limited_get; since the item is returned
        -: 2208:// locked, caller can directly change what it needs.
        -: 2209:// though it might eventually be a better interface to sink it all into
        -: 2210:// items.c.
       14: 2211:item* limited_get_locked(const char *key, size_t nkey, LIBEVENT_THREAD *t, bool do_update, uint32_t *hv, bool *overflow) {
       14: 2212:    item *it;
       14: 2213:    it = item_get_locked(key, nkey, t, do_update, hv);
       14: 2214:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2215:        do_item_remove(it);
    #####: 2216:        it = NULL;
    #####: 2217:        item_unlock(*hv);
    #####: 2218:        *overflow = true;
        -: 2219:    } else {
       14: 2220:        *overflow = false;
        -: 2221:    }
       14: 2222:    return it;
        -: 2223:}
        -: 2224:
        -: 2225:/*
        -: 2226: * adds a delta value to a numeric item.
        -: 2227: *
        -: 2228: * c     connection requesting the operation
        -: 2229: * it    item to adjust
        -: 2230: * incr  true to increment value, false to decrement
        -: 2231: * delta amount to adjust value by
        -: 2232: * buf   buffer for response string
        -: 2233: *
        -: 2234: * returns a response string to send back to the client.
        -: 2235: */
      419: 2236:enum delta_result_type do_add_delta(LIBEVENT_THREAD *t, const char *key, const size_t nkey,
        -: 2237:                                    const bool incr, const int64_t delta,
        -: 2238:                                    char *buf, uint64_t *cas,
        -: 2239:                                    const uint32_t hv,
        -: 2240:                                    item **it_ret) {
      419: 2241:    char *ptr;
      419: 2242:    uint64_t value;
      419: 2243:    int res;
      419: 2244:    item *it;
        -: 2245:
      419: 2246:    it = do_item_get(key, nkey, hv, t, DONT_UPDATE);
      419: 2247:    if (!it) {
        -: 2248:        return DELTA_ITEM_NOT_FOUND;
        -: 2249:    }
        -: 2250:
        -: 2251:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2252:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2253:#ifdef EXTSTORE
      338: 2254:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2255:#else
        -: 2256:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2257:#endif
        1: 2258:        do_item_remove(it);
        1: 2259:        return NON_NUMERIC;
        -: 2260:    }
        -: 2261:
      337: 2262:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
        1: 2263:        do_item_remove(it);
        1: 2264:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2265:    }
        -: 2266:
      336: 2267:    ptr = ITEM_data(it);
        -: 2268:
      336: 2269:    if (!safe_strtoull(ptr, &value)) {
        5: 2270:        do_item_remove(it);
        5: 2271:        return NON_NUMERIC;
        -: 2272:    }
        -: 2273:
      331: 2274:    if (incr) {
      297: 2275:        value += delta;
        -: 2276:        //MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2277:    } else {
       34: 2278:        if(delta > value) {
        5: 2279:            value = 0;
        -: 2280:        } else {
       29: 2281:            value -= delta;
        -: 2282:        }
        -: 2283:        //MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2284:    }
        -: 2285:
      331: 2286:    pthread_mutex_lock(&t->stats.mutex);
      331: 2287:    if (incr) {
      297: 2288:        t->stats.slab_stats[ITEM_clsid(it)].incr_hits++;
        -: 2289:    } else {
       34: 2290:        t->stats.slab_stats[ITEM_clsid(it)].decr_hits++;
        -: 2291:    }
      331: 2292:    pthread_mutex_unlock(&t->stats.mutex);
        -: 2293:
      331: 2294:    itoa_u64(value, buf);
      331: 2295:    res = strlen(buf);
        -: 2296:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2297:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2298:     * increase. */
      331: 2299:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2300:        /* When changing the value without replacing the item, we
        -: 2301:           need to update the CAS on the existing item. */
        -: 2302:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2303:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2304:         * whether to remove an item or not. */
       77: 2305:        item_stats_sizes_remove(it);
       77: 2306:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
       77: 2307:        item_stats_sizes_add(it);
       77: 2308:        memcpy(ITEM_data(it), buf, res);
       77: 2309:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
       77: 2310:        do_item_update(it);
      254: 2311:    } else if (it->refcount > 1) {
      254: 2312:        item *new_it;
      254: 2313:        uint32_t flags;
     254*: 2314:        FLAGS_CONV(it, flags);
      254: 2315:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
      254: 2316:        if (new_it == 0) {
    #####: 2317:            do_item_remove(it);
    #####: 2318:            return EOM;
        -: 2319:        }
      254: 2320:        memcpy(ITEM_data(new_it), buf, res);
      254: 2321:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
      254: 2322:        item_replace(it, new_it, hv);
        -: 2323:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2324:        // returning the CAS of the old item below.
      254: 2325:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
      254: 2326:        do_item_remove(new_it);       /* release our reference */
        -: 2327:    } else {
        -: 2328:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2329:         * item. TODO: Add a counter? */
    #####: 2330:        if (settings.verbose) {
    #####: 2331:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2332:        }
    #####: 2333:        if (it->refcount == 1)
    #####: 2334:            do_item_remove(it);
    #####: 2335:        return DELTA_ITEM_NOT_FOUND;
        -: 2336:    }
        -: 2337:
      331: 2338:    if (cas) {
       64: 2339:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2340:    }
      331: 2341:    if (it_ret != NULL) {
        8: 2342:        *it_ret = it;
        -: 2343:    } else {
      323: 2344:        do_item_remove(it);         /* release our reference */
        -: 2345:    }
        -: 2346:    return OK;
        -: 2347:}
        -: 2348:
      123: 2349:static int try_read_command_negotiate(conn *c) {
     123*: 2350:    assert(c != NULL);
     123*: 2351:    assert(c->protocol == negotiating_prot);
     123*: 2352:    assert(c->rcurr <= (c->rbuf + c->rsize));
     123*: 2353:    assert(c->rbytes > 0);
        -: 2354:
      123: 2355:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        9: 2356:        c->protocol = binary_prot;
        9: 2357:        c->try_read_command = try_read_command_binary;
        -: 2358:    } else {
        -: 2359:        // authentication doesn't work with negotiated protocol.
      114: 2360:        c->protocol = ascii_prot;
      114: 2361:        c->try_read_command = try_read_command_ascii;
        -: 2362:    }
        -: 2363:
      123: 2364:    if (settings.verbose > 1) {
    #####: 2365:        fprintf(stderr, "%d: Client using the %s protocol\n", c->sfd,
        -: 2366:                prot_text(c->protocol));
        -: 2367:    }
        -: 2368:
      123: 2369:    return c->try_read_command(c);
        -: 2370:}
        -: 2371:
       18: 2372:static int try_read_command_udp(conn *c) {
      18*: 2373:    assert(c != NULL);
      18*: 2374:    assert(c->rcurr <= (c->rbuf + c->rsize));
      18*: 2375:    assert(c->rbytes > 0);
        -: 2376:
       18: 2377:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        7: 2378:        c->protocol = binary_prot;
        7: 2379:        return try_read_command_binary(c);
        -: 2380:    } else {
       11: 2381:        c->protocol = ascii_prot;
       11: 2382:        return try_read_command_ascii(c);
        -: 2383:    }
        -: 2384:}
        -: 2385:
        -: 2386:/*
        -: 2387: * read a UDP request.
        -: 2388: */
       31: 2389:static enum try_read_result try_read_udp(conn *c) {
       31: 2390:    int res;
        -: 2391:
      31*: 2392:    assert(c != NULL);
        -: 2393:
       31: 2394:    c->request_addr_size = sizeof(c->request_addr);
       62: 2395:    res = recvfrom(c->sfd, c->rbuf, c->rsize,
       31: 2396:                   0, (struct sockaddr *)&c->request_addr,
        -: 2397:                   &c->request_addr_size);
       31: 2398:    if (res > 8) {
       18: 2399:        unsigned char *buf = (unsigned char *)c->rbuf;
       18: 2400:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 2401:        c->thread->stats.bytes_read += res;
       18: 2402:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2403:
        -: 2404:        /* Beginning of UDP packet is the request ID; save it. */
       18: 2405:        c->request_id = buf[0] * 256 + buf[1];
        -: 2406:
        -: 2407:        /* If this is a multi-packet request, drop it. */
       18: 2408:        if (buf[4] != 0 || buf[5] != 1) {
        -: 2409:            return READ_NO_DATA_RECEIVED;
        -: 2410:        }
        -: 2411:
        -: 2412:        /* Don't care about any of the rest of the header. */
       18: 2413:        res -= 8;
       18: 2414:        memmove(c->rbuf, c->rbuf + 8, res);
        -: 2415:
       18: 2416:        c->rbytes = res;
       18: 2417:        c->rcurr = c->rbuf;
       18: 2418:        return READ_DATA_RECEIVED;
        -: 2419:    }
        -: 2420:    return READ_NO_DATA_RECEIVED;
        -: 2421:}
        -: 2422:
        -: 2423:/*
        -: 2424: * read from network as much as we can, handle buffer overflow and connection
        -: 2425: * close.
        -: 2426: * before reading, move the remaining incomplete fragment of a command
        -: 2427: * (if any) to the beginning of the buffer.
        -: 2428: *
        -: 2429: * To protect us from someone flooding a connection with bogus data causing
        -: 2430: * the connection to eat up all available memory, break out and start looking
        -: 2431: * at the data I've got after a number of reallocs...
        -: 2432: *
        -: 2433: * @return enum try_read_result
        -: 2434: */
   456663: 2435:static enum try_read_result try_read_network(conn *c) {
   456663: 2436:    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;
   456663: 2437:    int res;
   456663: 2438:    int num_allocs = 0;
  456663*: 2439:    assert(c != NULL);
        -: 2440:
   456663: 2441:    if (c->rcurr != c->rbuf) {
     3733: 2442:        if (c->rbytes != 0) /* otherwise there's nothing to copy */
     3733: 2443:            memmove(c->rbuf, c->rcurr, c->rbytes);
     3733: 2444:        c->rcurr = c->rbuf;
        -: 2445:    }
        -: 2446:
   456666: 2447:    while (1) {
        -: 2448:        // TODO: move to rbuf_* func?
   456666: 2449:        if (c->rbytes >= c->rsize && c->rbuf_malloced) {
        3: 2450:            if (num_allocs == 4) {
    #####: 2451:                return gotdata;
        -: 2452:            }
        3: 2453:            ++num_allocs;
        3: 2454:            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);
        3: 2455:            if (!new_rbuf) {
    #####: 2456:                STATS_LOCK();
    #####: 2457:                stats.malloc_fails++;
    #####: 2458:                STATS_UNLOCK();
    #####: 2459:                if (settings.verbose > 0) {
    #####: 2460:                    fprintf(stderr, "Couldn't realloc input buffer\n");
        -: 2461:                }
    #####: 2462:                c->rbytes = 0; /* ignore what we read */
    #####: 2463:                out_of_memory(c, "SERVER_ERROR out of memory reading request");
    #####: 2464:                c->close_after_write = true;
    #####: 2465:                return READ_MEMORY_ERROR;
        -: 2466:            }
        3: 2467:            c->rcurr = c->rbuf = new_rbuf;
        3: 2468:            c->rsize *= 2;
        -: 2469:        }
        -: 2470:
   456666: 2471:        int avail = c->rsize - c->rbytes;
   456666: 2472:        res = c->read(c, c->rbuf + c->rbytes, avail);
   456666: 2473:        if (res > 0) {
   454617: 2474:            pthread_mutex_lock(&c->thread->stats.mutex);
   454617: 2475:            c->thread->stats.bytes_read += res;
   454617: 2476:            pthread_mutex_unlock(&c->thread->stats.mutex);
   454617: 2477:            gotdata = READ_DATA_RECEIVED;
   454617: 2478:            c->rbytes += res;
   454617: 2479:            if (res == avail && c->rbuf_malloced) {
        -: 2480:                // Resize rbuf and try a few times if huge ascii multiget.
        3: 2481:                continue;
        -: 2482:            } else {
        -: 2483:                break;
        -: 2484:            }
        -: 2485:        }
     2049: 2486:        if (res == 0) {
     2048: 2487:            c->close_reason = NORMAL_CLOSE;
     2048: 2488:            return READ_ERROR;
        -: 2489:        }
        1: 2490:        if (res == -1) {
        1: 2491:            if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 2492:                break;
        -: 2493:            }
        1: 2494:            return READ_ERROR;
        -: 2495:        }
        -: 2496:    }
        -: 2497:    return gotdata;
        -: 2498:}
        -: 2499:
   479458: 2500:static bool update_event(conn *c, const int new_flags) {
  479458*: 2501:    assert(c != NULL);
        -: 2502:
   479458: 2503:    struct event_base *base = c->event.ev_base;
   479458: 2504:    if (c->ev_flags == new_flags)
        -: 2505:        return true;
     1677: 2506:    if (event_del(&c->event) == -1) return false;
     1677: 2507:    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);
     1677: 2508:    event_base_set(base, &c->event);
     1677: 2509:    c->ev_flags = new_flags;
    1677*: 2510:    if (event_add(&c->event, 0) == -1) return false;
        -: 2511:    return true;
        -: 2512:}
        -: 2513:
        -: 2514:/*
        -: 2515: * Sets whether we are listening for new connections or not.
        -: 2516: */
    #####: 2517:void do_accept_new_conns(const bool do_accept) {
    #####: 2518:    conn *next;
        -: 2519:
    #####: 2520:    for (next = listen_conn; next; next = next->next) {
    #####: 2521:        if (do_accept) {
    #####: 2522:            update_event(next, EV_READ | EV_PERSIST);
    #####: 2523:            if (listen(next->sfd, settings.backlog) != 0) {
    #####: 2524:                perror("listen");
        -: 2525:            }
        -: 2526:        }
        -: 2527:        else {
    #####: 2528:            update_event(next, 0);
    #####: 2529:            if (listen(next->sfd, 0) != 0) {
    #####: 2530:                perror("listen");
        -: 2531:            }
        -: 2532:        }
        -: 2533:    }
        -: 2534:
    #####: 2535:    if (do_accept) {
    #####: 2536:        struct timeval maxconns_exited;
    #####: 2537:        uint64_t elapsed_us;
    #####: 2538:        gettimeofday(&maxconns_exited,NULL);
    #####: 2539:        STATS_LOCK();
    #####: 2540:        elapsed_us =
    #####: 2541:            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000
    #####: 2542:            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);
    #####: 2543:        stats.time_in_listen_disabled_us += elapsed_us;
    #####: 2544:        stats_state.accepting_conns = true;
    #####: 2545:        STATS_UNLOCK();
        -: 2546:    } else {
    #####: 2547:        STATS_LOCK();
    #####: 2548:        stats_state.accepting_conns = false;
    #####: 2549:        gettimeofday(&stats.maxconns_entered,NULL);
    #####: 2550:        stats.listen_disabled_num++;
    #####: 2551:        STATS_UNLOCK();
    #####: 2552:        allow_new_conns = false;
    #####: 2553:        maxconns_handler(-42, 0, 0);
        -: 2554:    }
    #####: 2555:}
        -: 2556:
        -: 2557:#define TRANSMIT_ONE_RESP true
        -: 2558:#define TRANSMIT_ALL_RESP false
   463221: 2559:static int _transmit_pre(conn *c, struct iovec *iovs, int iovused, bool one_resp) {
   463221: 2560:    mc_resp *resp = c->resp_head;
  1081156: 2561:    while (resp && iovused + resp->iovcnt < IOV_MAX-1) {
   617967: 2562:        if (resp->skip) {
        -: 2563:            // Don't actually unchain the resp obj here since it's singly-linked.
        -: 2564:            // Just let the post function handle it linearly.
   162858: 2565:            resp = resp->next;
   162858: 2566:            continue;
        -: 2567:        }
   455109: 2568:        if (resp->chunked_data_iov) {
        -: 2569:            // Handle chunked items specially.
        -: 2570:            // They spend much more time in send so we can be a bit wasteful
        -: 2571:            // in rebuilding iovecs for them.
    19426: 2572:            item_chunk *ch = (item_chunk *)ITEM_schunk((item *)resp->iov[resp->chunked_data_iov].iov_base);
    19426: 2573:            int x;
    77704: 2574:            for (x = 0; x < resp->iovcnt; x++) {
        -: 2575:                // This iov is tracking how far we've copied so far.
    58278: 2576:                if (x == resp->chunked_data_iov) {
    19426: 2577:                    int done = resp->chunked_total - resp->iov[x].iov_len;
        -: 2578:                    // Start from the len to allow binprot to cut the \r\n
    19426: 2579:                    int todo = resp->iov[x].iov_len;
   158493: 2580:                    while (ch && todo > 0 && iovused < IOV_MAX-1) {
   139067: 2581:                        int skip = 0;
   139067: 2582:                        if (!ch->used) {
    32944: 2583:                            ch = ch->next;
    32944: 2584:                            continue;
        -: 2585:                        }
        -: 2586:                        // Skip parts we've already sent.
   106123: 2587:                        if (done >= ch->used) {
     5298: 2588:                            done -= ch->used;
     5298: 2589:                            ch = ch->next;
     5298: 2590:                            continue;
   100825: 2591:                        } else if (done) {
      457: 2592:                            skip = done;
      457: 2593:                            done = 0;
        -: 2594:                        }
   100825: 2595:                        iovs[iovused].iov_base = ch->data + skip;
        -: 2596:                        // Stupid binary protocol makes this go negative.
   100825: 2597:                        iovs[iovused].iov_len = ch->used - skip > todo ? todo : ch->used - skip;
   100825: 2598:                        iovused++;
   100825: 2599:                        todo -= ch->used - skip;
   100825: 2600:                        ch = ch->next;
        -: 2601:                    }
        -: 2602:                } else {
    38852: 2603:                    iovs[iovused].iov_base = resp->iov[x].iov_base;
    38852: 2604:                    iovs[iovused].iov_len = resp->iov[x].iov_len;
    38852: 2605:                    iovused++;
        -: 2606:                }
    58278: 2607:                if (iovused >= IOV_MAX-1)
        -: 2608:                    break;
        -: 2609:            }
        -: 2610:        } else {
   435683: 2611:            memcpy(&iovs[iovused], resp->iov, sizeof(struct iovec)*resp->iovcnt);
   435683: 2612:            iovused += resp->iovcnt;
        -: 2613:        }
        -: 2614:
        -: 2615:        // done looking at first response, walk down the chain.
   455109: 2616:        resp = resp->next;
        -: 2617:        // used for UDP mode: UDP cannot send multiple responses per packet.
   455109: 2618:        if (one_resp)
        -: 2619:            break;
        -: 2620:    }
   463221: 2621:    return iovused;
        -: 2622:}
        -: 2623:
        -: 2624:/*
        -: 2625: * Decrements and completes responses based on how much data was transmitted.
        -: 2626: * Takes the connection and current result bytes.
        -: 2627: */
   462877: 2628:static void _transmit_post(conn *c, ssize_t res) {
        -: 2629:    // We've written some of the data. Remove the completed
        -: 2630:    // responses from the list of pending writes.
   462877: 2631:    mc_resp *resp = c->resp_head;
  1079059: 2632:    while (resp) {
   616601: 2633:        int x;
   616601: 2634:        if (resp->skip) {
   162858: 2635:            resp = resp_finish(c, resp);
   162858: 2636:            continue;
        -: 2637:        }
        -: 2638:
        -: 2639:        // fastpath check. all small responses should cut here.
   453743: 2640:        if (res >= resp->tosend) {
   453324: 2641:            res -= resp->tosend;
   453324: 2642:            resp = resp_finish(c, resp);
   453324: 2643:            continue;
        -: 2644:        }
        -: 2645:
        -: 2646:        // it's fine to re-check iov's that were zeroed out before.
      911: 2647:        for (x = 0; x < resp->iovcnt; x++) {
      911: 2648:            struct iovec *iov = &resp->iov[x];
      911: 2649:            if (res >= iov->iov_len) {
      492: 2650:                resp->tosend -= iov->iov_len;
      492: 2651:                res -= iov->iov_len;
      492: 2652:                iov->iov_len = 0;
        -: 2653:            } else {
        -: 2654:                // Dumb special case for chunked items. Currently tracking
        -: 2655:                // where to inject the chunked item via iov_base.
        -: 2656:                // Extra not-great since chunked items can't be the first
        -: 2657:                // index, so we have to check for non-zero c_d_iov first.
      419: 2658:                if (!resp->chunked_data_iov || x != resp->chunked_data_iov) {
      178: 2659:                    iov->iov_base = (char *)iov->iov_base + res;
        -: 2660:                }
      419: 2661:                iov->iov_len -= res;
      419: 2662:                resp->tosend -= res;
      419: 2663:                res = 0;
      419: 2664:                break;
        -: 2665:            }
        -: 2666:        }
        -: 2667:
        -: 2668:        // are we done with this response object?
      419: 2669:        if (resp->tosend == 0) {
    #####: 2670:            resp = resp_finish(c, resp);
        -: 2671:        } else {
        -: 2672:            // Jammed up here. This is the new head.
        -: 2673:            break;
        -: 2674:        }
        -: 2675:    }
   462877: 2676:}
        -: 2677:
        -: 2678:/*
        -: 2679: * Transmit the next chunk of data from our list of msgbuf structures.
        -: 2680: *
        -: 2681: * Returns:
        -: 2682: *   TRANSMIT_COMPLETE   All done writing.
        -: 2683: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2684: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2685: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2686: */
   463189: 2687:static enum transmit_result transmit(conn *c) {
  463189*: 2688:    assert(c != NULL);
   463189: 2689:    struct iovec iovs[IOV_MAX];
   463189: 2690:    struct msghdr msg;
   463189: 2691:    int iovused = 0;
        -: 2692:
        -: 2693:    // init the msg.
   463189: 2694:    memset(&msg, 0, sizeof(struct msghdr));
   463189: 2695:    msg.msg_iov = iovs;
        -: 2696:
   463189: 2697:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ALL_RESP);
   463189: 2698:    if (iovused == 0) {
        -: 2699:        // Avoid the syscall if we're only handling a noreply.
        -: 2700:        // Return the response object.
    50353: 2701:        _transmit_post(c, 0);
    50353: 2702:        return TRANSMIT_COMPLETE;
        -: 2703:    }
        -: 2704:
        -: 2705:    // Alright, send.
   412836: 2706:    ssize_t res;
   412836: 2707:    msg.msg_iovlen = iovused;
   412836: 2708:    res = c->sendmsg(c, &msg, 0);
   412836: 2709:    if (res >= 0) {
   412492: 2710:        pthread_mutex_lock(&c->thread->stats.mutex);
   412492: 2711:        c->thread->stats.bytes_written += res;
   412492: 2712:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2713:
        -: 2714:        // Decrement any partial IOV's and complete any finished resp's.
   412492: 2715:        _transmit_post(c, res);
        -: 2716:
   412492: 2717:        if (c->resp_head) {
        -: 2718:            return TRANSMIT_INCOMPLETE;
        -: 2719:        } else {
   412087: 2720:            return TRANSMIT_COMPLETE;
        -: 2721:        }
        -: 2722:    }
        -: 2723:
      344: 2724:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      342: 2725:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2726:            if (settings.verbose > 0)
    #####: 2727:                fprintf(stderr, "Couldn't update event\n");
    #####: 2728:            conn_set_state(c, conn_closing);
    #####: 2729:            return TRANSMIT_HARD_ERROR;
        -: 2730:        }
        -: 2731:        return TRANSMIT_SOFT_ERROR;
        -: 2732:    }
        -: 2733:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2734:       we have a real error, on which we close the connection */
        2: 2735:    if (settings.verbose > 0)
    #####: 2736:        perror("Failed to write, and not due to blocking");
        -: 2737:
        2: 2738:    conn_set_state(c, conn_closing);
        2: 2739:    return TRANSMIT_HARD_ERROR;
        -: 2740:}
        -: 2741:
       32: 2742:static void build_udp_header(unsigned char *hdr, mc_resp *resp) {
        -: 2743:    // We need to communicate the total number of packets
        -: 2744:    // If this isn't set, it's the first time this response is building a udp
        -: 2745:    // header, so "tosend" must be static.
       32: 2746:    if (!resp->udp_total) {
       18: 2747:        uint32_t total;
       18: 2748:        total = resp->tosend / UDP_DATA_SIZE;
       18: 2749:        if (resp->tosend % UDP_DATA_SIZE)
       18: 2750:            total++;
        -: 2751:        // The spec doesn't really say what we should do here. It's _probably_
        -: 2752:        // better to bail out?
       18: 2753:        if (total > USHRT_MAX) {
        -: 2754:            total = USHRT_MAX;
        -: 2755:        }
       18: 2756:        resp->udp_total = total;
        -: 2757:    }
        -: 2758:
        -: 2759:    // TODO: why wasn't this hto*'s and casts?
        -: 2760:    // this ends up sending UDP hdr data specifically in host byte order.
       32: 2761:    *hdr++ = resp->request_id / 256;
       32: 2762:    *hdr++ = resp->request_id % 256;
       32: 2763:    *hdr++ = resp->udp_sequence / 256;
       32: 2764:    *hdr++ = resp->udp_sequence % 256;
       32: 2765:    *hdr++ = resp->udp_total / 256;
       32: 2766:    *hdr++ = resp->udp_total % 256;
       32: 2767:    *hdr++ = 0;
       32: 2768:    *hdr++ = 0;
       32: 2769:    resp->udp_sequence++;
       32: 2770:}
        -: 2771:
        -: 2772:/*
        -: 2773: * UDP specific transmit function. Uses its own function rather than check
        -: 2774: * IS_UDP() five times. If we ever implement sendmmsg or similar support they
        -: 2775: * will diverge even more.
        -: 2776: * Does not use TLS.
        -: 2777: *
        -: 2778: * Returns:
        -: 2779: *   TRANSMIT_COMPLETE   All done writing.
        -: 2780: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2781: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2782: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2783: */
       32: 2784:static enum transmit_result transmit_udp(conn *c) {
      32*: 2785:    assert(c != NULL);
       32: 2786:    struct iovec iovs[IOV_MAX];
       32: 2787:    struct msghdr msg;
       32: 2788:    mc_resp *resp;
       32: 2789:    int iovused = 0;
       32: 2790:    unsigned char udp_hdr[UDP_HEADER_SIZE];
        -: 2791:
        -: 2792:    // We only send one UDP packet per call (ugh), so we can only operate on a
        -: 2793:    // single response at a time.
       32: 2794:    resp = c->resp_head;
        -: 2795:
       32: 2796:    if (!resp) {
        -: 2797:        return TRANSMIT_COMPLETE;
        -: 2798:    }
        -: 2799:
       32: 2800:    if (resp->skip) {
    #####: 2801:        resp = resp_finish(c, resp);
    #####: 2802:        return TRANSMIT_INCOMPLETE;
        -: 2803:    }
        -: 2804:
        -: 2805:    // clear the message and initialize it.
       32: 2806:    memset(&msg, 0, sizeof(struct msghdr));
       32: 2807:    msg.msg_iov = iovs;
        -: 2808:
        -: 2809:    // the UDP source to return to.
       32: 2810:    msg.msg_name = &resp->request_addr;
       32: 2811:    msg.msg_namelen = resp->request_addr_size;
        -: 2812:
        -: 2813:    // First IOV is the custom UDP header.
       32: 2814:    iovs[0].iov_base = (void *)udp_hdr;
       32: 2815:    iovs[0].iov_len = UDP_HEADER_SIZE;
       32: 2816:    build_udp_header(udp_hdr, resp);
       32: 2817:    iovused++;
        -: 2818:
        -: 2819:    // Fill the IOV's the standard way.
        -: 2820:    // TODO: might get a small speedup if we let it break early with a length
        -: 2821:    // limit.
       32: 2822:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ONE_RESP);
        -: 2823:
        -: 2824:    // Clip the IOV's to the max UDP packet size.
        -: 2825:    // If we add support for send_mmsg, this can be where we split msg's.
        -: 2826:    {
       32: 2827:        int x = 0;
       32: 2828:        int len = 0;
      143: 2829:        for (x = 0; x < iovused; x++) {
       93: 2830:            if (len + iovs[x].iov_len >= UDP_MAX_PAYLOAD_SIZE) {
       14: 2831:                iovs[x].iov_len = UDP_MAX_PAYLOAD_SIZE - len;
       14: 2832:                x++;
       14: 2833:                break;
        -: 2834:            } else {
       79: 2835:                len += iovs[x].iov_len;
        -: 2836:            }
        -: 2837:        }
       32: 2838:        iovused = x;
        -: 2839:    }
        -: 2840:
       32: 2841:    ssize_t res;
       32: 2842:    msg.msg_iovlen = iovused;
        -: 2843:    // NOTE: uses system sendmsg since we have no support for indirect UDP.
       32: 2844:    res = sendmsg(c->sfd, &msg, 0);
       32: 2845:    if (res >= 0) {
       32: 2846:        pthread_mutex_lock(&c->thread->stats.mutex);
       32: 2847:        c->thread->stats.bytes_written += res;
       32: 2848:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2849:
        -: 2850:        // Ignore the header size from forwarding the IOV's
       32: 2851:        res -= UDP_HEADER_SIZE;
        -: 2852:
        -: 2853:        // Decrement any partial IOV's and complete any finished resp's.
       32: 2854:        _transmit_post(c, res);
        -: 2855:
       32: 2856:        if (c->resp_head) {
        -: 2857:            return TRANSMIT_INCOMPLETE;
        -: 2858:        } else {
       18: 2859:            return TRANSMIT_COMPLETE;
        -: 2860:        }
        -: 2861:    }
        -: 2862:
    #####: 2863:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    #####: 2864:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2865:            if (settings.verbose > 0)
    #####: 2866:                fprintf(stderr, "Couldn't update event\n");
    #####: 2867:            conn_set_state(c, conn_closing);
    #####: 2868:            return TRANSMIT_HARD_ERROR;
        -: 2869:        }
        -: 2870:        return TRANSMIT_SOFT_ERROR;
        -: 2871:    }
        -: 2872:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2873:       we have a real error, on which we close the connection */
    #####: 2874:    if (settings.verbose > 0)
    #####: 2875:        perror("Failed to write, and not due to blocking");
        -: 2876:
    #####: 2877:    conn_set_state(c, conn_read);
    #####: 2878:    return TRANSMIT_HARD_ERROR;
        -: 2879:}
        -: 2880:
        -: 2881:
        -: 2882:/* Does a looped read to fill data chunks */
        -: 2883:/* TODO: restrict number of times this can loop.
        -: 2884: * Also, benchmark using readv's.
        -: 2885: */
    15343: 2886:static int read_into_chunked_item(conn *c) {
    15343: 2887:    int total = 0;
    15343: 2888:    int res;
   15343*: 2889:    assert(c->rcurr != c->ritem);
        -: 2890:
   117617: 2891:    while (c->rlbytes > 0) {
   113026: 2892:        item_chunk *ch = (item_chunk *)c->ritem;
   113026: 2893:        if (ch->size == ch->used) {
        -: 2894:            // FIXME: ch->next is currently always 0. remove this?
    41442: 2895:            if (ch->next) {
    #####: 2896:                c->ritem = (char *) ch->next;
        -: 2897:            } else {
        -: 2898:                /* Allocate next chunk. Binary protocol needs 2b for \r\n */
    41442: 2899:                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +
    41442: 2900:                       ((c->protocol == binary_prot) ? 2 : 0));
    41442: 2901:                if (!c->ritem) {
        -: 2902:                    // We failed an allocation. Let caller handle cleanup.
        -: 2903:                    total = -2;
        -: 2904:                    break;
        -: 2905:                }
        -: 2906:                // ritem has new chunk, restart the loop.
    41442: 2907:                continue;
        -: 2908:                //assert(c->rlbytes == 0);
        -: 2909:            }
        -: 2910:        }
        -: 2911:
    71584: 2912:        int unused = ch->size - ch->used;
        -: 2913:        /* first check if we have leftovers in the conn_read buffer */
    71584: 2914:        if (c->rbytes > 0) {
    17232: 2915:            total = 0;
    17232: 2916:            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
    17232: 2917:            tocopy = tocopy > unused ? unused : tocopy;
    17232: 2918:            if (c->ritem != c->rcurr) {
    17232: 2919:                memmove(ch->data + ch->used, c->rcurr, tocopy);
        -: 2920:            }
    17232: 2921:            total += tocopy;
    17232: 2922:            c->rlbytes -= tocopy;
    17232: 2923:            c->rcurr += tocopy;
    17232: 2924:            c->rbytes -= tocopy;
    17232: 2925:            ch->used += tocopy;
    17232: 2926:            if (c->rlbytes == 0) {
        -: 2927:                break;
        -: 2928:            }
        -: 2929:        } else {
        -: 2930:            /*  now try reading from the socket */
   108704: 2931:            res = c->read(c, ch->data + ch->used,
    54352: 2932:                    (unused > c->rlbytes ? c->rlbytes : unused));
    54352: 2933:            if (res > 0) {
    46453: 2934:                pthread_mutex_lock(&c->thread->stats.mutex);
    46453: 2935:                c->thread->stats.bytes_read += res;
    46453: 2936:                pthread_mutex_unlock(&c->thread->stats.mutex);
    46453: 2937:                ch->used += res;
    46453: 2938:                total += res;
    46453: 2939:                c->rlbytes -= res;
        -: 2940:            } else {
        -: 2941:                /* Reset total to the latest result so caller can handle it */
        -: 2942:                total = res;
        -: 2943:                break;
        -: 2944:            }
        -: 2945:        }
        -: 2946:    }
        -: 2947:
        -: 2948:    /* At some point I will be able to ditch the \r\n from item storage and
        -: 2949:       remove all of these kludges.
        -: 2950:       The above binprot check ensures inline space for \r\n, but if we do
        -: 2951:       exactly enough allocs there will be no additional chunk for \r\n.
        -: 2952:     */
    15343: 2953:    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {
      202: 2954:        item_chunk *ch = (item_chunk *)c->ritem;
      202: 2955:        if (ch->size - ch->used < 2) {
        2: 2956:            c->ritem = (char *) do_item_alloc_chunk(ch, 2);
        2: 2957:            if (!c->ritem) {
    #####: 2958:                total = -2;
        -: 2959:            }
        -: 2960:        }
        -: 2961:    }
    15343: 2962:    return total;
        -: 2963:}
        -: 2964:
   484149: 2965:static void drive_machine(conn *c) {
   484149: 2966:    bool stop = false;
   484149: 2967:    int sfd;
   484149: 2968:    socklen_t addrlen;
   484149: 2969:    struct sockaddr_storage addr;
   484149: 2970:    int nreqs = settings.reqs_per_event;
   484149: 2971:    int res;
   484149: 2972:    const char *str;
        -: 2973:#ifdef HAVE_ACCEPT4
   484149: 2974:    static int  use_accept4 = 1;
        -: 2975:#else
        -: 2976:    static int  use_accept4 = 0;
        -: 2977:#endif
        -: 2978:
  484149*: 2979:    assert(c != NULL);
        -: 2980:
  4102334: 2981:    while (!stop) {
        -: 2982:
  3618185: 2983:        switch(c->state) {
     2187: 2984:        case conn_listening:
     2187: 2985:            addrlen = sizeof(addr);
        -: 2986:#ifdef HAVE_ACCEPT4
     2187: 2987:            if (use_accept4) {
     2187: 2988:                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);
        -: 2989:            } else {
    #####: 2990:                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 2991:            }
        -: 2992:#else
        -: 2993:            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 2994:#endif
     2187: 2995:            if (sfd == -1) {
    #####: 2996:                if (use_accept4 && errno == ENOSYS) {
    #####: 2997:                    use_accept4 = 0;
    #####: 2998:                    continue;
        -: 2999:                }
    #####: 3000:                perror(use_accept4 ? "accept4()" : "accept()");
    #####: 3001:                if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 3002:                    /* these are transient, so don't log anything */
        -: 3003:                    stop = true;
    #####: 3004:                } else if (errno == EMFILE) {
    #####: 3005:                    if (settings.verbose > 0)
    #####: 3006:                        fprintf(stderr, "Too many open connections\n");
    #####: 3007:                    accept_new_conns(false);
    #####: 3008:                    stop = true;
        -: 3009:                } else {
    #####: 3010:                    perror("accept()");
    #####: 3011:                    stop = true;
        -: 3012:                }
        -: 3013:                break;
        -: 3014:            }
     2187: 3015:            if (!use_accept4) {
    #####: 3016:                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {
    #####: 3017:                    perror("setting O_NONBLOCK");
    #####: 3018:                    close(sfd);
    #####: 3019:                    break;
        -: 3020:                }
        -: 3021:            }
        -: 3022:
     2187: 3023:            bool reject;
     2187: 3024:            if (settings.maxconns_fast) {
     2178: 3025:                reject = sfd >= settings.maxconns - 1;
     2178: 3026:                if (reject) {
       97: 3027:                    STATS_LOCK();
       97: 3028:                    stats.rejected_conns++;
       97: 3029:                    STATS_UNLOCK();
        -: 3030:                }
        -: 3031:            } else {
        -: 3032:                reject = false;
        -: 3033:            }
        -: 3034:
     2178: 3035:            if (reject) {
       97: 3036:                str = "ERROR Too many open connections\r\n";
       97: 3037:                res = write(sfd, str, strlen(str));
       97: 3038:                close(sfd);
        -: 3039:            } else {
     2090: 3040:                void *ssl_v = NULL;
        -: 3041:#ifdef TLS
        -: 3042:                SSL *ssl = NULL;
        -: 3043:                if (c->ssl_enabled) {
        -: 3044:                    assert(IS_TCP(c->transport) && settings.ssl_enabled);
        -: 3045:
        -: 3046:                    if (settings.ssl_ctx == NULL) {
        -: 3047:                        if (settings.verbose) {
        -: 3048:                            fprintf(stderr, "SSL context is not initialized\n");
        -: 3049:                        }
        -: 3050:                        close(sfd);
        -: 3051:                        break;
        -: 3052:                    }
        -: 3053:                    SSL_LOCK();
        -: 3054:                    ssl = SSL_new(settings.ssl_ctx);
        -: 3055:                    SSL_UNLOCK();
        -: 3056:                    if (ssl == NULL) {
        -: 3057:                        if (settings.verbose) {
        -: 3058:                            fprintf(stderr, "Failed to created the SSL object\n");
        -: 3059:                        }
        -: 3060:                        close(sfd);
        -: 3061:                        break;
        -: 3062:                    }
        -: 3063:                    SSL_set_fd(ssl, sfd);
        -: 3064:                    int ret = SSL_accept(ssl);
        -: 3065:                    if (ret <= 0) {
        -: 3066:                        int err = SSL_get_error(ssl, ret);
        -: 3067:                        if (err == SSL_ERROR_SYSCALL || err == SSL_ERROR_SSL) {
        -: 3068:                            if (settings.verbose) {
        -: 3069:                                fprintf(stderr, "SSL connection failed with error code : %d : %s\n", err, strerror(errno));
        -: 3070:                            }
        -: 3071:                            SSL_free(ssl);
        -: 3072:                            close(sfd);
        -: 3073:                            STATS_LOCK();
        -: 3074:                            stats.ssl_handshake_errors++;
        -: 3075:                            STATS_UNLOCK();
        -: 3076:                            break;
        -: 3077:                        }
        -: 3078:                    }
        -: 3079:                }
        -: 3080:                ssl_v = (void*) ssl;
        -: 3081:#endif
        -: 3082:
     2090: 3083:                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,
        -: 3084:                                     READ_BUFFER_CACHED, c->transport, ssl_v, c->tag, c->protocol);
        -: 3085:            }
        -: 3086:
        -: 3087:            stop = true;
        -: 3088:            break;
        -: 3089:
   456701: 3090:        case conn_waiting:
   456701: 3091:            rbuf_release(c);
   456701: 3092:            if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3093:                if (settings.verbose > 0)
    #####: 3094:                    fprintf(stderr, "Couldn't update event\n");
    #####: 3095:                conn_set_state(c, conn_closing);
    #####: 3096:                break;
        -: 3097:            }
        -: 3098:
   456701: 3099:            conn_set_state(c, conn_read);
   456701: 3100:            stop = true;
   456701: 3101:            break;
        -: 3102:
   456694: 3103:        case conn_read:
   456694: 3104:            if (!IS_UDP(c->transport)) {
        -: 3105:                // Assign a read buffer if necessary.
   456663: 3106:                if (!rbuf_alloc(c)) {
        -: 3107:                    // TODO: Some way to allow for temporary failures.
    #####: 3108:                    conn_set_state(c, conn_closing);
    #####: 3109:                    break;
        -: 3110:                }
   456663: 3111:                res = try_read_network(c);
        -: 3112:            } else {
        -: 3113:                // UDP connections always have a static buffer.
       31: 3114:                res = try_read_udp(c);
        -: 3115:            }
        -: 3116:
   456694: 3117:            switch (res) {
       13: 3118:            case READ_NO_DATA_RECEIVED:
       13: 3119:                conn_set_state(c, conn_waiting);
       13: 3120:                break;
   454632: 3121:            case READ_DATA_RECEIVED:
   454632: 3122:                conn_set_state(c, conn_parse_cmd);
   454632: 3123:                break;
     2049: 3124:            case READ_ERROR:
     2049: 3125:                conn_set_state(c, conn_closing);
     2049: 3126:                break;
        -: 3127:            case READ_MEMORY_ERROR: /* Failed to allocate more memory */
        -: 3128:                /* State already set by try_read_network */
        -: 3129:                break;
        -: 3130:            }
        -: 3131:            break;
        -: 3132:
   604244: 3133:        case conn_parse_cmd:
   604244: 3134:            c->noreply = false;
   604244: 3135:            if (c->try_read_command(c) == 0) {
        -: 3136:                /* we need more data! */
     7438: 3137:                if (c->resp_head) {
        -: 3138:                    // Buffered responses waiting, flush in the meantime.
     3702: 3139:                    conn_set_state(c, conn_mwrite);
        -: 3140:                } else {
     3736: 3141:                    conn_set_state(c, conn_waiting);
        -: 3142:                }
        -: 3143:            }
        -: 3144:
        -: 3145:            break;
        -: 3146:
   948773: 3147:        case conn_new_cmd:
        -: 3148:            /* Only process nreqs at a time to avoid starving other
        -: 3149:               connections */
        -: 3150:
   948773: 3151:            --nreqs;
   948773: 3152:            if (nreqs >= 0) {
   939425: 3153:                reset_cmd_handler(c);
     9348: 3154:            } else if (c->resp_head) {
        -: 3155:                // flush response pipe on yield.
     4591: 3156:                conn_set_state(c, conn_mwrite);
        -: 3157:            } else {
     4757: 3158:                pthread_mutex_lock(&c->thread->stats.mutex);
     4757: 3159:                c->thread->stats.conn_yields++;
     4757: 3160:                pthread_mutex_unlock(&c->thread->stats.mutex);
     4757: 3161:                if (c->rbytes > 0) {
        -: 3162:                    /* We have already read in data into the input buffer,
        -: 3163:                       so libevent will most likely not signal read events
        -: 3164:                       on the socket (unless more data is available. As a
        -: 3165:                       hack we should just put in a request to write data,
        -: 3166:                       because that should be possible ;-)
        -: 3167:                    */
     4731: 3168:                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 3169:                        if (settings.verbose > 0)
    #####: 3170:                            fprintf(stderr, "Couldn't update event\n");
    #####: 3171:                        conn_set_state(c, conn_closing);
    #####: 3172:                        break;
        -: 3173:                    }
        -: 3174:                }
        -: 3175:                stop = true;
        -: 3176:            }
        -: 3177:            break;
        -: 3178:
   682586: 3179:        case conn_nread:
   682586: 3180:            if (c->rlbytes == 0) {
   325891: 3181:                complete_nread(c);
   325891: 3182:                break;
        -: 3183:            }
        -: 3184:
        -: 3185:            /* Check if rbytes < 0, to prevent crash */
   356695: 3186:            if (c->rlbytes < 0) {
    #####: 3187:                if (settings.verbose) {
    #####: 3188:                    fprintf(stderr, "Invalid rlbytes to read: len %d\n", c->rlbytes);
        -: 3189:                }
    #####: 3190:                conn_set_state(c, conn_closing);
    #####: 3191:                break;
        -: 3192:            }
        -: 3193:
   356695: 3194:            if (c->item_malloced || ((((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) ) {
        -: 3195:                /* first check if we have leftovers in the conn_read buffer */
   341352: 3196:                if (c->rbytes > 0) {
   318359: 3197:                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
   318359: 3198:                    memmove(c->ritem, c->rcurr, tocopy);
   318359: 3199:                    c->ritem += tocopy;
   318359: 3200:                    c->rlbytes -= tocopy;
   318359: 3201:                    c->rcurr += tocopy;
   318359: 3202:                    c->rbytes -= tocopy;
   318359: 3203:                    if (c->rlbytes == 0) {
        -: 3204:                        break;
        -: 3205:                    }
        -: 3206:                }
        -: 3207:
        -: 3208:                /*  now try reading from the socket */
    64350: 3209:                res = c->read(c, c->ritem, c->rlbytes);
    64350: 3210:                if (res > 0) {
    54834: 3211:                    pthread_mutex_lock(&c->thread->stats.mutex);
    54834: 3212:                    c->thread->stats.bytes_read += res;
    54834: 3213:                    pthread_mutex_unlock(&c->thread->stats.mutex);
    54834: 3214:                    if (c->rcurr == c->ritem) {
    #####: 3215:                        c->rcurr += res;
        -: 3216:                    }
    54834: 3217:                    c->ritem += res;
    54834: 3218:                    c->rlbytes -= res;
    54834: 3219:                    break;
        -: 3220:                }
        -: 3221:            } else {
    15343: 3222:                res = read_into_chunked_item(c);
    15343: 3223:                if (res > 0)
        -: 3224:                    break;
        -: 3225:            }
        -: 3226:
    17415: 3227:            if (res == 0) { /* end of stream */
        2: 3228:                c->close_reason = NORMAL_CLOSE;
        2: 3229:                conn_set_state(c, conn_closing);
        2: 3230:                break;
        -: 3231:            }
        -: 3232:
    17413: 3233:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    17413: 3234:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3235:                    if (settings.verbose > 0)
    #####: 3236:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3237:                    conn_set_state(c, conn_closing);
    #####: 3238:                    break;
        -: 3239:                }
        -: 3240:                stop = true;
        -: 3241:                break;
        -: 3242:            }
        -: 3243:
        -: 3244:            /* Memory allocation failure */
    #####: 3245:            if (res == -2) {
    #####: 3246:                out_of_memory(c, "SERVER_ERROR Out of memory during read");
    #####: 3247:                c->sbytes = c->rlbytes;
    #####: 3248:                conn_set_state(c, conn_swallow);
        -: 3249:                // Ensure this flag gets cleared. It gets killed on conn_new()
        -: 3250:                // so any conn_closing is fine, calling complete_nread is
        -: 3251:                // fine. This swallow semms to be the only other case.
    #####: 3252:                c->set_stale = false;
    #####: 3253:                c->mset_res = false;
    #####: 3254:                break;
        -: 3255:            }
        -: 3256:            /* otherwise we have a real error, on which we close the connection */
    #####: 3257:            if (settings.verbose > 0) {
    #####: 3258:                fprintf(stderr, "Failed to read, and not due to blocking:\n"
        -: 3259:                        "errno: %d %s \n"
        -: 3260:                        "rcurr=%p ritem=%p rbuf=%p rlbytes=%d rsize=%d\n",
    #####: 3261:                        errno, strerror(errno),
    #####: 3262:                        (void *)c->rcurr, (void *)c->ritem, (void *)c->rbuf,
        -: 3263:                        (int)c->rlbytes, (int)c->rsize);
        -: 3264:            }
    #####: 3265:            conn_set_state(c, conn_closing);
    #####: 3266:            break;
        -: 3267:
      918: 3268:        case conn_swallow:
        -: 3269:            /* we are reading sbytes and throwing them away */
      918: 3270:            if (c->sbytes <= 0) {
       12: 3271:                conn_set_state(c, conn_new_cmd);
       12: 3272:                break;
        -: 3273:            }
        -: 3274:
        -: 3275:            /* first check if we have leftovers in the conn_read buffer */
      906: 3276:            if (c->rbytes > 0) {
       11: 3277:                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;
       11: 3278:                c->sbytes -= tocopy;
       11: 3279:                c->rcurr += tocopy;
       11: 3280:                c->rbytes -= tocopy;
       11: 3281:                break;
        -: 3282:            }
        -: 3283:
        -: 3284:            /*  now try reading from the socket */
      895: 3285:            res = c->read(c, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);
      895: 3286:            if (res > 0) {
      624: 3287:                pthread_mutex_lock(&c->thread->stats.mutex);
      624: 3288:                c->thread->stats.bytes_read += res;
      624: 3289:                pthread_mutex_unlock(&c->thread->stats.mutex);
      624: 3290:                c->sbytes -= res;
      624: 3291:                break;
        -: 3292:            }
      271: 3293:            if (res == 0) { /* end of stream */
    #####: 3294:                c->close_reason = NORMAL_CLOSE;
    #####: 3295:                conn_set_state(c, conn_closing);
    #####: 3296:                break;
        -: 3297:            }
      271: 3298:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      271: 3299:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3300:                    if (settings.verbose > 0)
    #####: 3301:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3302:                    conn_set_state(c, conn_closing);
    #####: 3303:                    break;
        -: 3304:                }
        -: 3305:                stop = true;
        -: 3306:                break;
        -: 3307:            }
        -: 3308:            /* otherwise we have a real error, on which we close the connection */
    #####: 3309:            if (settings.verbose > 0)
    #####: 3310:                fprintf(stderr, "Failed to read, and not due to blocking\n");
    #####: 3311:            conn_set_state(c, conn_closing);
    #####: 3312:            break;
        -: 3313:
   463604: 3314:        case conn_write:
        -: 3315:        case conn_mwrite:
        -: 3316:            /* have side IO's that must process before transmit() can run.
        -: 3317:             * remove the connection from the worker thread and dispatch the
        -: 3318:             * IO queue
        -: 3319:             */
  463604*: 3320:            assert(c->io_queues_submitted == 0);
        -: 3321:
   493527: 3322:            for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
    29923: 3323:                if (q->stack_ctx != NULL) {
      383: 3324:                    io_queue_cb_t *qcb = thread_io_queue_get(c->thread, q->type);
      383: 3325:                    qcb->submit_cb(q);
      383: 3326:                    c->io_queues_submitted++;
        -: 3327:                }
        -: 3328:            }
   463604: 3329:            if (c->io_queues_submitted != 0) {
      383: 3330:                conn_set_state(c, conn_io_queue);
      383: 3331:                event_del(&c->event);
        -: 3332:
      383: 3333:                stop = true;
      383: 3334:                break;
        -: 3335:            }
        -: 3336:
   463221: 3337:            switch (!IS_UDP(c->transport) ? transmit(c) : transmit_udp(c)) {
   462458: 3338:            case TRANSMIT_COMPLETE:
   462458: 3339:                if (c->state == conn_mwrite) {
        -: 3340:                    // Free up IO wraps and any half-uploaded items.
   462458: 3341:                    conn_release_items(c);
   462458: 3342:                    conn_set_state(c, conn_new_cmd);
   462458: 3343:                    if (c->close_after_write) {
        8: 3344:                        conn_set_state(c, conn_closing);
        -: 3345:                    }
        -: 3346:                } else {
    #####: 3347:                    if (settings.verbose > 0)
    #####: 3348:                        fprintf(stderr, "Unexpected state %d\n", c->state);
    #####: 3349:                    conn_set_state(c, conn_closing);
        -: 3350:                }
        -: 3351:                break;
        -: 3352:
        -: 3353:            case TRANSMIT_INCOMPLETE:
        -: 3354:            case TRANSMIT_HARD_ERROR:
        -: 3355:                break;                   /* Continue in state machine. */
        -: 3356:
      342: 3357:            case TRANSMIT_SOFT_ERROR:
      342: 3358:                stop = true;
      342: 3359:                break;
        -: 3360:            }
        -: 3361:            break;
        -: 3362:
     2083: 3363:        case conn_closing:
     2083: 3364:            if (IS_UDP(c->transport))
    #####: 3365:                conn_cleanup(c);
        -: 3366:            else
     2083: 3367:                conn_close(c);
        -: 3368:            stop = true;
        -: 3369:            break;
        -: 3370:
    #####: 3371:        case conn_closed:
        -: 3372:            /* This only happens if dormando is an idiot. */
    #####: 3373:            abort();
        -: 3374:            break;
        -: 3375:
        -: 3376:        case conn_watch:
        -: 3377:            /* We handed off our connection to the logger thread. */
  4102334: 3378:            stop = true;
        -: 3379:            break;
      383: 3380:        case conn_io_queue:
        -: 3381:            /* Complete our queued IO's from within the worker thread. */
      383: 3382:            conn_set_state(c, conn_mwrite);
      383: 3383:            break;
        -: 3384:        case conn_max_state:
    #####: 3385:            assert(false);
        -: 3386:            break;
        -: 3387:        }
   284446: 3388:    }
        -: 3389:
   484149: 3390:    return;
        -: 3391:}
        -: 3392:
   483756: 3393:void event_handler(const evutil_socket_t fd, const short which, void *arg) {
   483756: 3394:    conn *c;
        -: 3395:
   483756: 3396:    c = (conn *)arg;
  483756*: 3397:    assert(c != NULL);
        -: 3398:
   483756: 3399:    c->which = which;
        -: 3400:
        -: 3401:    /* sanity */
   483756: 3402:    if (fd != c->sfd) {
    #####: 3403:        if (settings.verbose > 0)
    #####: 3404:            fprintf(stderr, "Catastrophic: event fd doesn't match conn fd!\n");
    #####: 3405:        conn_close(c);
    #####: 3406:        return;
        -: 3407:    }
        -: 3408:
   483756: 3409:    drive_machine(c);
        -: 3410:
        -: 3411:    /* wait for next event */
   483756: 3412:    return;
        -: 3413:}
        -: 3414:
       48: 3415:static int new_socket(struct addrinfo *ai) {
       48: 3416:    int sfd;
       48: 3417:    int flags;
        -: 3418:
       48: 3419:    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
        -: 3420:        return -1;
        -: 3421:    }
        -: 3422:
       96: 3423:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       48: 3424:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3425:        perror("setting O_NONBLOCK");
    #####: 3426:        close(sfd);
    #####: 3427:        return -1;
        -: 3428:    }
        -: 3429:    return sfd;
        -: 3430:}
        -: 3431:
        -: 3432:
        -: 3433:/*
        -: 3434: * Sets a socket's send buffer size to the maximum allowed by the system.
        -: 3435: */
       18: 3436:static void maximize_sndbuf(const int sfd) {
       18: 3437:    socklen_t intsize = sizeof(int);
       18: 3438:    int last_good = 0;
       18: 3439:    int min, max, avg;
       18: 3440:    int old_size;
        -: 3441:
        -: 3442:    /* Start with the default size. */
        -: 3443:#ifdef _WIN32
        -: 3444:    if (getsockopt((SOCKET)sfd, SOL_SOCKET, SO_SNDBUF, (char *)&old_size, &intsize) != 0) {
        -: 3445:#else
       18: 3446:    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {
        -: 3447:#endif /* #ifdef _WIN32 */
    #####: 3448:        if (settings.verbose > 0)
    #####: 3449:            perror("getsockopt(SO_SNDBUF)");
    #####: 3450:        return;
        -: 3451:    }
        -: 3452:
        -: 3453:    /* Binary-search for the real maximum. */
       18: 3454:    min = old_size;
       18: 3455:    max = MAX_SENDBUF_SIZE;
        -: 3456:
      522: 3457:    while (min <= max) {
      504: 3458:        avg = ((unsigned int)(min + max)) / 2;
      504: 3459:        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {
      504: 3460:            last_good = avg;
      504: 3461:            min = avg + 1;
        -: 3462:        } else {
    #####: 3463:            max = avg - 1;
        -: 3464:        }
        -: 3465:    }
        -: 3466:
       18: 3467:    if (settings.verbose > 1)
      18*: 3468:        fprintf(stderr, "<%d send buffer was %d, now %d\n", sfd, old_size, last_good);
        -: 3469:}
        -: 3470:
        -: 3471:/**
        -: 3472: * Create a socket and bind it to a specific port number
        -: 3473: * @param interface the interface to bind to
        -: 3474: * @param port the port number to bind to
        -: 3475: * @param transport the transport protocol (TCP / UDP)
        -: 3476: * @param portnumber_file A filepointer to write the port numbers to
        -: 3477: *        when they are successfully added to the list of ports we
        -: 3478: *        listen on.
        -: 3479: */
       31: 3480:static int server_socket(const char *interface,
        -: 3481:                         int port,
        -: 3482:                         enum network_transport transport,
        -: 3483:                         FILE *portnumber_file, bool ssl_enabled,
        -: 3484:                         uint64_t conntag,
        -: 3485:                         enum protocol bproto) {
       31: 3486:    int sfd;
       31: 3487:    struct linger ling = {0, 0};
       31: 3488:    struct addrinfo *ai;
       31: 3489:    struct addrinfo *next;
       31: 3490:    struct addrinfo hints = { .ai_flags = AI_PASSIVE,
        -: 3491:                              .ai_family = AF_UNSPEC };
       31: 3492:    char port_buf[NI_MAXSERV];
       31: 3493:    int error;
       31: 3494:    int success = 0;
       31: 3495:    int flags =1;
        -: 3496:
       31: 3497:    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;
        -: 3498:
       31: 3499:    if (port == -1) {
        9: 3500:        port = 0;
        -: 3501:    }
       31: 3502:    snprintf(port_buf, sizeof(port_buf), "%d", port);
       31: 3503:    error= getaddrinfo(interface, port_buf, &hints, &ai);
       31: 3504:    if (error != 0) {
        1: 3505:        if (error != EAI_SYSTEM)
        1: 3506:          fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(error));
        -: 3507:        else
    #####: 3508:          perror("getaddrinfo()");
        1: 3509:        return 1;
        -: 3510:    }
        -: 3511:
       78: 3512:    for (next= ai; next; next= next->ai_next) {
       48: 3513:        conn *listen_conn_add;
       48: 3514:        if ((sfd = new_socket(next)) == -1) {
        -: 3515:            /* getaddrinfo can return "junk" addresses,
        -: 3516:             * we make sure at least one works before erroring.
        -: 3517:             */
    #####: 3518:            if (errno == EMFILE) {
        -: 3519:                /* ...unless we're out of fds */
    #####: 3520:                perror("server_socket");
    #####: 3521:                exit(EX_OSERR);
        -: 3522:            }
    #####: 3523:            continue;
        -: 3524:        }
        -: 3525:
       48: 3526:        if (settings.num_napi_ids) {
    #####: 3527:            socklen_t len = sizeof(socklen_t);
    #####: 3528:            int napi_id;
    #####: 3529:            error = getsockopt(sfd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &napi_id, &len);
    #####: 3530:            if (error != 0) {
    #####: 3531:                fprintf(stderr, "-N <num_napi_ids> option not supported\n");
    #####: 3532:                exit(EXIT_FAILURE);
        -: 3533:            }
        -: 3534:        }
        -: 3535:
        -: 3536:#ifdef IPV6_V6ONLY
       48: 3537:        if (next->ai_family == AF_INET6) {
       18: 3538:            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));
       18: 3539:            if (error != 0) {
    #####: 3540:                perror("setsockopt");
    #####: 3541:                close(sfd);
    #####: 3542:                continue;
        -: 3543:            }
        -: 3544:        }
        -: 3545:#endif
        -: 3546:#ifdef SOCK_COOKIE_ID
       48: 3547:        if (settings.sock_cookie_id != 0) {
    #####: 3548:            error = setsockopt(sfd, SOL_SOCKET, SOCK_COOKIE_ID, (void *)&settings.sock_cookie_id, sizeof(uint32_t));
    #####: 3549:            if (error != 0)
    #####: 3550:                perror("setsockopt");
        -: 3551:        }
        -: 3552:#endif
        -: 3553:
       48: 3554:        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       48: 3555:        if (IS_UDP(transport)) {
       18: 3556:            maximize_sndbuf(sfd);
        -: 3557:        } else {
       30: 3558:            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       30: 3559:            if (error != 0)
    #####: 3560:                perror("setsockopt");
        -: 3561:
       30: 3562:            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
       30: 3563:            if (error != 0)
    #####: 3564:                perror("setsockopt");
        -: 3565:
       30: 3566:            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));
       30: 3567:            if (error != 0)
    #####: 3568:                perror("setsockopt");
        -: 3569:        }
        -: 3570:
       48: 3571:        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {
    #####: 3572:            if (errno != EADDRINUSE) {
    #####: 3573:                perror("bind()");
    #####: 3574:                close(sfd);
    #####: 3575:                freeaddrinfo(ai);
    #####: 3576:                return 1;
        -: 3577:            }
    #####: 3578:            close(sfd);
    #####: 3579:            continue;
        -: 3580:        } else {
       48: 3581:            success++;
       48: 3582:            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {
    #####: 3583:                perror("listen()");
    #####: 3584:                close(sfd);
    #####: 3585:                freeaddrinfo(ai);
    #####: 3586:                return 1;
        -: 3587:            }
       48: 3588:            if (portnumber_file != NULL &&
       36: 3589:                (next->ai_addr->sa_family == AF_INET ||
        -: 3590:                 next->ai_addr->sa_family == AF_INET6)) {
       36: 3591:                union {
        -: 3592:                    struct sockaddr_in in;
        -: 3593:                    struct sockaddr_in6 in6;
        -: 3594:                } my_sockaddr;
       36: 3595:                socklen_t len = sizeof(my_sockaddr);
       36: 3596:                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {
       36: 3597:                    if (next->ai_addr->sa_family == AF_INET) {
       54: 3598:                        fprintf(portnumber_file, "%s INET: %u\n",
        -: 3599:                                IS_UDP(transport) ? "UDP" : "TCP",
       18: 3600:                                ntohs(my_sockaddr.in.sin_port));
        -: 3601:                    } else {
       36: 3602:                        fprintf(portnumber_file, "%s INET6: %u\n",
        -: 3603:                                IS_UDP(transport) ? "UDP" : "TCP",
       18: 3604:                                ntohs(my_sockaddr.in6.sin6_port));
        -: 3605:                    }
        -: 3606:                }
        -: 3607:            }
        -: 3608:        }
        -: 3609:
       48: 3610:        if (IS_UDP(transport)) {
        -: 3611:            int c;
        -: 3612:
       90: 3613:            for (c = 0; c < settings.num_threads_per_udp; c++) {
        -: 3614:                /* Allocate one UDP file descriptor per worker thread;
        -: 3615:                 * this allows "stats conns" to separately list multiple
        -: 3616:                 * parallel UDP requests in progress.
        -: 3617:                 *
        -: 3618:                 * The dispatch code round-robins new connection requests
        -: 3619:                 * among threads, so this is guaranteed to assign one
        -: 3620:                 * FD to each thread.
        -: 3621:                 */
       72: 3622:                int per_thread_fd;
       72: 3623:                if (c == 0) {
        -: 3624:                    per_thread_fd = sfd;
        -: 3625:                } else {
       54: 3626:                    per_thread_fd = dup(sfd);
       54: 3627:                    if (per_thread_fd < 0) {
    #####: 3628:                        perror("Failed to duplicate file descriptor");
    #####: 3629:                        exit(EXIT_FAILURE);
        -: 3630:                    }
        -: 3631:                }
       72: 3632:                dispatch_conn_new(per_thread_fd, conn_read,
        -: 3633:                                  EV_READ | EV_PERSIST,
        -: 3634:                                  UDP_READ_BUFFER_SIZE, transport, NULL, conntag, bproto);
        -: 3635:            }
        -: 3636:        } else {
       30: 3637:            if (!(listen_conn_add = conn_new(sfd, conn_listening,
        -: 3638:                                             EV_READ | EV_PERSIST, 1,
        -: 3639:                                             transport, main_base, NULL, conntag, bproto))) {
    #####: 3640:                fprintf(stderr, "failed to create listening connection\n");
    #####: 3641:                exit(EXIT_FAILURE);
        -: 3642:            }
        -: 3643:#ifdef TLS
        -: 3644:            listen_conn_add->ssl_enabled = ssl_enabled;
        -: 3645:#else
      30*: 3646:            assert(ssl_enabled == false);
        -: 3647:#endif
       30: 3648:            listen_conn_add->next = listen_conn;
       30: 3649:            listen_conn = listen_conn_add;
        -: 3650:        }
        -: 3651:    }
        -: 3652:
       30: 3653:    freeaddrinfo(ai);
        -: 3654:
        -: 3655:    /* Return zero iff we detected no errors in starting up connections */
       30: 3656:    return success == 0;
        -: 3657:}
        -: 3658:
       31: 3659:static int server_sockets(int port, enum network_transport transport,
        -: 3660:                          FILE *portnumber_file) {
       31: 3661:    bool ssl_enabled = false;
        -: 3662:
        -: 3663:#ifdef TLS
        -: 3664:    const char *notls = "notls";
        -: 3665:    ssl_enabled = settings.ssl_enabled;
        -: 3666:#endif
        -: 3667:
       31: 3668:    if (settings.inter == NULL) {
       18: 3669:        return server_socket(settings.inter, port, transport, portnumber_file, ssl_enabled, 0, settings.binding_protocol);
        -: 3670:    } else {
        -: 3671:        // tokenize them and bind to each one of them..
       13: 3672:        char *b;
       13: 3673:        int ret = 0;
       13: 3674:        char *list = strdup(settings.inter);
        -: 3675:
       13: 3676:        if (list == NULL) {
    #####: 3677:            fprintf(stderr, "Failed to allocate memory for parsing server interface string\n");
    #####: 3678:            return 1;
        -: 3679:        }
        -: 3680:        // If we encounter any failure, preserve the first errno for the caller.
       13: 3681:        int errno_save = 0;
       13: 3682:        for (char *p = strtok_r(list, ";,", &b);
       26: 3683:            p != NULL;
       13: 3684:            p = strtok_r(NULL, ";,", &b)) {
       13: 3685:            uint64_t conntag = 0;
       13: 3686:            int the_port = port;
        -: 3687:#ifdef TLS
        -: 3688:            ssl_enabled = settings.ssl_enabled;
        -: 3689:            // "notls" option is valid only when memcached is run with SSL enabled.
        -: 3690:            if (strncmp(p, notls, strlen(notls)) == 0) {
        -: 3691:                if (!settings.ssl_enabled) {
        -: 3692:                    fprintf(stderr, "'notls' option is valid only when SSL is enabled\n");
        -: 3693:                    free(list);
        -: 3694:                    return 1;
        -: 3695:                }
        -: 3696:                ssl_enabled = false;
        -: 3697:                p += strlen(notls) + 1;
        -: 3698:            }
        -: 3699:#endif
        -: 3700:
        -: 3701:            // Allow forcing the protocol of this listener.
       13: 3702:            const char *protostr = "proto";
       13: 3703:            enum protocol bproto = settings.binding_protocol;
       13: 3704:            if (strncmp(p, protostr, strlen(protostr)) == 0) {
    #####: 3705:                p += strlen(protostr);
    #####: 3706:                if (*p == '[') {
    #####: 3707:                    char *e = strchr(p, ']');
    #####: 3708:                    if (e == NULL) {
    #####: 3709:                        fprintf(stderr, "Invalid protocol spec: \"%s\"\n", p);
    #####: 3710:                        free(list);
    #####: 3711:                        return 1;
        -: 3712:                    }
    #####: 3713:                    char *st = ++p; // skip '[';
    #####: 3714:                    *e = '\0';
    #####: 3715:                    size_t len = e - st;
    #####: 3716:                    p = ++e; // skip ']'
    #####: 3717:                    p++; // skip an assumed ':'
        -: 3718:
    #####: 3719:                    if (strncmp(st, "ascii", len) == 0) {
        -: 3720:                        bproto = ascii_prot;
    #####: 3721:                    } else if (strncmp(st, "binary", len) == 0) {
        -: 3722:                        bproto = binary_prot;
    #####: 3723:                    } else if (strncmp(st, "negotiating", len) == 0) {
        -: 3724:                        bproto = negotiating_prot;
    #####: 3725:                    } else if (strncmp(st, "proxy", len) == 0) {
        -: 3726:#ifdef PROXY
        -: 3727:                        if (settings.proxy_enabled) {
        -: 3728:                            bproto = proxy_prot;
        -: 3729:                        } else {
        -: 3730:                            fprintf(stderr, "Proxy must be enabled to use: \"%s\"\n", list);
        -: 3731:                            free(list);
        -: 3732:                            return 1;
        -: 3733:                        }
        -: 3734:#else
    #####: 3735:                        fprintf(stderr, "Server not built with proxy: \"%s\"\n", list);
    #####: 3736:                        free(list);
    #####: 3737:                        return 1;
        -: 3738:#endif
        -: 3739:                    }
        -: 3740:                }
        -: 3741:            }
        -: 3742:
       13: 3743:            const char *tagstr = "tag";
       13: 3744:            if (strncmp(p, tagstr, strlen(tagstr)) == 0) {
    #####: 3745:                p += strlen(tagstr);
    #####: 3746:                if (*p == '[') {
    #####: 3747:                    char *e = strchr(p, ']');
    #####: 3748:                    if (e == NULL) {
    #####: 3749:                        fprintf(stderr, "Invalid tag in socket config: \"%s\"\n", p);
    #####: 3750:                        free(list);
    #####: 3751:                        return 1;
        -: 3752:                    }
    #####: 3753:                    char *st = ++p; // skip '['
    #####: 3754:                    *e = '\0';
    #####: 3755:                    size_t len = e - st;
    #####: 3756:                    p = ++e; // skip ']'
    #####: 3757:                    p++; // skip an assumed ':'
        -: 3758:
        -: 3759:                    // validate the tag and copy it in.
    #####: 3760:                    if (len > 8 || len < 1) {
    #####: 3761:                        fprintf(stderr, "Listener tags must be between 1 and 8 characters: \"%s\"\n", st);
    #####: 3762:                        free(list);
    #####: 3763:                        return 1;
        -: 3764:                    }
        -: 3765:
        -: 3766:                    // C programmers love turning string comparisons into
        -: 3767:                    // integer comparisons.
    #####: 3768:                    memcpy(&conntag, st, len);
        -: 3769:                }
        -: 3770:            }
        -: 3771:
       13: 3772:            char *h = NULL;
       13: 3773:            if (*p == '[') {
        -: 3774:                // expecting it to be an IPv6 address enclosed in []
        -: 3775:                // i.e. RFC3986 style recommended by RFC5952
    #####: 3776:                char *e = strchr(p, ']');
    #####: 3777:                if (e == NULL) {
    #####: 3778:                    fprintf(stderr, "Invalid IPV6 address: \"%s\"", p);
    #####: 3779:                    free(list);
    #####: 3780:                    return 1;
        -: 3781:                }
    #####: 3782:                h = ++p; // skip the opening '['
    #####: 3783:                *e = '\0';
    #####: 3784:                p = ++e; // skip the closing ']'
        -: 3785:            }
        -: 3786:
       13: 3787:            char *s = strchr(p, ':');
       13: 3788:            if (s != NULL) {
        -: 3789:                // If no more semicolons - attempt to treat as port number.
        -: 3790:                // Otherwise the only valid option is an unenclosed IPv6 without port, until
        -: 3791:                // of course there was an RFC3986 IPv6 address previously specified -
        -: 3792:                // in such a case there is no good option, will just send it to fail as port number.
    #####: 3793:                if (strchr(s + 1, ':') == NULL || h != NULL) {
    #####: 3794:                    *s = '\0';
    #####: 3795:                    ++s;
    #####: 3796:                    if (!safe_strtol(s, &the_port)) {
    #####: 3797:                        fprintf(stderr, "Invalid port number: \"%s\"\n", s);
    #####: 3798:                        free(list);
    #####: 3799:                        return 1;
        -: 3800:                    }
        -: 3801:                }
        -: 3802:            }
        -: 3803:
       13: 3804:            if (h != NULL)
    #####: 3805:                p = h;
        -: 3806:
       13: 3807:            if (strcmp(p, "*") == 0) {
    #####: 3808:                p = NULL;
        -: 3809:            }
       13: 3810:            ret |= server_socket(p, the_port, transport, portnumber_file, ssl_enabled, conntag, bproto);
       13: 3811:            if (ret != 0 && errno_save == 0) errno_save = errno;
        -: 3812:        }
       13: 3813:        free(list);
       13: 3814:        errno = errno_save;
       13: 3815:        return ret;
        -: 3816:    }
        -: 3817:}
        -: 3818:
        -: 3819:#ifndef DISABLE_UNIX_SOCKET
       95: 3820:static int new_socket_unix(void) {
       95: 3821:    int sfd;
       95: 3822:    int flags;
        -: 3823:
       95: 3824:    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
    #####: 3825:        perror("socket()");
    #####: 3826:        return -1;
        -: 3827:    }
        -: 3828:
      190: 3829:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       95: 3830:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3831:        perror("setting O_NONBLOCK");
    #####: 3832:        close(sfd);
    #####: 3833:        return -1;
        -: 3834:    }
        -: 3835:    return sfd;
        -: 3836:}
        -: 3837:
       95: 3838:static int server_socket_unix(const char *path, int access_mask) {
       95: 3839:    int sfd;
       95: 3840:    struct linger ling = {0, 0};
       95: 3841:    struct sockaddr_un addr;
       95: 3842:    struct stat tstat;
       95: 3843:    int flags =1;
       95: 3844:    int old_umask;
        -: 3845:
       95: 3846:    if (!path) {
        -: 3847:        return 1;
        -: 3848:    }
        -: 3849:
       95: 3850:    if ((sfd = new_socket_unix()) == -1) {
        -: 3851:        return 1;
        -: 3852:    }
        -: 3853:
        -: 3854:    /*
        -: 3855:     * Clean up a previous socket file if we left it around
        -: 3856:     */
       95: 3857:    if (lstat(path, &tstat) == 0) {
    #####: 3858:        if (S_ISSOCK(tstat.st_mode))
    #####: 3859:            unlink(path);
        -: 3860:    }
        -: 3861:
       95: 3862:    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       95: 3863:    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       95: 3864:    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
        -: 3865:
        -: 3866:    /*
        -: 3867:     * the memset call clears nonstandard fields in some implementations
        -: 3868:     * that otherwise mess things up.
        -: 3869:     */
       95: 3870:    memset(&addr, 0, sizeof(addr));
        -: 3871:
       95: 3872:    addr.sun_family = AF_UNIX;
       95: 3873:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
      95*: 3874:    assert(strcmp(addr.sun_path, path) == 0);
       95: 3875:    old_umask = umask( ~(access_mask&0777));
       95: 3876:    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
    #####: 3877:        perror("bind()");
    #####: 3878:        close(sfd);
    #####: 3879:        umask(old_umask);
    #####: 3880:        return 1;
        -: 3881:    }
       95: 3882:    umask(old_umask);
       95: 3883:    if (listen(sfd, settings.backlog) == -1) {
    #####: 3884:        perror("listen()");
    #####: 3885:        close(sfd);
    #####: 3886:        return 1;
        -: 3887:    }
       95: 3888:    if (!(listen_conn = conn_new(sfd, conn_listening,
        -: 3889:                                 EV_READ | EV_PERSIST, 1,
        -: 3890:                                 local_transport, main_base, NULL, 0, settings.binding_protocol))) {
    #####: 3891:        fprintf(stderr, "failed to create listening connection\n");
    #####: 3892:        exit(EXIT_FAILURE);
        -: 3893:    }
        -: 3894:
        -: 3895:    return 0;
        -: 3896:}
        -: 3897:#else
        -: 3898:#define server_socket_unix(path, access_mask)   -1
        -: 3899:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 3900:
        -: 3901:/*
        -: 3902: * We keep the current time of day in a global variable that's updated by a
        -: 3903: * timer event. This saves us a bunch of time() system calls (we really only
        -: 3904: * need to get the time once a second, whereas there can be tens of thousands
        -: 3905: * of requests a second) and allows us to use server-start-relative timestamps
        -: 3906: * rather than absolute UNIX timestamps, a space savings on systems where
        -: 3907: * sizeof(time_t) > sizeof(unsigned int).
        -: 3908: */
        -: 3909:volatile rel_time_t current_time;
        -: 3910:static struct event clockevent;
        -: 3911:#ifdef MEMCACHED_DEBUG
        -: 3912:volatile bool is_paused;
        -: 3913:volatile int64_t delta;
        -: 3914:#endif
        -: 3915:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 3916:static bool monotonic = false;
        -: 3917:static int64_t monotonic_start;
        -: 3918:#endif
        -: 3919:
        -: 3920:/* libevent uses a monotonic clock when available for event scheduling. Aside
        -: 3921: * from jitter, simply ticking our internal timer here is accurate enough.
        -: 3922: * Note that users who are setting explicit dates for expiration times *must*
        -: 3923: * ensure their clocks are correct before starting memcached. */
      565: 3924:static void clock_handler(const evutil_socket_t fd, const short which, void *arg) {
      565: 3925:    struct timeval t = {.tv_sec = 1, .tv_usec = 0};
      565: 3926:    static bool initialized = false;
        -: 3927:
      565: 3928:    if (initialized) {
        -: 3929:        /* only delete the event if it's actually there. */
      450: 3930:        evtimer_del(&clockevent);
        -: 3931:    } else {
      115: 3932:        initialized = true;
        -: 3933:    }
        -: 3934:
        -: 3935:    // While we're here, check for hash table expansion.
        -: 3936:    // This function should be quick to avoid delaying the timer.
      565: 3937:    assoc_start_expand(stats_state.curr_items);
        -: 3938:    // also, if HUP'ed we need to do some maintenance.
        -: 3939:    // for now that's just the authfile reload.
      565: 3940:    if (settings.sig_hup) {
    #####: 3941:        settings.sig_hup = false;
        -: 3942:
    #####: 3943:        authfile_load(settings.auth_file);
        -: 3944:#ifdef PROXY
        -: 3945:        if (settings.proxy_ctx) {
        -: 3946:            proxy_start_reload(settings.proxy_ctx);
        -: 3947:        }
        -: 3948:#endif
        -: 3949:    }
        -: 3950:
      565: 3951:    evtimer_set(&clockevent, clock_handler, 0);
      565: 3952:    event_base_set(main_base, &clockevent);
      565: 3953:    evtimer_add(&clockevent, &t);
        -: 3954:
        -: 3955:#ifdef MEMCACHED_DEBUG
     1130: 3956:    if (is_paused) return;
        -: 3957:#endif
        -: 3958:
        -: 3959:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
      565: 3960:    if (monotonic) {
      565: 3961:        struct timespec ts;
      565: 3962:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)
        -: 3963:            return;
        -: 3964:#ifdef MEMCACHED_DEBUG
      565: 3965:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start + delta);
        -: 3966:#else
        -: 3967:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);
        -: 3968:#endif
      565: 3969:        return;
        -: 3970:    }
        -: 3971:#endif
        -: 3972:    {
    #####: 3973:        struct timeval tv;
    #####: 3974:        gettimeofday(&tv, NULL);
        -: 3975:#ifdef MEMCACHED_DEBUG
    #####: 3976:        current_time = (rel_time_t) (tv.tv_sec - process_started + delta);
        -: 3977:#else
        -: 3978:        current_time = (rel_time_t) (tv.tv_sec - process_started);
        -: 3979:#endif
        -: 3980:    }
        -: 3981:}
        -: 3982:
      558: 3983:static const char* flag_enabled_disabled(bool flag) {
      558: 3984:    return (flag ? "enabled" : "disabled");
        -: 3985:}
        -: 3986:
     2077: 3987:static void verify_default(const char* param, bool condition) {
     2077: 3988:    if (!condition) {
    #####: 3989:        printf("Default value of [%s] has changed."
        -: 3990:            " Modify the help text and default value check.\n", param);
    #####: 3991:        exit(EXIT_FAILURE);
        -: 3992:    }
     2077: 3993:}
        -: 3994:
      279: 3995:static void usage(void) {
      279: 3996:    printf(PACKAGE " " VERSION "\n");
      279: 3997:    printf("-p, --port=<num>          TCP port to listen on (default: %d)\n"
        -: 3998:           "-U, --udp-port=<num>      UDP port to listen on (default: %d, off)\n",
        -: 3999:           settings.port, settings.udpport);
        -: 4000:#ifndef DISABLE_UNIX_SOCKET
      279: 4001:    printf("-s, --unix-socket=<file>  UNIX socket to listen on (disables network support)\n");
      279: 4002:    printf("-a, --unix-mask=<mask>    access mask for UNIX socket, in octal (default: %o)\n",
        -: 4003:            settings.access);
        -: 4004:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      279: 4005:    printf("-A, --enable-shutdown     enable ascii \"shutdown\" command\n");
      279: 4006:    printf("-l, --listen=<addr>       interface to listen on (default: INADDR_ANY)\n");
        -: 4007:#ifdef TLS
        -: 4008:    printf("                          if TLS/SSL is enabled, 'notls' prefix can be used to\n"
        -: 4009:           "                          disable for specific listeners (-l notls:<ip>:<port>) \n");
        -: 4010:#endif
      558: 4011:    printf("-d, --daemon              run as a daemon\n"
        -: 4012:           "-r, --enable-coredumps    maximize core file limit\n"
        -: 4013:           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
        -: 4014:           "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
        -: 4015:           "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
        -: 4016:           "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
        -: 4017:           "-k, --lock-memory         lock down all paged memory\n"
        -: 4018:           "-v, --verbose             verbose (print errors/warnings while in event loop)\n"
        -: 4019:           "-vv                       very verbose (also print client commands/responses)\n"
        -: 4020:           "-vvv                      extremely verbose (internal state transitions)\n"
        -: 4021:           "-h, --help                print this help and exit\n"
        -: 4022:           "-i, --license             print memcached and libevent license\n"
        -: 4023:           "-V, --version             print version and exit\n"
        -: 4024:           "-P, --pidfile=<file>      save PID in <file>, only used with -d option\n"
        -: 4025:           "-f, --slab-growth-factor=<num> chunk size growth factor (default: %2.2f)\n"
        -: 4026:           "-n, --slab-min-size=<bytes> min space used for key+value+flags (default: %d)\n",
      279: 4027:           (unsigned long) settings.maxbytes / (1 << 20),
        -: 4028:           settings.maxconns, settings.factor, settings.chunk_size);
      279: 4029:    verify_default("udp-port",settings.udpport == 0);
      279: 4030:    printf("-L, --enable-largepages  try to use large memory pages (if available)\n");
      558: 4031:    printf("-D <char>     Use <char> as the delimiter between key prefixes and IDs.\n"
        -: 4032:           "              This is used for per-prefix stats reporting. The default is\n"
        -: 4033:           "              \"%c\" (colon). If this option is specified, stats collection\n"
        -: 4034:           "              is turned on automatically; if not, then it may be turned on\n"
        -: 4035:           "              by sending the \"stats detail on\" command to the server.\n",
      279: 4036:           settings.prefix_delimiter);
      279: 4037:    printf("-t, --threads=<num>       number of threads to use (default: %d)\n", settings.num_threads);
      279: 4038:    printf("-R, --max-reqs-per-event  maximum number of requests per event, limits the\n"
        -: 4039:           "                          requests processed per connection to prevent \n"
        -: 4040:           "                          starvation (default: %d)\n", settings.reqs_per_event);
      279: 4041:    printf("-C, --disable-cas         disable use of CAS\n");
      279: 4042:    printf("-b, --listen-backlog=<num> set the backlog queue limit (default: %d)\n", settings.backlog);
      558: 4043:    printf("-B, --protocol=<name>     protocol - one of ascii, binary, or auto (default: %s)\n",
        -: 4044:           prot_text(settings.binding_protocol));
      558: 4045:    printf("-I, --max-item-size=<num> adjusts max item size\n"
        -: 4046:           "                          (default: %dm, min: %dk, max: %dm)\n",
      279: 4047:           settings.item_size_max/ (1 << 20), ITEM_SIZE_MAX_LOWER_LIMIT / (1 << 10),  ITEM_SIZE_MAX_UPPER_LIMIT / (1 << 20));
        -: 4048:#ifdef ENABLE_SASL
        -: 4049:    printf("-S, --enable-sasl         turn on Sasl authentication\n");
        -: 4050:#endif
      279: 4051:    printf("-F, --disable-flush-all   disable flush_all command\n");
      279: 4052:    printf("-X, --disable-dumping     disable stats cachedump and lru_crawler metadump\n");
      279: 4053:    printf("-W  --disable-watch       disable watch commands (live logging)\n");
      279: 4054:    printf("-Y, --auth-file=<file>    (EXPERIMENTAL) enable ASCII protocol authentication. format:\n"
        -: 4055:           "                          user:pass\\nuser2:pass2\\n\n");
      279: 4056:    printf("-e, --memory-file=<file>  (EXPERIMENTAL) mmap a file for item memory.\n"
        -: 4057:           "                          use only in ram disks or persistent memory mounts!\n"
        -: 4058:           "                          enables restartable cache (stop with SIGUSR1)\n");
        -: 4059:#ifdef TLS
        -: 4060:    printf("-Z, --enable-ssl          enable TLS/SSL\n");
        -: 4061:#endif
      279: 4062:    printf("-o, --extended            comma separated list of extended options\n"
        -: 4063:           "                          most options have a 'no_' prefix to disable\n"
        -: 4064:           "   - maxconns_fast:       immediately close new connections after limit (default: %s)\n"
        -: 4065:           "   - hashpower:           an integer multiplier for how large the hash\n"
        -: 4066:           "                          table should be. normally grows at runtime. (default starts at: %d)\n"
        -: 4067:           "                          set based on \"STAT hash_power_level\"\n"
        -: 4068:           "   - tail_repair_time:    time in seconds for how long to wait before\n"
        -: 4069:           "                          forcefully killing LRU tail item.\n"
        -: 4070:           "                          disabled by default; very dangerous option.\n"
        -: 4071:           "   - hash_algorithm:      the hash table algorithm\n"
        -: 4072:           "                          default is murmur3 hash. options: jenkins, murmur3, xxh3\n"
        -: 4073:           "   - no_lru_crawler:      disable LRU Crawler background thread.\n"
        -: 4074:           "   - lru_crawler_sleep:   microseconds to sleep between items\n"
        -: 4075:           "                          default is %d.\n"
        -: 4076:           "   - lru_crawler_tocrawl: max items to crawl per slab per run\n"
        -: 4077:           "                          default is %u (unlimited)\n",
      279: 4078:           flag_enabled_disabled(settings.maxconns_fast), settings.hashpower_init,
        -: 4079:           settings.lru_crawler_sleep, settings.lru_crawler_tocrawl);
      279: 4080:    printf("   - read_buf_mem_limit:  limit in megabytes for connection read/response buffers.\n"
        -: 4081:           "                          do not adjust unless you have high (20k+) conn. limits.\n"
        -: 4082:           "                          0 means unlimited (default: %u)\n",
        -: 4083:           settings.read_buf_mem_limit);
      279: 4084:    verify_default("read_buf_mem_limit", settings.read_buf_mem_limit == 0);
      279: 4085:    printf("   - no_lru_maintainer:   disable new LRU system + background thread.\n"
        -: 4086:           "   - hot_lru_pct:         pct of slab memory to reserve for hot lru.\n"
        -: 4087:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4088:           "   - warm_lru_pct:        pct of slab memory to reserve for warm lru.\n"
        -: 4089:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4090:           "   - hot_max_factor:      items idle > cold lru age * drop from hot lru. (default: %.2f)\n"
        -: 4091:           "   - warm_max_factor:     items idle > cold lru age * this drop from warm. (default: %.2f)\n"
        -: 4092:           "   - temporary_ttl:       TTL's below get separate LRU, can't be evicted.\n"
        -: 4093:           "                          (requires lru_maintainer, default: %d)\n"
        -: 4094:           "   - idle_timeout:        timeout for idle connections. (default: %d, no timeout)\n",
        -: 4095:           settings.hot_lru_pct, settings.warm_lru_pct, settings.hot_max_factor, settings.warm_max_factor,
        -: 4096:           settings.temporary_ttl, settings.idle_timeout);
      558: 4097:    printf("   - slab_chunk_max:      (EXPERIMENTAL) maximum slab size in kilobytes. use extreme care. (default: %d)\n"
        -: 4098:           "   - watcher_logbuf_size: size in kilobytes of per-watcher write buffer. (default: %u)\n"
        -: 4099:           "   - worker_logbuf_size:  size in kilobytes of per-worker-thread buffer\n"
        -: 4100:           "                          read by background thread, then written to watchers. (default: %u)\n"
        -: 4101:           "   - track_sizes:         enable dynamic reports for 'stats sizes' command.\n"
        -: 4102:           "   - no_hashexpand:       disables hash table expansion (dangerous)\n"
        -: 4103:           "   - modern:              enables options which will be default in future.\n"
        -: 4104:           "                          currently: nothing\n"
        -: 4105:           "   - no_modern:           uses defaults of previous major version (1.4.x)\n",
      279: 4106:           settings.slab_chunk_size_max / (1 << 10), settings.logger_watcher_buf_size / (1 << 10),
      279: 4107:           settings.logger_buf_size / (1 << 10));
      279: 4108:    verify_default("tail_repair_time", settings.tail_repair_time == TAIL_REPAIR_TIME_DEFAULT);
      279: 4109:    verify_default("lru_crawler_tocrawl", settings.lru_crawler_tocrawl == 0);
      279: 4110:    verify_default("idle_timeout", settings.idle_timeout == 0);
        -: 4111:#ifdef HAVE_DROP_PRIVILEGES
        -: 4112:    printf("   - drop_privileges:     enable dropping extra syscall privileges\n"
        -: 4113:           "   - no_drop_privileges:  disable drop_privileges in case it causes issues with\n"
        -: 4114:           "                          some customisation.\n"
        -: 4115:           "                          (default is no_drop_privileges)\n");
        -: 4116:    verify_default("drop_privileges", !settings.drop_privileges);
        -: 4117:#ifdef MEMCACHED_DEBUG
        -: 4118:    printf("   - relaxed_privileges:  running tests requires extra privileges. (default: %s)\n",
        -: 4119:           flag_enabled_disabled(settings.relaxed_privileges));
        -: 4120:#endif
        -: 4121:#endif
        -: 4122:#ifdef SOCK_COOKIE_ID
      279: 4123:    printf("   - sock_cookie_id:      attributes an ID to a socket for ip filtering/firewalls \n");
        -: 4124:#endif
        -: 4125:#ifdef EXTSTORE
      279: 4126:    printf("\n   - External storage (ext_*) related options (see: https://memcached.org/extstore)\n");
      837: 4127:    printf("   - ext_path:            file to write to for external storage.\n"
        -: 4128:           "                          ie: ext_path=/mnt/d1/extstore:1G\n"
        -: 4129:           "   - ext_page_size:       size in megabytes of storage pages. (default: %u)\n"
        -: 4130:           "   - ext_wbuf_size:       size in megabytes of page write buffers. (default: %u)\n"
        -: 4131:           "   - ext_threads:         number of IO threads to run. (default: %u)\n"
        -: 4132:           "   - ext_item_size:       store items larger than this (bytes, default %u)\n"
        -: 4133:           "   - ext_item_age:        store items idle at least this long (seconds, default: no age limit)\n"
        -: 4134:           "   - ext_low_ttl:         consider TTLs lower than this specially (default: %u)\n"
        -: 4135:           "   - ext_drop_unread:     don't re-write unread values during compaction (default: %s)\n"
        -: 4136:           "   - ext_recache_rate:    recache an item every N accesses (default: %u)\n"
        -: 4137:           "   - ext_compact_under:   compact when fewer than this many free pages\n"
        -: 4138:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4139:           "   - ext_drop_under:      drop COLD items when fewer than this many free pages\n"
        -: 4140:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4141:           "   - ext_max_frag:        max page fragmentation to tolerate (default: %.2f)\n"
        -: 4142:           "   - ext_max_sleep:       max sleep time of background threads in us (default: %u)\n"
        -: 4143:           "   - slab_automove_freeratio: ratio of memory to hold free as buffer.\n"
        -: 4144:           "                          (see doc/storage.txt for more info, default: %.3f)\n",
      279: 4145:           settings.ext_page_size / (1 << 20), settings.ext_wbuf_size / (1 << 20), settings.ext_io_threadcount,
        -: 4146:           settings.ext_item_size, settings.ext_low_ttl,
      279: 4147:           flag_enabled_disabled(settings.ext_drop_unread), settings.ext_recache_rate,
        -: 4148:           settings.ext_max_frag, settings.ext_max_sleep, settings.slab_automove_freeratio);
      279: 4149:    verify_default("ext_item_age", settings.ext_item_age == UINT_MAX);
        -: 4150:#endif
        -: 4151:#ifdef PROXY
        -: 4152:    printf("   - proxy_config:        path to lua config file.\n");
        -: 4153:#ifdef HAVE_LIBURING
        -: 4154:    printf("   - proxy_uring:         enable IO_URING for proxy backends.\n");
        -: 4155:#endif
        -: 4156:#endif
        -: 4157:#ifdef TLS
        -: 4158:    printf("   - ssl_chain_cert:      certificate chain file in PEM format\n"
        -: 4159:           "   - ssl_key:             private key, if not part of the -ssl_chain_cert\n"
        -: 4160:           "   - ssl_keyformat:       private key format (PEM, DER or ENGINE) (default: PEM)\n");
        -: 4161:    printf("   - ssl_verify_mode:     peer certificate verification mode, default is 0(None).\n"
        -: 4162:           "                          valid values are 0(None), 1(Request), 2(Require)\n"
        -: 4163:           "                          or 3(Once)\n");
        -: 4164:    printf("   - ssl_ciphers:         specify cipher list to be used\n"
        -: 4165:           "   - ssl_ca_cert:         PEM format file of acceptable client CA's\n"
        -: 4166:           "   - ssl_wbuf_size:       size in kilobytes of per-connection SSL output buffer\n"
        -: 4167:           "                          (default: %u)\n", settings.ssl_wbuf_size / (1 << 10));
        -: 4168:    printf("   - ssl_session_cache:   enable server-side SSL session cache, to support session\n"
        -: 4169:           "                          resumption\n"
        -: 4170:           "   - ssl_kernel_tls:      enable kernel TLS offload\n"
        -: 4171:           "   - ssl_min_version:     minimum protocol version to accept (default: %s)\n",
        -: 4172:           ssl_proto_text(settings.ssl_min_version));
        -: 4173:#if defined(TLS1_3_VERSION)
        -: 4174:    printf("                          valid values are 0(%s), 1(%s), 2(%s), or 3(%s).\n",
        -: 4175:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4176:           ssl_proto_text(TLS1_2_VERSION), ssl_proto_text(TLS1_3_VERSION));
        -: 4177:#else
        -: 4178:    printf("                          valid values are 0(%s), 1(%s), or 2(%s).\n",
        -: 4179:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4180:           ssl_proto_text(TLS1_2_VERSION));
        -: 4181:#endif
        -: 4182:    verify_default("ssl_keyformat", settings.ssl_keyformat == SSL_FILETYPE_PEM);
        -: 4183:    verify_default("ssl_verify_mode", settings.ssl_verify_mode == SSL_VERIFY_NONE);
        -: 4184:    verify_default("ssl_min_version", settings.ssl_min_version == TLS1_2_VERSION);
        -: 4185:#endif
      279: 4186:    printf("-N, --napi_ids            number of napi ids. see doc/napi_ids.txt for more details\n");
      279: 4187:    return;
        -: 4188:}
        -: 4189:
    #####: 4190:static void usage_license(void) {
    #####: 4191:    printf(PACKAGE " " VERSION "\n\n");
    #####: 4192:    printf(
        -: 4193:    "Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\n"
        -: 4194:    "All rights reserved.\n"
        -: 4195:    "\n"
        -: 4196:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4197:    "modification, are permitted provided that the following conditions are\n"
        -: 4198:    "met:\n"
        -: 4199:    "\n"
        -: 4200:    "    * Redistributions of source code must retain the above copyright\n"
        -: 4201:    "notice, this list of conditions and the following disclaimer.\n"
        -: 4202:    "\n"
        -: 4203:    "    * Redistributions in binary form must reproduce the above\n"
        -: 4204:    "copyright notice, this list of conditions and the following disclaimer\n"
        -: 4205:    "in the documentation and/or other materials provided with the\n"
        -: 4206:    "distribution.\n"
        -: 4207:    "\n"
        -: 4208:    "    * Neither the name of the Danga Interactive nor the names of its\n"
        -: 4209:    "contributors may be used to endorse or promote products derived from\n"
        -: 4210:    "this software without specific prior written permission.\n"
        -: 4211:    "\n"
        -: 4212:    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
        -: 4213:    "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
        -: 4214:    "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
        -: 4215:    "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
        -: 4216:    "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
        -: 4217:    "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
        -: 4218:    "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4219:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4220:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4221:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
        -: 4222:    "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4223:    );
        -: 4224:
    #####: 4225:    return;
        -: 4226:}
        -: 4227:
        1: 4228:static void save_pid(const char *pid_file) {
        1: 4229:    FILE *fp;
        1: 4230:    if (access(pid_file, F_OK) == 0) {
    #####: 4231:        if ((fp = fopen(pid_file, "r")) != NULL) {
    #####: 4232:            char buffer[1024];
    #####: 4233:            if (fgets(buffer, sizeof(buffer), fp) != NULL) {
    #####: 4234:                unsigned int pid;
    #####: 4235:                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {
    #####: 4236:                    fprintf(stderr, "WARNING: The pid file contained the following (running) pid: %u\n", pid);
        -: 4237:                }
        -: 4238:            }
    #####: 4239:            fclose(fp);
        -: 4240:        }
        -: 4241:    }
        -: 4242:
        -: 4243:    /* Create the pid file first with a temporary name, then
        -: 4244:     * atomically move the file to the real name to avoid a race with
        -: 4245:     * another process opening the file to read the pid, but finding
        -: 4246:     * it empty.
        -: 4247:     */
        1: 4248:    char tmp_pid_file[1024];
        1: 4249:    snprintf(tmp_pid_file, sizeof(tmp_pid_file), "%s.tmp", pid_file);
        -: 4250:
        1: 4251:    if ((fp = fopen(tmp_pid_file, "w")) == NULL) {
    #####: 4252:        vperror("Could not open the pid file %s for writing", tmp_pid_file);
    #####: 4253:        return;
        -: 4254:    }
        -: 4255:
        1: 4256:    fprintf(fp,"%ld\n", (long)getpid());
        1: 4257:    if (fclose(fp) == -1) {
    #####: 4258:        vperror("Could not close the pid file %s", tmp_pid_file);
        -: 4259:    }
        -: 4260:
        1: 4261:    if (rename(tmp_pid_file, pid_file) != 0) {
    #####: 4262:        vperror("Could not rename the pid file from %s to %s",
        -: 4263:                tmp_pid_file, pid_file);
        -: 4264:    }
        -: 4265:}
        -: 4266:
        1: 4267:static void remove_pidfile(const char *pid_file) {
        1: 4268:  if (pid_file == NULL)
        -: 4269:      return;
        -: 4270:
        1: 4271:  if (unlink(pid_file) != 0) {
        1: 4272:      vperror("Could not remove the pid file %s", pid_file);
        -: 4273:  }
        -: 4274:
        -: 4275:}
        -: 4276:
      115: 4277:static void sig_handler(const int sig) {
      115: 4278:    stop_main_loop = EXIT_NORMALLY;
      115: 4279:}
        -: 4280:
    #####: 4281:static void sighup_handler(const int sig) {
    #####: 4282:    settings.sig_hup = true;
    #####: 4283:}
        -: 4284:
        2: 4285:static void sig_usrhandler(const int sig) {
        2: 4286:    stop_main_loop = GRACE_STOP;
        2: 4287:}
        -: 4288:
        -: 4289:/*
        -: 4290: * On systems that supports multiple page sizes we may reduce the
        -: 4291: * number of TLB-misses by using the biggest available page size
        -: 4292: */
    #####: 4293:static int enable_large_pages(void) {
        -: 4294:#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)
        -: 4295:    int ret = -1;
        -: 4296:    size_t sizes[32];
        -: 4297:    int avail = getpagesizes(sizes, 32);
        -: 4298:    if (avail != -1) {
        -: 4299:        size_t max = sizes[0];
        -: 4300:        struct memcntl_mha arg = {0};
        -: 4301:        int ii;
        -: 4302:
        -: 4303:        for (ii = 1; ii < avail; ++ii) {
        -: 4304:            if (max < sizes[ii]) {
        -: 4305:                max = sizes[ii];
        -: 4306:            }
        -: 4307:        }
        -: 4308:
        -: 4309:        arg.mha_flags   = 0;
        -: 4310:        arg.mha_pagesize = max;
        -: 4311:        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;
        -: 4312:
        -: 4313:        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {
        -: 4314:            fprintf(stderr, "Failed to set large pages: %s\n",
        -: 4315:                    strerror(errno));
        -: 4316:            fprintf(stderr, "Will use default page size\n");
        -: 4317:        } else {
        -: 4318:            ret = 0;
        -: 4319:        }
        -: 4320:    } else {
        -: 4321:        fprintf(stderr, "Failed to get supported pagesizes: %s\n",
        -: 4322:                strerror(errno));
        -: 4323:        fprintf(stderr, "Will use default page size\n");
        -: 4324:    }
        -: 4325:
        -: 4326:    return ret;
        -: 4327:#elif defined(__linux__) && defined(MADV_HUGEPAGE)
        -: 4328:    /* check if transparent hugepages is compiled into the kernel */
        -: 4329:    /* RH based systems possibly uses a different path */
    #####: 4330:    static const char *mm_thp_paths[] = {
        -: 4331:        "/sys/kernel/mm/transparent_hugepage/enabled",
        -: 4332:        "/sys/kernel/mm/redhat_transparent_hugepage/enabled",
        -: 4333:        NULL
        -: 4334:    };
        -: 4335:
    #####: 4336:    char thpb[128] = {0};
    #####: 4337:    int pfd = -1;
    #####: 4338:    for (const char **p = mm_thp_paths; *p; p++) {
    #####: 4339:        if ((pfd = open(*p, O_RDONLY)) != -1)
        -: 4340:            break;
        -: 4341:    }
        -: 4342:
    #####: 4343:    if (pfd == -1) {
    #####: 4344:        fprintf(stderr, "Transparent huge pages support not detected.\n");
    #####: 4345:        fprintf(stderr, "Will use default page size.\n");
    #####: 4346:        return -1;
        -: 4347:    }
    #####: 4348:    ssize_t rd = read(pfd, thpb, sizeof(thpb));
    #####: 4349:    close(pfd);
    #####: 4350:    if (rd <= 0) {
    #####: 4351:        fprintf(stderr, "Transparent huge pages could not read the configuration.\n");
    #####: 4352:        fprintf(stderr, "Will use default page size.\n");
    #####: 4353:        return -1;
        -: 4354:    }
    #####: 4355:    thpb[rd] = 0;
    #####: 4356:    if (strstr(thpb, "[never]")) {
    #####: 4357:        fprintf(stderr, "Transparent huge pages support disabled.\n");
    #####: 4358:        fprintf(stderr, "Will use default page size.\n");
    #####: 4359:        return -1;
        -: 4360:    }
        -: 4361:    return 0;
        -: 4362:#elif defined(__FreeBSD__)
        -: 4363:    int spages;
        -: 4364:    size_t spagesl = sizeof(spages);
        -: 4365:
        -: 4366:    if (sysctlbyname("vm.pmap.pg_ps_enabled", &spages,
        -: 4367:    &spagesl, NULL, 0) != 0) {
        -: 4368:        fprintf(stderr, "Could not evaluate the presence of superpages features.");
        -: 4369:        return -1;
        -: 4370:    }
        -: 4371:    if (spages != 1) {
        -: 4372:        fprintf(stderr, "Superpages support not detected.\n");
        -: 4373:        fprintf(stderr, "Will use default page size.\n");
        -: 4374:        return -1;
        -: 4375:    }
        -: 4376:    return 0;
        -: 4377:#else
        -: 4378:    return -1;
        -: 4379:#endif
        -: 4380:}
        -: 4381:
        -: 4382:/**
        -: 4383: * Do basic sanity check of the runtime environment
        -: 4384: * @return true if no errors found, false if we can't use this env
        -: 4385: */
      403: 4386:static bool sanitycheck(void) {
        -: 4387:    /* One of our biggest problems is old and bogus libevents */
      403: 4388:    const char *ever = event_get_version();
      403: 4389:    if (ever != NULL) {
      403: 4390:        if (strncmp(ever, "1.", 2) == 0) {
    #####: 4391:            fprintf(stderr, "You are using libevent %s.\nPlease upgrade to 2.x"
        -: 4392:                        " or newer\n", event_get_version());
    #####: 4393:            return false;
        -: 4394:        }
        -: 4395:    }
        -: 4396:
        -: 4397:    return true;
        -: 4398:}
        -: 4399:
    #####: 4400:static bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {
    #####: 4401:    char *b = NULL;
    #####: 4402:    uint32_t size = 0;
    #####: 4403:    int i = 0;
    #####: 4404:    uint32_t last_size = 0;
        -: 4405:
    #####: 4406:    if (strlen(s) < 1)
        -: 4407:        return false;
        -: 4408:
    #####: 4409:    for (char *p = strtok_r(s, "-", &b);
    #####: 4410:         p != NULL;
    #####: 4411:         p = strtok_r(NULL, "-", &b)) {
    #####: 4412:        if (!safe_strtoul(p, &size) || size < settings.chunk_size
    #####: 4413:             || size > settings.slab_chunk_size_max) {
    #####: 4414:            fprintf(stderr, "slab size %u is out of valid range\n", size);
    #####: 4415:            return false;
        -: 4416:        }
    #####: 4417:        if (last_size >= size) {
    #####: 4418:            fprintf(stderr, "slab size %u cannot be lower than or equal to a previous class size\n", size);
    #####: 4419:            return false;
        -: 4420:        }
    #####: 4421:        if (size <= last_size + CHUNK_ALIGN_BYTES) {
    #####: 4422:            fprintf(stderr, "slab size %u must be at least %d bytes larger than previous class\n",
        -: 4423:                    size, CHUNK_ALIGN_BYTES);
    #####: 4424:            return false;
        -: 4425:        }
    #####: 4426:        slab_sizes[i++] = size;
    #####: 4427:        last_size = size;
    #####: 4428:        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {
    #####: 4429:            fprintf(stderr, "too many slab classes specified\n");
    #####: 4430:            return false;
        -: 4431:        }
        -: 4432:    }
        -: 4433:
    #####: 4434:    slab_sizes[i] = 0;
    #####: 4435:    return true;
        -: 4436:}
        -: 4437:
        -: 4438:struct _mc_meta_data {
        -: 4439:    void *mmap_base;
        -: 4440:    uint64_t old_base;
        -: 4441:    char *slab_config; // string containing either factor or custom slab list.
        -: 4442:    int64_t time_delta;
        -: 4443:    uint64_t process_started;
        -: 4444:    uint32_t current_time;
        -: 4445:};
        -: 4446:
        -: 4447:// We need to remember a combination of configuration settings and global
        -: 4448:// state for restart viability and resumption of internal services.
        -: 4449:// Compared to the number of tunables and state values, relatively little
        -: 4450:// does need to be remembered.
        -: 4451:// Time is the hardest; we have to assume the sys clock is correct and re-sync for
        -: 4452:// the lost time after restart.
        1: 4453:static int _mc_meta_save_cb(const char *tag, void *ctx, void *data) {
        1: 4454:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        -: 4455:
        -: 4456:    // Settings to remember.
        -: 4457:    // TODO: should get a version of version which is numeric, else
        -: 4458:    // comparisons for compat reasons are difficult.
        -: 4459:    // it may be possible to punt on this for now; since we can test for the
        -: 4460:    // absence of another key... such as the new numeric version.
        -: 4461:    //restart_set_kv(ctx, "version", "%s", VERSION);
        -: 4462:    // We hold the original factor or subopts _string_
        -: 4463:    // it can be directly compared without roundtripping through floats or
        -: 4464:    // serializing/deserializing the long options list.
        1: 4465:    restart_set_kv(ctx, "slab_config", "%s", meta->slab_config);
        1: 4466:    restart_set_kv(ctx, "maxbytes", "%llu", (unsigned long long) settings.maxbytes);
        1: 4467:    restart_set_kv(ctx, "chunk_size", "%d", settings.chunk_size);
        1: 4468:    restart_set_kv(ctx, "item_size_max", "%d", settings.item_size_max);
        1: 4469:    restart_set_kv(ctx, "slab_chunk_size_max", "%d", settings.slab_chunk_size_max);
        1: 4470:    restart_set_kv(ctx, "slab_page_size", "%d", settings.slab_page_size);
        1: 4471:    restart_set_kv(ctx, "use_cas", "%s", settings.use_cas ? "true" : "false");
        1: 4472:    restart_set_kv(ctx, "slab_reassign", "%s", settings.slab_reassign ? "true" : "false");
        -: 4473:
        -: 4474:    // Online state to remember.
        -: 4475:
        -: 4476:    // current time is tough. we need to rely on the clock being correct to
        -: 4477:    // pull the delta between stop and start times. we also need to know the
        -: 4478:    // delta between start time and now to restore monotonic clocks.
        -: 4479:    // for non-monotonic clocks (some OS?), process_started is the only
        -: 4480:    // important one.
        1: 4481:    restart_set_kv(ctx, "current_time", "%u", current_time);
        -: 4482:    // types are great until... this. some systems time_t could be big, but
        -: 4483:    // I'm assuming never negative.
        1: 4484:    restart_set_kv(ctx, "process_started", "%llu", (unsigned long long) process_started);
        -: 4485:    {
        1: 4486:        struct timeval tv;
        1: 4487:        gettimeofday(&tv, NULL);
        1: 4488:        restart_set_kv(ctx, "stop_time", "%lu", tv.tv_sec);
        -: 4489:    }
        -: 4490:
        -: 4491:    // Might as well just fetch the next CAS value to use than tightly
        -: 4492:    // coupling the internal variable into the restart system.
        1: 4493:    restart_set_kv(ctx, "current_cas", "%llu", (unsigned long long) get_cas_id());
        1: 4494:    restart_set_kv(ctx, "oldest_cas", "%llu", (unsigned long long) settings.oldest_cas);
        1: 4495:    restart_set_kv(ctx, "logger_gid", "%llu", logger_get_gid());
        1: 4496:    restart_set_kv(ctx, "hashpower", "%u", stats_state.hash_power_level);
        -: 4497:    // NOTE: oldest_live is a rel_time_t, which aliases for unsigned int.
        -: 4498:    // should future proof this with a 64bit upcast, or fetch value from a
        -: 4499:    // converter function/macro?
        1: 4500:    restart_set_kv(ctx, "oldest_live", "%u", settings.oldest_live);
        -: 4501:    // TODO: use uintptr_t etc? is it portable enough?
        1: 4502:    restart_set_kv(ctx, "mmap_oldbase", "%p", meta->mmap_base);
        -: 4503:
        1: 4504:    return 0;
        -: 4505:}
        -: 4506:
        -: 4507:// We must see at least this number of checked lines. Else empty/missing lines
        -: 4508:// could cause a false-positive.
        -: 4509:// TODO: Once crc32'ing of the metadata file is done this could be ensured better by
        -: 4510:// the restart module itself (crc32 + count of lines must match on the
        -: 4511:// backend)
        -: 4512:#define RESTART_REQUIRED_META 17
        -: 4513:
        -: 4514:// With this callback we make a decision on if the current configuration
        -: 4515:// matches up enough to allow reusing the cache.
        -: 4516:// We also re-load important runtime information.
        1: 4517:static int _mc_meta_load_cb(const char *tag, void *ctx, void *data) {
        1: 4518:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        1: 4519:    char *key;
        1: 4520:    char *val;
        1: 4521:    int reuse_mmap = 0;
        1: 4522:    meta->process_started = 0;
        1: 4523:    meta->time_delta = 0;
        1: 4524:    meta->current_time = 0;
        1: 4525:    int lines_seen = 0;
        -: 4526:
        -: 4527:    // TODO: not sure this is any better than just doing an if/else tree with
        -: 4528:    // strcmp's...
        1: 4529:    enum {
        -: 4530:        R_MMAP_OLDBASE = 0,
        -: 4531:        R_MAXBYTES,
        -: 4532:        R_CHUNK_SIZE,
        -: 4533:        R_ITEM_SIZE_MAX,
        -: 4534:        R_SLAB_CHUNK_SIZE_MAX,
        -: 4535:        R_SLAB_PAGE_SIZE,
        -: 4536:        R_SLAB_CONFIG,
        -: 4537:        R_USE_CAS,
        -: 4538:        R_SLAB_REASSIGN,
        -: 4539:        R_CURRENT_CAS,
        -: 4540:        R_OLDEST_CAS,
        -: 4541:        R_OLDEST_LIVE,
        -: 4542:        R_LOGGER_GID,
        -: 4543:        R_CURRENT_TIME,
        -: 4544:        R_STOP_TIME,
        -: 4545:        R_PROCESS_STARTED,
        -: 4546:        R_HASHPOWER,
        -: 4547:    };
        -: 4548:
        1: 4549:    const char *opts[] = {
        -: 4550:        [R_MMAP_OLDBASE] = "mmap_oldbase",
        -: 4551:        [R_MAXBYTES] = "maxbytes",
        -: 4552:        [R_CHUNK_SIZE] = "chunk_size",
        -: 4553:        [R_ITEM_SIZE_MAX] = "item_size_max",
        -: 4554:        [R_SLAB_CHUNK_SIZE_MAX] = "slab_chunk_size_max",
        -: 4555:        [R_SLAB_PAGE_SIZE] = "slab_page_size",
        -: 4556:        [R_SLAB_CONFIG] = "slab_config",
        -: 4557:        [R_USE_CAS] = "use_cas",
        -: 4558:        [R_SLAB_REASSIGN] = "slab_reassign",
        -: 4559:        [R_CURRENT_CAS] = "current_cas",
        -: 4560:        [R_OLDEST_CAS] = "oldest_cas",
        -: 4561:        [R_OLDEST_LIVE] = "oldest_live",
        -: 4562:        [R_LOGGER_GID] = "logger_gid",
        -: 4563:        [R_CURRENT_TIME] = "current_time",
        -: 4564:        [R_STOP_TIME] = "stop_time",
        -: 4565:        [R_PROCESS_STARTED] = "process_started",
        -: 4566:        [R_HASHPOWER] = "hashpower",
        -: 4567:        NULL
        -: 4568:    };
        -: 4569:
       18: 4570:    while (restart_get_kv(ctx, &key, &val) == RESTART_OK) {
       17: 4571:        int type = 0;
       17: 4572:        int32_t val_int = 0;
       17: 4573:        uint32_t val_uint = 0;
       17: 4574:        int64_t bigval_int = 0;
       17: 4575:        uint64_t bigval_uint = 0;
        -: 4576:
      153: 4577:        while (opts[type] != NULL && strcmp(key, opts[type]) != 0) {
      136: 4578:            type++;
        -: 4579:        }
       17: 4580:        if (opts[type] == NULL) {
    #####: 4581:            fprintf(stderr, "[restart] unknown/unhandled key: %s\n", key);
    #####: 4582:            continue;
        -: 4583:        }
       17: 4584:        lines_seen++;
        -: 4585:
        -: 4586:        // helper for any boolean checkers.
       17: 4587:        bool val_bool = false;
       17: 4588:        bool is_bool = true;
       17: 4589:        if (strcmp(val, "false") == 0) {
        -: 4590:            val_bool = false;
       17: 4591:        } else if (strcmp(val, "true") == 0) {
        -: 4592:            val_bool = true;
        -: 4593:        } else {
       15: 4594:            is_bool = false;
        -: 4595:        }
        -: 4596:
       17: 4597:        switch (type) {
        1: 4598:        case R_MMAP_OLDBASE:
        1: 4599:            if (!safe_strtoull_hex(val, &meta->old_base)) {
    #####: 4600:                fprintf(stderr, "[restart] failed to parse %s: %s\n", key, val);
    #####: 4601:                reuse_mmap = -1;
        -: 4602:            }
        -: 4603:            break;
        1: 4604:        case R_MAXBYTES:
        1: 4605:            if (!safe_strtoll(val, &bigval_int) || settings.maxbytes != bigval_int) {
        -: 4606:                reuse_mmap = -1;
        -: 4607:            }
        -: 4608:            break;
        1: 4609:        case R_CHUNK_SIZE:
        1: 4610:            if (!safe_strtol(val, &val_int) || settings.chunk_size != val_int) {
        -: 4611:                reuse_mmap = -1;
        -: 4612:            }
        -: 4613:            break;
        1: 4614:        case R_ITEM_SIZE_MAX:
        1: 4615:            if (!safe_strtol(val, &val_int) || settings.item_size_max != val_int) {
        -: 4616:                reuse_mmap = -1;
        -: 4617:            }
        -: 4618:            break;
        1: 4619:        case R_SLAB_CHUNK_SIZE_MAX:
        1: 4620:            if (!safe_strtol(val, &val_int) || settings.slab_chunk_size_max != val_int) {
        -: 4621:                reuse_mmap = -1;
        -: 4622:            }
        -: 4623:            break;
        1: 4624:        case R_SLAB_PAGE_SIZE:
        1: 4625:            if (!safe_strtol(val, &val_int) || settings.slab_page_size != val_int) {
        -: 4626:                reuse_mmap = -1;
        -: 4627:            }
        -: 4628:            break;
        1: 4629:        case R_SLAB_CONFIG:
        1: 4630:            if (strcmp(val, meta->slab_config) != 0) {
        -: 4631:                reuse_mmap = -1;
        -: 4632:            }
        -: 4633:            break;
        1: 4634:        case R_USE_CAS:
        1: 4635:            if (!is_bool || settings.use_cas != val_bool) {
        -: 4636:                reuse_mmap = -1;
        -: 4637:            }
        -: 4638:            break;
        1: 4639:        case R_SLAB_REASSIGN:
        1: 4640:            if (!is_bool || settings.slab_reassign != val_bool) {
        -: 4641:                reuse_mmap = -1;
        -: 4642:            }
        -: 4643:            break;
        1: 4644:        case R_CURRENT_CAS:
        -: 4645:            // FIXME: do we need to fail if these values _aren't_ found?
        1: 4646:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4647:                reuse_mmap = -1;
        -: 4648:            } else {
        1: 4649:                set_cas_id(bigval_uint);
        -: 4650:            }
        -: 4651:            break;
        1: 4652:        case R_OLDEST_CAS:
        1: 4653:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4654:                reuse_mmap = -1;
        -: 4655:            } else {
        1: 4656:                settings.oldest_cas = bigval_uint;
        -: 4657:            }
        -: 4658:            break;
        1: 4659:        case R_OLDEST_LIVE:
        1: 4660:            if (!safe_strtoul(val, &val_uint)) {
        -: 4661:                reuse_mmap = -1;
        -: 4662:            } else {
        1: 4663:                settings.oldest_live = val_uint;
        -: 4664:            }
        -: 4665:            break;
        1: 4666:        case R_LOGGER_GID:
        1: 4667:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4668:                reuse_mmap = -1;
        -: 4669:            } else {
        1: 4670:                logger_set_gid(bigval_uint);
        -: 4671:            }
        -: 4672:            break;
        1: 4673:        case R_PROCESS_STARTED:
        1: 4674:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4675:                reuse_mmap = -1;
        -: 4676:            } else {
        1: 4677:                meta->process_started = bigval_uint;
        -: 4678:            }
        -: 4679:            break;
        1: 4680:        case R_CURRENT_TIME:
        1: 4681:            if (!safe_strtoul(val, &val_uint)) {
        -: 4682:                reuse_mmap = -1;
        -: 4683:            } else {
        1: 4684:                meta->current_time = val_uint;
        -: 4685:            }
        -: 4686:            break;
        1: 4687:        case R_STOP_TIME:
        1: 4688:            if (!safe_strtoll(val, &bigval_int)) {
        -: 4689:                reuse_mmap = -1;
        -: 4690:            } else {
        1: 4691:                struct timeval t;
        1: 4692:                gettimeofday(&t, NULL);
        1: 4693:                meta->time_delta = t.tv_sec - bigval_int;
        -: 4694:                // clock has done something crazy.
        -: 4695:                // there are _lots_ of ways the clock can go wrong here, but
        -: 4696:                // this is a safe sanity check since there's nothing else we
        -: 4697:                // can realistically do.
        1: 4698:                if (meta->time_delta <= 0) {
    #####: 4699:                    reuse_mmap = -1;
        -: 4700:                }
        -: 4701:            }
        -: 4702:            break;
        1: 4703:        case R_HASHPOWER:
        1: 4704:            if (!safe_strtoul(val, &val_uint)) {
        -: 4705:                reuse_mmap = -1;
        -: 4706:            } else {
        1: 4707:                settings.hashpower_init = val_uint;
        -: 4708:            }
        -: 4709:            break;
    #####: 4710:        default:
    #####: 4711:            fprintf(stderr, "[restart] unhandled key: %s\n", key);
        -: 4712:        }
        -: 4713:
      17*: 4714:        if (reuse_mmap != 0) {
    #####: 4715:            fprintf(stderr, "[restart] restart incompatible due to setting for [%s] [old value: %s]\n", key, val);
    #####: 4716:            break;
        -: 4717:        }
        -: 4718:    }
        -: 4719:
        1: 4720:    if (lines_seen < RESTART_REQUIRED_META) {
    #####: 4721:        fprintf(stderr, "[restart] missing some metadata lines\n");
    #####: 4722:        reuse_mmap = -1;
        -: 4723:    }
        -: 4724:
        1: 4725:    return reuse_mmap;
        -: 4726:}
        -: 4727:
      403: 4728:int main (int argc, char **argv) {
      403: 4729:    int c;
      403: 4730:    bool lock_memory = false;
      403: 4731:    bool do_daemonize = false;
      403: 4732:    bool preallocate = false;
      403: 4733:    int maxcore = 0;
      403: 4734:    char *username = NULL;
      403: 4735:    char *pid_file = NULL;
      403: 4736:    struct passwd *pw;
      403: 4737:    struct rlimit rlim;
      403: 4738:    char *buf;
      403: 4739:    char unit = '\0';
      403: 4740:    int size_max = 0;
      403: 4741:    int retval = EXIT_SUCCESS;
      403: 4742:    bool protocol_specified = false;
      403: 4743:    bool tcp_specified = false;
      403: 4744:    bool udp_specified = false;
      403: 4745:    bool start_lru_maintainer = true;
      403: 4746:    bool start_lru_crawler = true;
      403: 4747:    bool start_assoc_maint = true;
      403: 4748:    enum hashfunc_type hash_type = MURMUR3_HASH;
      403: 4749:    uint32_t tocrawl;
      403: 4750:    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];
      403: 4751:    bool use_slab_sizes = false;
      403: 4752:    char *slab_sizes_unparsed = NULL;
      403: 4753:    bool slab_chunk_size_changed = false;
        -: 4754:    // struct for restart code. Initialized up here so we can curry
        -: 4755:    // important settings to save or validate.
      403: 4756:    struct _mc_meta_data *meta = malloc(sizeof(struct _mc_meta_data));
      403: 4757:    meta->slab_config = NULL;
      403: 4758:    char *subopts, *subopts_orig;
      403: 4759:    char *subopts_value;
      403: 4760:    enum {
        -: 4761:        MAXCONNS_FAST = 0,
        -: 4762:        HASHPOWER_INIT,
        -: 4763:        NO_HASHEXPAND,
        -: 4764:        SLAB_REASSIGN,
        -: 4765:        SLAB_AUTOMOVE,
        -: 4766:        SLAB_AUTOMOVE_RATIO,
        -: 4767:        SLAB_AUTOMOVE_WINDOW,
        -: 4768:        TAIL_REPAIR_TIME,
        -: 4769:        HASH_ALGORITHM,
        -: 4770:        LRU_CRAWLER,
        -: 4771:        LRU_CRAWLER_SLEEP,
        -: 4772:        LRU_CRAWLER_TOCRAWL,
        -: 4773:        LRU_MAINTAINER,
        -: 4774:        HOT_LRU_PCT,
        -: 4775:        WARM_LRU_PCT,
        -: 4776:        HOT_MAX_FACTOR,
        -: 4777:        WARM_MAX_FACTOR,
        -: 4778:        TEMPORARY_TTL,
        -: 4779:        IDLE_TIMEOUT,
        -: 4780:        WATCHER_LOGBUF_SIZE,
        -: 4781:        WORKER_LOGBUF_SIZE,
        -: 4782:        SLAB_SIZES,
        -: 4783:        SLAB_CHUNK_MAX,
        -: 4784:        TRACK_SIZES,
        -: 4785:        NO_INLINE_ASCII_RESP,
        -: 4786:        MODERN,
        -: 4787:        NO_MODERN,
        -: 4788:        NO_CHUNKED_ITEMS,
        -: 4789:        NO_SLAB_REASSIGN,
        -: 4790:        NO_SLAB_AUTOMOVE,
        -: 4791:        NO_MAXCONNS_FAST,
        -: 4792:        INLINE_ASCII_RESP,
        -: 4793:        NO_LRU_CRAWLER,
        -: 4794:        NO_LRU_MAINTAINER,
        -: 4795:        NO_DROP_PRIVILEGES,
        -: 4796:        DROP_PRIVILEGES,
        -: 4797:        RESP_OBJ_MEM_LIMIT,
        -: 4798:        READ_BUF_MEM_LIMIT,
        -: 4799:#ifdef TLS
        -: 4800:        SSL_CERT,
        -: 4801:        SSL_KEY,
        -: 4802:        SSL_VERIFY_MODE,
        -: 4803:        SSL_KEYFORM,
        -: 4804:        SSL_CIPHERS,
        -: 4805:        SSL_CA_CERT,
        -: 4806:        SSL_WBUF_SIZE,
        -: 4807:        SSL_SESSION_CACHE,
        -: 4808:        SSL_KERNEL_TLS,
        -: 4809:        SSL_MIN_VERSION,
        -: 4810:#endif
        -: 4811:#ifdef PROXY
        -: 4812:        PROXY_CONFIG,
        -: 4813:        PROXY_URING,
        -: 4814:#endif
        -: 4815:#ifdef MEMCACHED_DEBUG
        -: 4816:        RELAXED_PRIVILEGES,
        -: 4817:#endif
        -: 4818:#ifdef SOCK_COOKIE_ID
        -: 4819:        COOKIE_ID,
        -: 4820:#endif
        -: 4821:    };
      403: 4822:    char *const subopts_tokens[] = {
        -: 4823:        [MAXCONNS_FAST] = "maxconns_fast",
        -: 4824:        [HASHPOWER_INIT] = "hashpower",
        -: 4825:        [NO_HASHEXPAND] = "no_hashexpand",
        -: 4826:        [SLAB_REASSIGN] = "slab_reassign",
        -: 4827:        [SLAB_AUTOMOVE] = "slab_automove",
        -: 4828:        [SLAB_AUTOMOVE_RATIO] = "slab_automove_ratio",
        -: 4829:        [SLAB_AUTOMOVE_WINDOW] = "slab_automove_window",
        -: 4830:        [TAIL_REPAIR_TIME] = "tail_repair_time",
        -: 4831:        [HASH_ALGORITHM] = "hash_algorithm",
        -: 4832:        [LRU_CRAWLER] = "lru_crawler",
        -: 4833:        [LRU_CRAWLER_SLEEP] = "lru_crawler_sleep",
        -: 4834:        [LRU_CRAWLER_TOCRAWL] = "lru_crawler_tocrawl",
        -: 4835:        [LRU_MAINTAINER] = "lru_maintainer",
        -: 4836:        [HOT_LRU_PCT] = "hot_lru_pct",
        -: 4837:        [WARM_LRU_PCT] = "warm_lru_pct",
        -: 4838:        [HOT_MAX_FACTOR] = "hot_max_factor",
        -: 4839:        [WARM_MAX_FACTOR] = "warm_max_factor",
        -: 4840:        [TEMPORARY_TTL] = "temporary_ttl",
        -: 4841:        [IDLE_TIMEOUT] = "idle_timeout",
        -: 4842:        [WATCHER_LOGBUF_SIZE] = "watcher_logbuf_size",
        -: 4843:        [WORKER_LOGBUF_SIZE] = "worker_logbuf_size",
        -: 4844:        [SLAB_SIZES] = "slab_sizes",
        -: 4845:        [SLAB_CHUNK_MAX] = "slab_chunk_max",
        -: 4846:        [TRACK_SIZES] = "track_sizes",
        -: 4847:        [NO_INLINE_ASCII_RESP] = "no_inline_ascii_resp",
        -: 4848:        [MODERN] = "modern",
        -: 4849:        [NO_MODERN] = "no_modern",
        -: 4850:        [NO_CHUNKED_ITEMS] = "no_chunked_items",
        -: 4851:        [NO_SLAB_REASSIGN] = "no_slab_reassign",
        -: 4852:        [NO_SLAB_AUTOMOVE] = "no_slab_automove",
        -: 4853:        [NO_MAXCONNS_FAST] = "no_maxconns_fast",
        -: 4854:        [INLINE_ASCII_RESP] = "inline_ascii_resp",
        -: 4855:        [NO_LRU_CRAWLER] = "no_lru_crawler",
        -: 4856:        [NO_LRU_MAINTAINER] = "no_lru_maintainer",
        -: 4857:        [NO_DROP_PRIVILEGES] = "no_drop_privileges",
        -: 4858:        [DROP_PRIVILEGES] = "drop_privileges",
        -: 4859:        [RESP_OBJ_MEM_LIMIT] = "resp_obj_mem_limit",
        -: 4860:        [READ_BUF_MEM_LIMIT] = "read_buf_mem_limit",
        -: 4861:#ifdef TLS
        -: 4862:        [SSL_CERT] = "ssl_chain_cert",
        -: 4863:        [SSL_KEY] = "ssl_key",
        -: 4864:        [SSL_VERIFY_MODE] = "ssl_verify_mode",
        -: 4865:        [SSL_KEYFORM] = "ssl_keyformat",
        -: 4866:        [SSL_CIPHERS] = "ssl_ciphers",
        -: 4867:        [SSL_CA_CERT] = "ssl_ca_cert",
        -: 4868:        [SSL_WBUF_SIZE] = "ssl_wbuf_size",
        -: 4869:        [SSL_SESSION_CACHE] = "ssl_session_cache",
        -: 4870:        [SSL_KERNEL_TLS] = "ssl_kernel_tls",
        -: 4871:        [SSL_MIN_VERSION] = "ssl_min_version",
        -: 4872:#endif
        -: 4873:#ifdef PROXY
        -: 4874:        [PROXY_CONFIG] = "proxy_config",
        -: 4875:        [PROXY_URING] = "proxy_uring",
        -: 4876:#endif
        -: 4877:#ifdef MEMCACHED_DEBUG
        -: 4878:        [RELAXED_PRIVILEGES] = "relaxed_privileges",
        -: 4879:#endif
        -: 4880:#ifdef SOCK_COOKIE_ID
        -: 4881:        [COOKIE_ID] = "sock_cookie_id",
        -: 4882:#endif
        -: 4883:        NULL
        -: 4884:    };
        -: 4885:
      403: 4886:    if (!sanitycheck()) {
    #####: 4887:        free(meta);
    #####: 4888:        return EX_OSERR;
        -: 4889:    }
        -: 4890:
        -: 4891:    /* handle SIGINT, SIGTERM */
      403: 4892:    signal(SIGINT, sig_handler);
      403: 4893:    signal(SIGTERM, sig_handler);
      403: 4894:    signal(SIGHUP, sighup_handler);
      403: 4895:    signal(SIGUSR1, sig_usrhandler);
        -: 4896:
        -: 4897:    /* init settings */
      403: 4898:    settings_init();
      403: 4899:    verify_default("hash_algorithm", hash_type == MURMUR3_HASH);
        -: 4900:#ifdef EXTSTORE
      403: 4901:    void *storage = NULL;
      403: 4902:    void *storage_cf = storage_init_config(&settings);
      403: 4903:    bool storage_enabled = false;
      403: 4904:    if (storage_cf == NULL) {
    #####: 4905:        fprintf(stderr, "failed to allocate extstore config\n");
    #####: 4906:        return 1;
        -: 4907:    }
        -: 4908:#endif
        -: 4909:
        -: 4910:    /* set stderr non-buffering (for running under, say, daemontools) */
      403: 4911:    setbuf(stderr, NULL);
        -: 4912:
      403: 4913:    char *shortopts =
        -: 4914:          "a:"  /* access mask for unix socket */
        -: 4915:          "A"   /* enable admin shutdown command */
        -: 4916:          "Z"   /* enable SSL */
        -: 4917:          "p:"  /* TCP port number to listen on */
        -: 4918:          "s:"  /* unix socket path to listen on */
        -: 4919:          "U:"  /* UDP port number to listen on */
        -: 4920:          "m:"  /* max memory to use for items in megabytes */
        -: 4921:          "M"   /* return error on memory exhausted */
        -: 4922:          "c:"  /* max simultaneous connections */
        -: 4923:          "k"   /* lock down all paged memory */
        -: 4924:          "hiV" /* help, licence info, version */
        -: 4925:          "r"   /* maximize core file limit */
        -: 4926:          "v"   /* verbose */
        -: 4927:          "d"   /* daemon mode */
        -: 4928:          "l:"  /* interface to listen on */
        -: 4929:          "u:"  /* user identity to run as */
        -: 4930:          "P:"  /* save PID in file */
        -: 4931:          "f:"  /* factor? */
        -: 4932:          "n:"  /* minimum space allocated for key+value+flags */
        -: 4933:          "t:"  /* threads */
        -: 4934:          "D:"  /* prefix delimiter? */
        -: 4935:          "L"   /* Large memory pages */
        -: 4936:          "R:"  /* max requests per event */
        -: 4937:          "C"   /* Disable use of CAS */
        -: 4938:          "b:"  /* backlog queue limit */
        -: 4939:          "B:"  /* Binding protocol */
        -: 4940:          "I:"  /* Max item size */
        -: 4941:          "S"   /* Sasl ON */
        -: 4942:          "F"   /* Disable flush_all */
        -: 4943:          "X"   /* Disable dump commands */
        -: 4944:          "W"   /* Disable watch commands */
        -: 4945:          "Y:"   /* Enable token auth */
        -: 4946:          "e:"  /* mmap path for external item memory */
        -: 4947:          "o:"  /* Extended generic options */
        -: 4948:          "N:"  /* NAPI ID based thread selection */
        -: 4949:          ;
        -: 4950:
        -: 4951:    /* process arguments */
        -: 4952:#ifdef HAVE_GETOPT_LONG
      403: 4953:    const struct option longopts[] = {
        -: 4954:        {"unix-mask", required_argument, 0, 'a'},
        -: 4955:        {"enable-shutdown", no_argument, 0, 'A'},
        -: 4956:        {"enable-ssl", no_argument, 0, 'Z'},
        -: 4957:        {"port", required_argument, 0, 'p'},
        -: 4958:        {"unix-socket", required_argument, 0, 's'},
        -: 4959:        {"udp-port", required_argument, 0, 'U'},
        -: 4960:        {"memory-limit", required_argument, 0, 'm'},
        -: 4961:        {"disable-evictions", no_argument, 0, 'M'},
        -: 4962:        {"conn-limit", required_argument, 0, 'c'},
        -: 4963:        {"lock-memory", no_argument, 0, 'k'},
        -: 4964:        {"help", no_argument, 0, 'h'},
        -: 4965:        {"license", no_argument, 0, 'i'},
        -: 4966:        {"version", no_argument, 0, 'V'},
        -: 4967:        {"enable-coredumps", no_argument, 0, 'r'},
        -: 4968:        {"verbose", optional_argument, 0, 'v'},
        -: 4969:        {"daemon", no_argument, 0, 'd'},
        -: 4970:        {"listen", required_argument, 0, 'l'},
        -: 4971:        {"user", required_argument, 0, 'u'},
        -: 4972:        {"pidfile", required_argument, 0, 'P'},
        -: 4973:        {"slab-growth-factor", required_argument, 0, 'f'},
        -: 4974:        {"slab-min-size", required_argument, 0, 'n'},
        -: 4975:        {"threads", required_argument, 0, 't'},
        -: 4976:        {"enable-largepages", no_argument, 0, 'L'},
        -: 4977:        {"max-reqs-per-event", required_argument, 0, 'R'},
        -: 4978:        {"disable-cas", no_argument, 0, 'C'},
        -: 4979:        {"listen-backlog", required_argument, 0, 'b'},
        -: 4980:        {"protocol", required_argument, 0, 'B'},
        -: 4981:        {"max-item-size", required_argument, 0, 'I'},
        -: 4982:        {"enable-sasl", no_argument, 0, 'S'},
        -: 4983:        {"disable-flush-all", no_argument, 0, 'F'},
        -: 4984:        {"disable-dumping", no_argument, 0, 'X'},
        -: 4985:        {"disable-watch", no_argument, 0, 'W'},
        -: 4986:        {"auth-file", required_argument, 0, 'Y'},
        -: 4987:        {"memory-file", required_argument, 0, 'e'},
        -: 4988:        {"extended", required_argument, 0, 'o'},
        -: 4989:        {"napi-ids", required_argument, 0, 'N'},
        -: 4990:        {0, 0, 0, 0}
        -: 4991:    };
      403: 4992:    int optindex;
     1181: 4993:    while (-1 != (c = getopt_long(argc, argv, shortopts,
        -: 4994:                    longopts, &optindex))) {
        -: 4995:#else
        -: 4996:    while (-1 != (c = getopt(argc, argv, shortopts))) {
        -: 4997:#endif
      659: 4998:        switch (c) {
        6: 4999:        case 'A':
        -: 5000:            /* enables "shutdown" command */
        6: 5001:            settings.shutdown_command = true;
        6: 5002:            break;
    #####: 5003:        case 'Z':
        -: 5004:            /* enable secure communication*/
        -: 5005:#ifdef TLS
        -: 5006:            settings.ssl_enabled = true;
        -: 5007:#else
    #####: 5008:            fprintf(stderr, "This server is not built with TLS support.\n");
    #####: 5009:            exit(EX_USAGE);
        -: 5010:#endif
    #####: 5011:            break;
    #####: 5012:        case 'a':
        -: 5013:#ifndef DISABLE_UNIX_SOCKET
        -: 5014:            /* access for unix domain socket, as octal mask (like chmod)*/
    #####: 5015:            settings.access= strtol(optarg,NULL,8);
        -: 5016:#else
        -: 5017:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5018:            exit(EX_USAGE);
        -: 5019:#endif /* #ifndef DISABLE_UNIX_SOCKET */
    #####: 5020:            break;
       26: 5021:        case 'U':
       26: 5022:            settings.udpport = atoi(optarg);
       26: 5023:            udp_specified = true;
       26: 5024:            break;
       18: 5025:        case 'p':
       18: 5026:            settings.port = atoi(optarg);
       18: 5027:            tcp_specified = true;
       18: 5028:            break;
       99: 5029:        case 's':
        -: 5030:#ifndef DISABLE_UNIX_SOCKET
       99: 5031:            settings.socketpath = optarg;
        -: 5032:#else
        -: 5033:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5034:            exit(EX_USAGE);
        -: 5035:#endif /* #ifndef DISABLE_UNIX_SOCKET */
       99: 5036:            break;
       30: 5037:        case 'm':
       30: 5038:            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;
       30: 5039:            break;
        2: 5040:        case 'M':
        2: 5041:            settings.evict_to_free = 0;
        2: 5042:            break;
        2: 5043:        case 'c':
        2: 5044:            settings.maxconns = atoi(optarg);
        2: 5045:            if (settings.maxconns <= 0) {
        2: 5046:                fprintf(stderr, "Maximum connections must be greater than 0\n");
        2: 5047:                return 1;
        -: 5048:            }
        -: 5049:            break;
      279: 5050:        case 'h':
      279: 5051:            usage();
      279: 5052:            exit(EXIT_SUCCESS);
    #####: 5053:        case 'i':
    #####: 5054:            usage_license();
    #####: 5055:            exit(EXIT_SUCCESS);
        -: 5056:        case 'V':
    #####: 5057:            printf(PACKAGE " " VERSION "\n");
    #####: 5058:            exit(EXIT_SUCCESS);
        -: 5059:        case 'k':
        -: 5060:            lock_memory = true;
        -: 5061:            break;
        6: 5062:        case 'v':
        6: 5063:            settings.verbose++;
        6: 5064:            break;
        7: 5065:        case 'l':
        7: 5066:            if (settings.inter != NULL) {
    #####: 5067:                if (strstr(settings.inter, optarg) != NULL) {
        -: 5068:                    break;
        -: 5069:                }
    #####: 5070:                size_t len = strlen(settings.inter) + strlen(optarg) + 2;
    #####: 5071:                char *p = malloc(len);
    #####: 5072:                if (p == NULL) {
    #####: 5073:                    fprintf(stderr, "Failed to allocate memory\n");
    #####: 5074:                    return 1;
        -: 5075:                }
    #####: 5076:                snprintf(p, len, "%s,%s", settings.inter, optarg);
    #####: 5077:                free(settings.inter);
    #####: 5078:                settings.inter = p;
        -: 5079:            } else {
        7: 5080:                settings.inter= strdup(optarg);
        -: 5081:            }
        -: 5082:            break;
        2: 5083:        case 'd':
        2: 5084:            do_daemonize = true;
        2: 5085:            break;
    #####: 5086:        case 'r':
    #####: 5087:            maxcore = 1;
    #####: 5088:            break;
        2: 5089:        case 'R':
        2: 5090:            settings.reqs_per_event = atoi(optarg);
        2: 5091:            if (settings.reqs_per_event == 0) {
    #####: 5092:                fprintf(stderr, "Number of requests per event must be greater than 0\n");
    #####: 5093:                return 1;
        -: 5094:            }
        -: 5095:            break;
    #####: 5096:        case 'u':
    #####: 5097:            username = optarg;
    #####: 5098:            break;
        2: 5099:        case 'P':
        2: 5100:            pid_file = optarg;
        2: 5101:            break;
        2: 5102:        case 'e':
        2: 5103:            settings.memory_file = optarg;
        2: 5104:            break;
    #####: 5105:        case 'f':
    #####: 5106:            settings.factor = atof(optarg);
    #####: 5107:            if (settings.factor <= 1.0) {
    #####: 5108:                fprintf(stderr, "Factor must be greater than 1\n");
    #####: 5109:                return 1;
        -: 5110:            }
    #####: 5111:            meta->slab_config = strdup(optarg);
    #####: 5112:            break;
    #####: 5113:        case 'n':
    #####: 5114:            settings.chunk_size = atoi(optarg);
    #####: 5115:            if (settings.chunk_size == 0) {
    #####: 5116:                fprintf(stderr, "Chunk size must be greater than 0\n");
    #####: 5117:                return 1;
        -: 5118:            }
        -: 5119:            break;
        2: 5120:        case 't':
        2: 5121:            settings.num_threads = atoi(optarg);
        2: 5122:            if (settings.num_threads <= 0) {
        1: 5123:                fprintf(stderr, "Number of threads must be greater than 0\n");
        1: 5124:                return 1;
        -: 5125:            }
        -: 5126:            /* There're other problems when you get above 64 threads.
        -: 5127:             * In the future we should portably detect # of cores for the
        -: 5128:             * default.
        -: 5129:             */
        1: 5130:            if (settings.num_threads > 64) {
     778*: 5131:                fprintf(stderr, "WARNING: Setting a high number of worker"
        -: 5132:                                "threads is not recommended.\n"
        -: 5133:                                " Set this value to the number of cores in"
        -: 5134:                                " your machine or less.\n");
        -: 5135:            }
        -: 5136:            break;
    #####: 5137:        case 'D':
    #####: 5138:            if (! optarg || ! optarg[0]) {
    #####: 5139:                fprintf(stderr, "No delimiter specified\n");
    #####: 5140:                return 1;
        -: 5141:            }
    #####: 5142:            settings.prefix_delimiter = optarg[0];
    #####: 5143:            settings.detail_enabled = 1;
    #####: 5144:            break;
    #####: 5145:        case 'L' :
    #####: 5146:            if (enable_large_pages() == 0) {
        -: 5147:                preallocate = true;
        -: 5148:            } else {
    #####: 5149:                fprintf(stderr, "Cannot enable large pages on this system\n"
        -: 5150:                    "(There is no support as of this version)\n");
    #####: 5151:                return 1;
        -: 5152:            }
        -: 5153:            break;
        2: 5154:        case 'C' :
        2: 5155:            settings.use_cas = false;
        2: 5156:            break;
        1: 5157:        case 'b' :
        1: 5158:            settings.backlog = atoi(optarg);
        1: 5159:            break;
        8: 5160:        case 'B':
        8: 5161:            protocol_specified = true;
        8: 5162:            if (strcmp(optarg, "auto") == 0) {
        2: 5163:                settings.binding_protocol = negotiating_prot;
        6: 5164:            } else if (strcmp(optarg, "binary") == 0) {
        3: 5165:                settings.binding_protocol = binary_prot;
        3: 5166:            } else if (strcmp(optarg, "ascii") == 0) {
        2: 5167:                settings.binding_protocol = ascii_prot;
        -: 5168:            } else {
        1: 5169:                fprintf(stderr, "Invalid value for binding protocol: %s\n"
        -: 5170:                        " -- should be one of auto, binary, or ascii\n", optarg);
        1: 5171:                exit(EX_USAGE);
        -: 5172:            }
        -: 5173:            break;
       10: 5174:        case 'I':
       10: 5175:            buf = strdup(optarg);
       10: 5176:            unit = buf[strlen(buf)-1];
       10: 5177:            if (unit == 'k' || unit == 'm' ||
        4: 5178:                unit == 'K' || unit == 'M') {
        6: 5179:                buf[strlen(buf)-1] = '\0';
        6: 5180:                size_max = atoi(buf);
        6: 5181:                if (unit == 'k' || unit == 'K')
        1: 5182:                    size_max *= 1024;
        6: 5183:                if (unit == 'm' || unit == 'M')
        5: 5184:                    size_max *= 1024 * 1024;
        6: 5185:                settings.item_size_max = size_max;
        -: 5186:            } else {
        4: 5187:                settings.item_size_max = atoi(buf);
        -: 5188:            }
       10: 5189:            free(buf);
       10: 5190:            break;
        1: 5191:        case 'S': /* set Sasl authentication to true. Default is false */
        -: 5192:#ifndef ENABLE_SASL
        1: 5193:            fprintf(stderr, "This server is not built with SASL support.\n");
        1: 5194:            exit(EX_USAGE);
        -: 5195:#endif
        -: 5196:            settings.sasl = true;
        -: 5197:            break;
        1: 5198:       case 'F' :
        1: 5199:            settings.flush_enabled = false;
        1: 5200:            break;
    #####: 5201:       case 'X' :
    #####: 5202:            settings.dump_enabled = false;
    #####: 5203:            break;
        1: 5204:       case 'W' :
        1: 5205:            settings.watch_enabled = false;
        1: 5206:            break;
        1: 5207:       case 'Y' :
        -: 5208:            // dupe the file path now just in case the options get mangled.
        1: 5209:            settings.auth_file = strdup(optarg);
        1: 5210:            break;
    #####: 5211:       case 'N':
    #####: 5212:            settings.num_napi_ids = atoi(optarg);
    #####: 5213:            if (settings.num_napi_ids <= 0) {
    #####: 5214:                fprintf(stderr, "Maximum number of NAPI IDs must be greater than 0\n");
    #####: 5215:                return 1;
        -: 5216:            }
        -: 5217:            break;
      149: 5218:        case 'o': /* It's sub-opts time! */
      149: 5219:            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */
        -: 5220:
      391: 5221:            while (*subopts != '\0') {
        -: 5222:            // BSD getsubopt (at least) has undefined behavior on -1, so
        -: 5223:            // if we want to retry the getsubopt call in submodules we
        -: 5224:            // need an extra layer of string copies.
      242: 5225:            char *subopts_temp_o = NULL;
      242: 5226:            char *subopts_temp = subopts_temp_o = strdup(subopts);
        -: 5227:
      242: 5228:            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {
    #####: 5229:            case MAXCONNS_FAST:
    #####: 5230:                settings.maxconns_fast = true;
    #####: 5231:                break;
    #####: 5232:            case HASHPOWER_INIT:
    #####: 5233:                if (subopts_value == NULL) {
    #####: 5234:                    fprintf(stderr, "Missing numeric argument for hashpower\n");
    #####: 5235:                    return 1;
        -: 5236:                }
    #####: 5237:                settings.hashpower_init = atoi(subopts_value);
    #####: 5238:                if (settings.hashpower_init < 12) {
    #####: 5239:                    fprintf(stderr, "Initial hashtable multiplier of %d is too low\n",
        -: 5240:                        settings.hashpower_init);
    #####: 5241:                    return 1;
    #####: 5242:                } else if (settings.hashpower_init > 32) {
    #####: 5243:                    fprintf(stderr, "Initial hashtable multiplier of %d is too high\n"
        -: 5244:                        "Choose a value based on \"STAT hash_power_level\" from a running instance\n",
        -: 5245:                        settings.hashpower_init);
    #####: 5246:                    return 1;
        -: 5247:                }
        -: 5248:                break;
    #####: 5249:            case NO_HASHEXPAND:
    #####: 5250:                start_assoc_maint = false;
    #####: 5251:                break;
        3: 5252:            case SLAB_REASSIGN:
        3: 5253:                settings.slab_reassign = true;
        3: 5254:                break;
        9: 5255:            case SLAB_AUTOMOVE:
        9: 5256:                if (subopts_value == NULL) {
        2: 5257:                    settings.slab_automove = 1;
        2: 5258:                    break;
        -: 5259:                }
        7: 5260:                settings.slab_automove = atoi(subopts_value);
        7: 5261:                if (settings.slab_automove < 0 || settings.slab_automove > 2) {
    #####: 5262:                    fprintf(stderr, "slab_automove must be between 0 and 2\n");
    #####: 5263:                    return 1;
        -: 5264:                }
        -: 5265:                break;
    #####: 5266:            case SLAB_AUTOMOVE_RATIO:
    #####: 5267:                if (subopts_value == NULL) {
    #####: 5268:                    fprintf(stderr, "Missing slab_automove_ratio argument\n");
    #####: 5269:                    return 1;
        -: 5270:                }
    #####: 5271:                settings.slab_automove_ratio = atof(subopts_value);
    #####: 5272:                if (settings.slab_automove_ratio <= 0 || settings.slab_automove_ratio > 1) {
    #####: 5273:                    fprintf(stderr, "slab_automove_ratio must be > 0 and < 1\n");
    #####: 5274:                    return 1;
        -: 5275:                }
        -: 5276:                break;
        2: 5277:            case SLAB_AUTOMOVE_WINDOW:
        2: 5278:                if (subopts_value == NULL) {
    #####: 5279:                    fprintf(stderr, "Missing slab_automove_window argument\n");
    #####: 5280:                    return 1;
        -: 5281:                }
        2: 5282:                settings.slab_automove_window = atoi(subopts_value);
        2: 5283:                if (settings.slab_automove_window < 3) {
    #####: 5284:                    fprintf(stderr, "slab_automove_window must be > 2\n");
    #####: 5285:                    return 1;
        -: 5286:                }
        -: 5287:                break;
    #####: 5288:            case TAIL_REPAIR_TIME:
    #####: 5289:                if (subopts_value == NULL) {
    #####: 5290:                    fprintf(stderr, "Missing numeric argument for tail_repair_time\n");
    #####: 5291:                    return 1;
        -: 5292:                }
    #####: 5293:                settings.tail_repair_time = atoi(subopts_value);
    #####: 5294:                if (settings.tail_repair_time < 10) {
    #####: 5295:                    fprintf(stderr, "Cannot set tail_repair_time to less than 10 seconds\n");
    #####: 5296:                    return 1;
        -: 5297:                }
        -: 5298:                break;
    #####: 5299:            case HASH_ALGORITHM:
    #####: 5300:                if (subopts_value == NULL) {
    #####: 5301:                    fprintf(stderr, "Missing hash_algorithm argument\n");
    #####: 5302:                    return 1;
    #####: 5303:                };
    #####: 5304:                if (strcmp(subopts_value, "jenkins") == 0) {
        -: 5305:                    hash_type = JENKINS_HASH;
    #####: 5306:                } else if (strcmp(subopts_value, "murmur3") == 0) {
        -: 5307:                    hash_type = MURMUR3_HASH;
    #####: 5308:                } else if (strcmp(subopts_value, "xxh3") == 0) {
        -: 5309:                    hash_type = XXH3_HASH;
        -: 5310:                } else {
    #####: 5311:                    fprintf(stderr, "Unknown hash_algorithm option (jenkins, murmur3, xxh3)\n");
    #####: 5312:                    return 1;
        -: 5313:                }
        -: 5314:                break;
        6: 5315:            case LRU_CRAWLER:
        6: 5316:                start_lru_crawler = true;
        6: 5317:                break;
    #####: 5318:            case LRU_CRAWLER_SLEEP:
    #####: 5319:                if (subopts_value == NULL) {
    #####: 5320:                    fprintf(stderr, "Missing lru_crawler_sleep value\n");
    #####: 5321:                    return 1;
        -: 5322:                }
    #####: 5323:                settings.lru_crawler_sleep = atoi(subopts_value);
    #####: 5324:                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {
    #####: 5325:                    fprintf(stderr, "LRU crawler sleep must be between 0 and 1 second\n");
    #####: 5326:                    return 1;
        -: 5327:                }
        -: 5328:                break;
    #####: 5329:            case LRU_CRAWLER_TOCRAWL:
    #####: 5330:                if (subopts_value == NULL) {
    #####: 5331:                    fprintf(stderr, "Missing lru_crawler_tocrawl value\n");
    #####: 5332:                    return 1;
        -: 5333:                }
    #####: 5334:                if (!safe_strtoul(subopts_value, &tocrawl)) {
    #####: 5335:                    fprintf(stderr, "lru_crawler_tocrawl takes a numeric 32bit value\n");
    #####: 5336:                    return 1;
        -: 5337:                }
    #####: 5338:                settings.lru_crawler_tocrawl = tocrawl;
    #####: 5339:                break;
        5: 5340:            case LRU_MAINTAINER:
        5: 5341:                start_lru_maintainer = true;
        5: 5342:                settings.lru_segmented = true;
        5: 5343:                break;
    #####: 5344:            case HOT_LRU_PCT:
    #####: 5345:                if (subopts_value == NULL) {
    #####: 5346:                    fprintf(stderr, "Missing hot_lru_pct argument\n");
    #####: 5347:                    return 1;
        -: 5348:                }
    #####: 5349:                settings.hot_lru_pct = atoi(subopts_value);
    #####: 5350:                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {
    #####: 5351:                    fprintf(stderr, "hot_lru_pct must be > 1 and < 80\n");
    #####: 5352:                    return 1;
        -: 5353:                }
        -: 5354:                break;
    #####: 5355:            case WARM_LRU_PCT:
    #####: 5356:                if (subopts_value == NULL) {
    #####: 5357:                    fprintf(stderr, "Missing warm_lru_pct argument\n");
    #####: 5358:                    return 1;
        -: 5359:                }
    #####: 5360:                settings.warm_lru_pct = atoi(subopts_value);
    #####: 5361:                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {
    #####: 5362:                    fprintf(stderr, "warm_lru_pct must be > 1 and < 80\n");
    #####: 5363:                    return 1;
        -: 5364:                }
        -: 5365:                break;
    #####: 5366:            case HOT_MAX_FACTOR:
    #####: 5367:                if (subopts_value == NULL) {
    #####: 5368:                    fprintf(stderr, "Missing hot_max_factor argument\n");
    #####: 5369:                    return 1;
        -: 5370:                }
    #####: 5371:                settings.hot_max_factor = atof(subopts_value);
    #####: 5372:                if (settings.hot_max_factor <= 0) {
    #####: 5373:                    fprintf(stderr, "hot_max_factor must be > 0\n");
    #####: 5374:                    return 1;
        -: 5375:                }
        -: 5376:                break;
    #####: 5377:            case WARM_MAX_FACTOR:
    #####: 5378:                if (subopts_value == NULL) {
    #####: 5379:                    fprintf(stderr, "Missing warm_max_factor argument\n");
    #####: 5380:                    return 1;
        -: 5381:                }
    #####: 5382:                settings.warm_max_factor = atof(subopts_value);
    #####: 5383:                if (settings.warm_max_factor <= 0) {
    #####: 5384:                    fprintf(stderr, "warm_max_factor must be > 0\n");
    #####: 5385:                    return 1;
        -: 5386:                }
        -: 5387:                break;
        1: 5388:            case TEMPORARY_TTL:
        1: 5389:                if (subopts_value == NULL) {
    #####: 5390:                    fprintf(stderr, "Missing temporary_ttl argument\n");
    #####: 5391:                    return 1;
        -: 5392:                }
        1: 5393:                settings.temp_lru = true;
        1: 5394:                settings.temporary_ttl = atoi(subopts_value);
        1: 5395:                break;
        1: 5396:            case IDLE_TIMEOUT:
        1: 5397:                if (subopts_value == NULL) {
    #####: 5398:                    fprintf(stderr, "Missing numeric argument for idle_timeout\n");
    #####: 5399:                    return 1;
        -: 5400:                }
        1: 5401:                settings.idle_timeout = atoi(subopts_value);
        1: 5402:                break;
        4: 5403:            case WATCHER_LOGBUF_SIZE:
        4: 5404:                if (subopts_value == NULL) {
    #####: 5405:                    fprintf(stderr, "Missing watcher_logbuf_size argument\n");
    #####: 5406:                    return 1;
        -: 5407:                }
        4: 5408:                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {
    #####: 5409:                    fprintf(stderr, "could not parse argument to watcher_logbuf_size\n");
    #####: 5410:                    return 1;
        -: 5411:                }
        4: 5412:                settings.logger_watcher_buf_size *= 1024; /* kilobytes */
        4: 5413:                break;
    #####: 5414:            case WORKER_LOGBUF_SIZE:
    #####: 5415:                if (subopts_value == NULL) {
    #####: 5416:                    fprintf(stderr, "Missing worker_logbuf_size argument\n");
    #####: 5417:                    return 1;
        -: 5418:                }
    #####: 5419:                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {
    #####: 5420:                    fprintf(stderr, "could not parse argument to worker_logbuf_size\n");
    #####: 5421:                    return 1;
        -: 5422:                }
    #####: 5423:                settings.logger_buf_size *= 1024; /* kilobytes */
    #####: 5424:            case SLAB_SIZES:
    #####: 5425:                slab_sizes_unparsed = strdup(subopts_value);
    #####: 5426:                break;
        7: 5427:            case SLAB_CHUNK_MAX:
        7: 5428:                if (subopts_value == NULL) {
    #####: 5429:                    fprintf(stderr, "Missing slab_chunk_max argument\n");
        -: 5430:                }
        7: 5431:                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {
    #####: 5432:                    fprintf(stderr, "could not parse argument to slab_chunk_max\n");
        -: 5433:                }
        -: 5434:                slab_chunk_size_changed = true;
        -: 5435:                break;
    #####: 5436:            case TRACK_SIZES:
    #####: 5437:                item_stats_sizes_init();
    #####: 5438:                break;
        -: 5439:            case NO_INLINE_ASCII_RESP:
        -: 5440:                break;
        -: 5441:            case INLINE_ASCII_RESP:
        -: 5442:                break;
    #####: 5443:            case NO_CHUNKED_ITEMS:
    #####: 5444:                settings.slab_chunk_size_max = settings.slab_page_size;
    #####: 5445:                break;
    #####: 5446:            case NO_SLAB_REASSIGN:
    #####: 5447:                settings.slab_reassign = false;
    #####: 5448:                break;
    #####: 5449:            case NO_SLAB_AUTOMOVE:
    #####: 5450:                settings.slab_automove = 0;
    #####: 5451:                break;
    #####: 5452:            case NO_MAXCONNS_FAST:
    #####: 5453:                settings.maxconns_fast = false;
    #####: 5454:                break;
        3: 5455:            case NO_LRU_CRAWLER:
        3: 5456:                settings.lru_crawler = false;
        3: 5457:                start_lru_crawler = false;
        3: 5458:                break;
        1: 5459:            case NO_LRU_MAINTAINER:
        1: 5460:                start_lru_maintainer = false;
        1: 5461:                settings.lru_segmented = false;
        1: 5462:                break;
        -: 5463:#ifdef TLS
        -: 5464:            case SSL_CERT:
        -: 5465:                if (subopts_value == NULL) {
        -: 5466:                    fprintf(stderr, "Missing ssl_chain_cert argument\n");
        -: 5467:                    return 1;
        -: 5468:                }
        -: 5469:                settings.ssl_chain_cert = strdup(subopts_value);
        -: 5470:                break;
        -: 5471:            case SSL_KEY:
        -: 5472:                if (subopts_value == NULL) {
        -: 5473:                    fprintf(stderr, "Missing ssl_key argument\n");
        -: 5474:                    return 1;
        -: 5475:                }
        -: 5476:                settings.ssl_key = strdup(subopts_value);
        -: 5477:                break;
        -: 5478:            case SSL_VERIFY_MODE:
        -: 5479:            {
        -: 5480:                if (subopts_value == NULL) {
        -: 5481:                    fprintf(stderr, "Missing ssl_verify_mode argument\n");
        -: 5482:                    return 1;
        -: 5483:                }
        -: 5484:                int verify  = 0;
        -: 5485:                if (!safe_strtol(subopts_value, &verify)) {
        -: 5486:                    fprintf(stderr, "could not parse argument to ssl_verify_mode\n");
        -: 5487:                    return 1;
        -: 5488:                }
        -: 5489:                switch(verify) {
        -: 5490:                    case 0:
        -: 5491:                        settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -: 5492:                        break;
        -: 5493:                    case 1:
        -: 5494:                        settings.ssl_verify_mode = SSL_VERIFY_PEER;
        -: 5495:                        break;
        -: 5496:                    case 2:
        -: 5497:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5498:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
        -: 5499:                        break;
        -: 5500:                    case 3:
        -: 5501:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5502:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT |
        -: 5503:                                                    SSL_VERIFY_CLIENT_ONCE;
        -: 5504:                        break;
        -: 5505:                    default:
        -: 5506:                        fprintf(stderr, "Invalid ssl_verify_mode. Use help to see valid options.\n");
        -: 5507:                        return 1;
        -: 5508:                }
        -: 5509:                break;
        -: 5510:            }
        -: 5511:            case SSL_KEYFORM:
        -: 5512:                if (subopts_value == NULL) {
        -: 5513:                    fprintf(stderr, "Missing ssl_keyformat argument\n");
        -: 5514:                    return 1;
        -: 5515:                }
        -: 5516:                if (!safe_strtol(subopts_value, &settings.ssl_keyformat)) {
        -: 5517:                    fprintf(stderr, "could not parse argument to ssl_keyformat\n");
        -: 5518:                    return 1;
        -: 5519:                }
        -: 5520:                break;
        -: 5521:            case SSL_CIPHERS:
        -: 5522:                if (subopts_value == NULL) {
        -: 5523:                    fprintf(stderr, "Missing ssl_ciphers argument\n");
        -: 5524:                    return 1;
        -: 5525:                }
        -: 5526:                settings.ssl_ciphers = strdup(subopts_value);
        -: 5527:                break;
        -: 5528:            case SSL_CA_CERT:
        -: 5529:                if (subopts_value == NULL) {
        -: 5530:                    fprintf(stderr, "Missing ssl_ca_cert argument\n");
        -: 5531:                    return 1;
        -: 5532:                }
        -: 5533:                settings.ssl_ca_cert = strdup(subopts_value);
        -: 5534:                break;
        -: 5535:            case SSL_WBUF_SIZE:
        -: 5536:                if (subopts_value == NULL) {
        -: 5537:                    fprintf(stderr, "Missing ssl_wbuf_size argument\n");
        -: 5538:                    return 1;
        -: 5539:                }
        -: 5540:                if (!safe_strtoul(subopts_value, &settings.ssl_wbuf_size)) {
        -: 5541:                    fprintf(stderr, "could not parse argument to ssl_wbuf_size\n");
        -: 5542:                    return 1;
        -: 5543:                }
        -: 5544:                settings.ssl_wbuf_size *= 1024; /* kilobytes */
        -: 5545:                break;
        -: 5546:            case SSL_SESSION_CACHE:
        -: 5547:                settings.ssl_session_cache = true;
        -: 5548:                break;
        -: 5549:            case SSL_KERNEL_TLS:
        -: 5550:                settings.ssl_kernel_tls = true;
        -: 5551:                break;
        -: 5552:            case SSL_MIN_VERSION: {
        -: 5553:                int min_version;
        -: 5554:                if (subopts_value == NULL) {
        -: 5555:                    fprintf(stderr, "Missing ssl_min_version argument\n");
        -: 5556:                    return 1;
        -: 5557:                }
        -: 5558:                if (!safe_strtol(subopts_value, &min_version)) {
        -: 5559:                    fprintf(stderr, "could not parse argument to ssl_min_version\n");
        -: 5560:                    return 1;
        -: 5561:                }
        -: 5562:                switch (min_version) {
        -: 5563:                    case 0:
        -: 5564:                        settings.ssl_min_version = TLS1_VERSION;
        -: 5565:                        break;
        -: 5566:                    case 1:
        -: 5567:                        settings.ssl_min_version = TLS1_1_VERSION;
        -: 5568:                        break;
        -: 5569:                    case 2:
        -: 5570:                        settings.ssl_min_version = TLS1_2_VERSION;
        -: 5571:                        break;
        -: 5572:#if defined(TLS1_3_VERSION)
        -: 5573:                    case 3:
        -: 5574:                        settings.ssl_min_version = TLS1_3_VERSION;
        -: 5575:                        break;
        -: 5576:#endif
        -: 5577:                    default:
        -: 5578:                        fprintf(stderr, "Invalid ssl_min_version. Use help to see valid options.\n");
        -: 5579:                        return 1;
        -: 5580:                }
        -: 5581:                break;
        -: 5582:            }
        -: 5583:#endif
        -: 5584:            case MODERN:
        -: 5585:                /* currently no new defaults */
        -: 5586:                break;
        7: 5587:            case NO_MODERN:
        7: 5588:                if (!slab_chunk_size_changed) {
        7: 5589:                    settings.slab_chunk_size_max = settings.slab_page_size;
        -: 5590:                }
        7: 5591:                settings.slab_reassign = false;
        7: 5592:                settings.slab_automove = 0;
        7: 5593:                settings.maxconns_fast = false;
        7: 5594:                settings.lru_segmented = false;
        7: 5595:                hash_type = JENKINS_HASH;
        7: 5596:                start_lru_crawler = false;
        7: 5597:                start_lru_maintainer = false;
        7: 5598:                break;
    #####: 5599:            case NO_DROP_PRIVILEGES:
    #####: 5600:                settings.drop_privileges = false;
    #####: 5601:                break;
    #####: 5602:            case DROP_PRIVILEGES:
    #####: 5603:                settings.drop_privileges = true;
    #####: 5604:                break;
    #####: 5605:            case RESP_OBJ_MEM_LIMIT:
        -: 5606:                // TODO: Remove at some point in the future.
    #####: 5607:                fprintf(stderr, "DEPRECATED: resp_obj_mem_limit no longer used. See read_buf_mem_limit,\n");
        -: 5608:                break;
        1: 5609:            case READ_BUF_MEM_LIMIT:
        1: 5610:                if (subopts_value == NULL) {
    #####: 5611:                    fprintf(stderr, "Missing read_buf_mem_limit argument\n");
    #####: 5612:                    return 1;
        -: 5613:                }
        1: 5614:                if (!safe_strtoul(subopts_value, &settings.read_buf_mem_limit)) {
    #####: 5615:                    fprintf(stderr, "could not parse argument to read_buf_mem_limit\n");
    #####: 5616:                    return 1;
        -: 5617:                }
        1: 5618:                settings.read_buf_mem_limit *= 1024 * 1024; /* megabytes */
        1: 5619:                break;
        -: 5620:#ifdef PROXY
        -: 5621:            case PROXY_CONFIG:
        -: 5622:                if (subopts_value == NULL) {
        -: 5623:                    fprintf(stderr, "Missing proxy_config file argument\n");
        -: 5624:                    return 1;
        -: 5625:                }
        -: 5626:                if (protocol_specified) {
        -: 5627:                    fprintf(stderr, "Cannot specify a protocol with proxy mode enabled\n");
        -: 5628:                    return 1;
        -: 5629:                }
        -: 5630:                settings.proxy_startfile = strdup(subopts_value);
        -: 5631:                settings.proxy_enabled = true;
        -: 5632:                settings.binding_protocol = proxy_prot;
        -: 5633:                protocol_specified = true;
        -: 5634:                break;
        -: 5635:            case PROXY_URING:
        -: 5636:                settings.proxy_uring = true;
        -: 5637:                break;
        -: 5638:#endif
        -: 5639:#ifdef MEMCACHED_DEBUG
      116: 5640:            case RELAXED_PRIVILEGES:
      116: 5641:                settings.relaxed_privileges = true;
      116: 5642:                break;
        -: 5643:#endif
        -: 5644:#ifdef SOCK_COOKIE_ID
    #####: 5645:            case COOKIE_ID:
    #####: 5646:                (void)safe_strtoul(subopts_value, &settings.sock_cookie_id);
    #####: 5647:                break;
        -: 5648:#endif
       75: 5649:            default:
        -: 5650:#ifdef EXTSTORE
        -: 5651:                // TODO: differentiating response code.
       75: 5652:                if (storage_read_config(storage_cf, &subopts_temp)) {
        -: 5653:                    return 1;
        -: 5654:                }
        -: 5655:#else
        -: 5656:                printf("Illegal suboption \"%s\"\n", subopts_temp);
        -: 5657:                return 1;
        -: 5658:#endif
        -: 5659:            } // switch
      242: 5660:            if (subopts_temp_o) {
      242: 5661:                free(subopts_temp_o);
        -: 5662:            }
        -: 5663:
        -: 5664:            } // while
      149: 5665:            free(subopts_orig);
      149: 5666:            break;
    #####: 5667:        default:
    #####: 5668:            fprintf(stderr, "Illegal argument \"%c\"\n", c);
    #####: 5669:            return 1;
        -: 5670:        }
    #####: 5671:    }
        -: 5672:
      119: 5673:    if (settings.num_napi_ids > settings.num_threads) {
    #####: 5674:        fprintf(stderr, "Number of napi_ids(%d) cannot be greater than number of threads(%d)\n",
        -: 5675:                settings.num_napi_ids, settings.num_threads);
    #####: 5676:        exit(EX_USAGE);
        -: 5677:    }
        -: 5678:
      119: 5679:    if (settings.item_size_max < ITEM_SIZE_MAX_LOWER_LIMIT) {
        1: 5680:        fprintf(stderr, "Item max size cannot be less than 1024 bytes.\n");
        1: 5681:        exit(EX_USAGE);
        -: 5682:    }
      118: 5683:    if (settings.item_size_max > (settings.maxbytes / 2)) {
        1: 5684:        fprintf(stderr, "Cannot set item size limit higher than 1/2 of memory max.\n");
        1: 5685:        exit(EX_USAGE);
        -: 5686:    }
      117: 5687:    if (settings.item_size_max > (ITEM_SIZE_MAX_UPPER_LIMIT)) {
    #####: 5688:        fprintf(stderr, "Cannot set item size limit higher than a gigabyte.\n");
    #####: 5689:        exit(EX_USAGE);
        -: 5690:    }
      117: 5691:    if (settings.item_size_max > 1024 * 1024) {
        5: 5692:        if (!slab_chunk_size_changed) {
        -: 5693:            // Ideal new default is 16k, but needs stitching.
        5: 5694:            settings.slab_chunk_size_max = settings.slab_page_size / 2;
        -: 5695:        }
        -: 5696:    }
        -: 5697:
      117: 5698:    if (settings.slab_chunk_size_max > settings.item_size_max) {
    #####: 5699:        fprintf(stderr, "slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\n",
        -: 5700:                settings.slab_chunk_size_max, settings.item_size_max);
    #####: 5701:        exit(EX_USAGE);
        -: 5702:    }
        -: 5703:
      117: 5704:    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {
    #####: 5705:        fprintf(stderr, "-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\n",
        -: 5706:                settings.item_size_max, settings.slab_chunk_size_max);
    #####: 5707:        exit(EX_USAGE);
        -: 5708:    }
        -: 5709:
      117: 5710:    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {
    #####: 5711:        fprintf(stderr, "slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\n",
        -: 5712:                settings.slab_chunk_size_max, settings.slab_page_size);
    #####: 5713:        exit(EX_USAGE);
        -: 5714:    }
        -: 5715:#ifdef EXTSTORE
      117: 5716:    switch (storage_check_config(storage_cf)) {
        9: 5717:        case 0:
        9: 5718:            storage_enabled = true;
        9: 5719:            break;
    #####: 5720:        case 1:
    #####: 5721:            exit(EX_USAGE);
      117: 5722:            break;
        -: 5723:    }
        -: 5724:#endif
        -: 5725:    // Reserve this for the new default. If factor size hasn't changed, use
        -: 5726:    // new default.
        -: 5727:    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {
        -: 5728:        settings.factor = 1.08;
        -: 5729:    }*/
        -: 5730:
      117: 5731:    if (slab_sizes_unparsed != NULL) {
        -: 5732:        // want the unedited string for restart code.
    #####: 5733:        char *temp = strdup(slab_sizes_unparsed);
    #####: 5734:        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {
    #####: 5735:            use_slab_sizes = true;
    #####: 5736:            if (meta->slab_config) {
    #####: 5737:                free(meta->slab_config);
        -: 5738:            }
    #####: 5739:            meta->slab_config = temp;
        -: 5740:        } else {
    #####: 5741:            exit(EX_USAGE);
        -: 5742:        }
      117: 5743:    } else if (!meta->slab_config) {
        -: 5744:        // using the default factor.
      117: 5745:        meta->slab_config = "1.25";
        -: 5746:    }
        -: 5747:
      117: 5748:    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {
    #####: 5749:        fprintf(stderr, "hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\n");
    #####: 5750:        exit(EX_USAGE);
        -: 5751:    }
        -: 5752:
      117: 5753:    if (settings.temp_lru && !start_lru_maintainer) {
    #####: 5754:        fprintf(stderr, "temporary_ttl requires lru_maintainer to be enabled\n");
    #####: 5755:        exit(EX_USAGE);
        -: 5756:    }
        -: 5757:
      117: 5758:    if (hash_init(hash_type) != 0) {
    #####: 5759:        fprintf(stderr, "Failed to initialize hash_algorithm!\n");
    #####: 5760:        exit(EX_USAGE);
        -: 5761:    }
        -: 5762:
        -: 5763:    /*
        -: 5764:     * Use one workerthread to serve each UDP port if the user specified
        -: 5765:     * multiple ports
        -: 5766:     */
      117: 5767:    if (settings.inter != NULL && strchr(settings.inter, ',')) {
    #####: 5768:        settings.num_threads_per_udp = 1;
        -: 5769:    } else {
      117: 5770:        settings.num_threads_per_udp = settings.num_threads;
        -: 5771:    }
        -: 5772:
      117: 5773:    if (settings.sasl) {
    #####: 5774:        if (!protocol_specified) {
    #####: 5775:            settings.binding_protocol = binary_prot;
        -: 5776:        } else {
    #####: 5777:            if (settings.binding_protocol != binary_prot) {
    #####: 5778:                fprintf(stderr, "ERROR: You cannot allow the ASCII protocol while using SASL.\n");
    #####: 5779:                exit(EX_USAGE);
        -: 5780:            }
        -: 5781:        }
        -: 5782:
    #####: 5783:        if (settings.udpport) {
    #####: 5784:            fprintf(stderr, "ERROR: Cannot enable UDP while using binary SASL authentication.\n");
    #####: 5785:            exit(EX_USAGE);
        -: 5786:        }
        -: 5787:    }
        -: 5788:
      117: 5789:    if (settings.auth_file) {
        1: 5790:        if (!protocol_specified) {
        1: 5791:            settings.binding_protocol = ascii_prot;
        -: 5792:        } else {
    #####: 5793:            if (settings.binding_protocol != ascii_prot) {
    #####: 5794:                fprintf(stderr, "ERROR: You cannot allow the BINARY protocol while using ascii authentication tokens.\n");
    #####: 5795:                exit(EX_USAGE);
        -: 5796:            }
        -: 5797:        }
        -: 5798:    }
        -: 5799:
      117: 5800:    if (udp_specified && settings.udpport != 0 && !tcp_specified) {
        2: 5801:        settings.port = settings.udpport;
        -: 5802:    }
        -: 5803:
      117: 5804:    if (settings.port > 65535) {
    #####: 5805:        fprintf(stderr, "ERROR: Invalid port number %d.\n", settings.port);
    #####: 5806:        exit(EX_USAGE);
        -: 5807:    }
        -: 5808:
        -: 5809:
        -: 5810:#ifdef TLS
        -: 5811:    /*
        -: 5812:     * Setup SSL if enabled
        -: 5813:     */
        -: 5814:    if (settings.ssl_enabled) {
        -: 5815:        if (!settings.port) {
        -: 5816:            fprintf(stderr, "ERROR: You cannot enable SSL without a TCP port.\n");
        -: 5817:            exit(EX_USAGE);
        -: 5818:        }
        -: 5819:        // openssl init methods.
        -: 5820:        SSL_load_error_strings();
        -: 5821:        SSLeay_add_ssl_algorithms();
        -: 5822:        // Initiate the SSL context.
        -: 5823:        ssl_init();
        -: 5824:    }
        -: 5825:#endif
        -: 5826:
      117: 5827:    if (maxcore != 0) {
    #####: 5828:        struct rlimit rlim_new;
        -: 5829:        /*
        -: 5830:         * First try raising to infinity; if that fails, try bringing
        -: 5831:         * the soft limit to the hard.
        -: 5832:         */
    #####: 5833:        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
    #####: 5834:            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;
    #####: 5835:            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {
        -: 5836:                /* failed. try raising just to the old max */
    #####: 5837:                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;
    #####: 5838:                (void)setrlimit(RLIMIT_CORE, &rlim_new);
        -: 5839:            }
        -: 5840:        }
        -: 5841:        /*
        -: 5842:         * getrlimit again to see what we ended up with. Only fail if
        -: 5843:         * the soft limit ends up 0, because then no core files will be
        -: 5844:         * created at all.
        -: 5845:         */
        -: 5846:
    #####: 5847:        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {
    #####: 5848:            fprintf(stderr, "failed to ensure corefile creation\n");
    #####: 5849:            exit(EX_OSERR);
        -: 5850:        }
        -: 5851:    }
        -: 5852:
        -: 5853:    /*
        -: 5854:     * If needed, increase rlimits to allow as many connections
        -: 5855:     * as needed.
        -: 5856:     */
        -: 5857:
      117: 5858:    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {
    #####: 5859:        fprintf(stderr, "failed to getrlimit number of files\n");
    #####: 5860:        exit(EX_OSERR);
        -: 5861:    } else {
      117: 5862:        rlim.rlim_cur = settings.maxconns;
      117: 5863:        rlim.rlim_max = settings.maxconns;
      117: 5864:        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {
        -: 5865:#ifndef MEMCACHED_DEBUG
        -: 5866:            fprintf(stderr, "failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\n");
        -: 5867:            exit(EX_OSERR);
        -: 5868:#endif
      117: 5869:        }
        -: 5870:    }
        -: 5871:
        -: 5872:    /* lose root privileges if we have them */
      117: 5873:    if (getuid() == 0 || geteuid() == 0) {
    #####: 5874:        if (username == 0 || *username == '\0') {
    #####: 5875:            fprintf(stderr, "can't run as root without the -u switch\n");
    #####: 5876:            exit(EX_USAGE);
        -: 5877:        }
    #####: 5878:        if ((pw = getpwnam(username)) == 0) {
    #####: 5879:            fprintf(stderr, "can't find the user %s to switch to\n", username);
    #####: 5880:            exit(EX_NOUSER);
        -: 5881:        }
    #####: 5882:        if (setgroups(0, NULL) < 0) {
        -: 5883:            /* setgroups may fail with EPERM, indicating we are already in a
        -: 5884:             * minimally-privileged state. In that case we continue. For all
        -: 5885:             * other failure codes we exit.
        -: 5886:             *
        -: 5887:             * Note that errno is stored here because fprintf may change it.
        -: 5888:             */
    #####: 5889:            bool should_exit = errno != EPERM;
    #####: 5890:            fprintf(stderr, "failed to drop supplementary groups: %s\n",
        -: 5891:                    strerror(errno));
    #####: 5892:            if (should_exit) {
    #####: 5893:                exit(EX_OSERR);
        -: 5894:            }
        -: 5895:        }
    #####: 5896:        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
    #####: 5897:            fprintf(stderr, "failed to assume identity of user %s\n", username);
    #####: 5898:            exit(EX_OSERR);
        -: 5899:        }
        -: 5900:    }
        -: 5901:
        -: 5902:    /* Initialize Sasl if -S was specified */
      117: 5903:    if (settings.sasl) {
      117: 5904:        init_sasl();
        -: 5905:    }
        -: 5906:
        -: 5907:    /* daemonize if requested */
        -: 5908:    /* if we want to ensure our ability to dump core, don't chdir to / */
      117: 5909:    if (do_daemonize) {
        2: 5910:        if (signal(SIGHUP, SIG_IGN) == SIG_ERR) {
    #####: 5911:            perror("Failed to ignore SIGHUP");
        -: 5912:        }
        2: 5913:        if (daemonize(maxcore, settings.verbose) == -1) {
    #####: 5914:            fprintf(stderr, "failed to daemon() in order to daemonize\n");
    #####: 5915:            exit(EXIT_FAILURE);
        -: 5916:        }
        -: 5917:    }
        -: 5918:
        -: 5919:    /* lock paged memory if needed */
      116: 5920:    if (lock_memory) {
        -: 5921:#ifdef HAVE_MLOCKALL
    #####: 5922:        int res = mlockall(MCL_CURRENT | MCL_FUTURE);
    #####: 5923:        if (res != 0) {
    #####: 5924:            fprintf(stderr, "warning: -k invalid, mlockall() failed: %s\n",
    #####: 5925:                    strerror(errno));
        -: 5926:        }
        -: 5927:#else
        -: 5928:        fprintf(stderr, "warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\n");
        -: 5929:#endif
        -: 5930:    }
        -: 5931:
        -: 5932:    /* initialize main thread libevent instance */
        -: 5933:#if defined(LIBEVENT_VERSION_NUMBER) && LIBEVENT_VERSION_NUMBER >= 0x02000101
        -: 5934:    /* If libevent version is larger/equal to 2.0.2-alpha, use newer version */
      116: 5935:    struct event_config *ev_config;
      116: 5936:    ev_config = event_config_new();
      116: 5937:    event_config_set_flag(ev_config, EVENT_BASE_FLAG_NOLOCK);
      116: 5938:    main_base = event_base_new_with_config(ev_config);
      116: 5939:    event_config_free(ev_config);
        -: 5940:#else
        -: 5941:    /* Otherwise, use older API */
        -: 5942:    main_base = event_init();
        -: 5943:#endif
        -: 5944:
        -: 5945:    /* Load initial auth file if required */
      116: 5946:    if (settings.auth_file) {
        1: 5947:        if (settings.udpport) {
    #####: 5948:            fprintf(stderr, "Cannot use UDP with ascii authentication enabled (-U 0 to disable)\n");
    #####: 5949:            exit(EX_USAGE);
        -: 5950:        }
        -: 5951:
        1: 5952:        switch (authfile_load(settings.auth_file)) {
    #####: 5953:            case AUTHFILE_STATFAIL:
    #####: 5954:                vperror("Could not stat authfile [%s], error %s", settings.auth_file
    #####: 5955:                                                            , strerror(errno));
    #####: 5956:                exit(EXIT_FAILURE);
    #####: 5957:                break;
    #####: 5958:            case AUTHFILE_OPENFAIL:
    #####: 5959:                vperror("Could not open authfile [%s] for reading, error %s", settings.auth_file
    #####: 5960:                                                                           , strerror(errno));
    #####: 5961:                exit(EXIT_FAILURE);
    #####: 5962:                break;
    #####: 5963:            case AUTHFILE_OOM:
    #####: 5964:                fprintf(stderr, "Out of memory reading password file: %s", settings.auth_file);
    #####: 5965:                exit(EXIT_FAILURE);
    #####: 5966:                break;
    #####: 5967:            case AUTHFILE_MALFORMED:
    #####: 5968:                fprintf(stderr, "Authfile [%s] has a malformed entry. Should be 'user:password'", settings.auth_file);
    #####: 5969:                exit(EXIT_FAILURE);
        -: 5970:                break;
        -: 5971:            case AUTHFILE_OK:
        -: 5972:                break;
        -: 5973:        }
      115: 5974:    }
        -: 5975:
        -: 5976:    /* initialize other stuff */
      116: 5977:    stats_init();
      116: 5978:    logger_init();
      116: 5979:    conn_init();
      116: 5980:    bool reuse_mem = false;
      116: 5981:    void *mem_base = NULL;
      116: 5982:    bool prefill = false;
      116: 5983:    if (settings.memory_file != NULL) {
        2: 5984:        preallocate = true;
        -: 5985:        // Easier to manage memory if we prefill the global pool when reusing.
        2: 5986:        prefill = true;
        2: 5987:        restart_register("main", _mc_meta_load_cb, _mc_meta_save_cb, meta);
        4: 5988:        reuse_mem = restart_mmap_open(settings.maxbytes,
        2: 5989:                        settings.memory_file,
        -: 5990:                        &mem_base);
        -: 5991:        // The "save" callback gets called when we're closing out the mmap,
        -: 5992:        // but we don't know what the mmap_base is until after we call open.
        -: 5993:        // So we pass the struct above but have to fill it in here so the
        -: 5994:        // data's available during the save routine.
        2: 5995:        meta->mmap_base = mem_base;
        -: 5996:        // Also, the callbacks for load() run before _open returns, so we
        -: 5997:        // should have the old base in 'meta' as of here.
        -: 5998:    }
        -: 5999:    // Initialize the hash table _after_ checking restart metadata.
        -: 6000:    // We override the hash table start argument with what was live
        -: 6001:    // previously, to avoid filling a huge set of items into a tiny hash
        -: 6002:    // table.
      116: 6003:    assoc_init(settings.hashpower_init);
        -: 6004:#ifdef EXTSTORE
      116: 6005:    if (storage_enabled && reuse_mem) {
    #####: 6006:        fprintf(stderr, "[restart] memory restart with extstore not presently supported.\n");
    #####: 6007:        reuse_mem = false;
        -: 6008:    }
        -: 6009:#endif
      232: 6010:    slabs_init(settings.maxbytes, settings.factor, preallocate,
        -: 6011:            use_slab_sizes ? slab_sizes : NULL, mem_base, reuse_mem);
        -: 6012:#ifdef EXTSTORE
      116: 6013:    if (storage_enabled) {
        9: 6014:        storage = storage_init(storage_cf);
        9: 6015:        if (storage == NULL) {
        1: 6016:            exit(EXIT_FAILURE);
        -: 6017:        }
        8: 6018:        ext_storage = storage;
        -: 6019:        /* page mover algorithm for extstore needs memory prefilled */
        8: 6020:        prefill = true;
        -: 6021:    }
        -: 6022:#endif
        -: 6023:
      115: 6024:    if (settings.drop_privileges) {
      115: 6025:        setup_privilege_violations_handler();
        -: 6026:    }
        -: 6027:
      115: 6028:    if (prefill)
       10: 6029:        slabs_prefill_global();
        -: 6030:    /* In restartable mode and we've decided to issue a fixup on memory */
      115: 6031:    if (settings.memory_file != NULL && reuse_mem) {
        1: 6032:        mc_ptr_t old_base = meta->old_base;
        1: 6033:        assert(old_base == meta->old_base);
        -: 6034:
        -: 6035:        // should've pulled in process_started from meta file.
        1: 6036:        process_started = meta->process_started;
        -: 6037:        // TODO: must be a more canonical way of serializing/deserializing
        -: 6038:        // pointers? passing through uint64_t should work, and we're not
        -: 6039:        // annotating the pointer with anything, but it's still slightly
        -: 6040:        // insane.
        1: 6041:        restart_fixup((void *)old_base);
        -: 6042:    }
        -: 6043:    /*
        -: 6044:     * ignore SIGPIPE signals; we can use errno == EPIPE if we
        -: 6045:     * need that information
        -: 6046:     */
      115: 6047:    if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
    #####: 6048:        perror("failed to ignore SIGPIPE; sigaction");
    #####: 6049:        exit(EX_OSERR);
        -: 6050:    }
        -: 6051:    /* start up worker threads if MT mode */
        -: 6052:#ifdef PROXY
        -: 6053:    if (settings.proxy_enabled) {
        -: 6054:        settings.proxy_ctx = proxy_init(settings.proxy_uring);
        -: 6055:    }
        -: 6056:#endif
        -: 6057:#ifdef EXTSTORE
      115: 6058:    slabs_set_storage(storage);
      115: 6059:    memcached_thread_init(settings.num_threads, storage);
      115: 6060:    init_lru_crawler(storage);
        -: 6061:#else
        -: 6062:    memcached_thread_init(settings.num_threads, NULL);
        -: 6063:    init_lru_crawler(NULL);
        -: 6064:#endif
        -: 6065:
        -: 6066:#ifdef PROXY
        -: 6067:    if (settings.proxy_enabled) {
        -: 6068:        if (proxy_first_confload(settings.proxy_ctx) != 0) {
        -: 6069:            exit(EXIT_FAILURE);
        -: 6070:        }
        -: 6071:    }
        -: 6072:#endif
        -: 6073:
      115: 6074:    if (start_assoc_maint && start_assoc_maintenance_thread() == -1) {
    #####: 6075:        exit(EXIT_FAILURE);
        -: 6076:    }
      115: 6077:    if (start_lru_crawler && start_item_crawler_thread() != 0) {
    #####: 6078:        fprintf(stderr, "Failed to enable LRU crawler thread\n");
    #####: 6079:        exit(EXIT_FAILURE);
        -: 6080:    }
        -: 6081:#ifdef EXTSTORE
      115: 6082:    if (storage && start_storage_compact_thread(storage) != 0) {
    #####: 6083:        fprintf(stderr, "Failed to start storage compaction thread\n");
    #####: 6084:        exit(EXIT_FAILURE);
        -: 6085:    }
      115: 6086:    if (storage && start_storage_write_thread(storage) != 0) {
    #####: 6087:        fprintf(stderr, "Failed to start storage writer thread\n");
    #####: 6088:        exit(EXIT_FAILURE);
        -: 6089:    }
        -: 6090:
      115: 6091:    if (start_lru_maintainer && start_lru_maintainer_thread(storage) != 0) {
        -: 6092:#else
        -: 6093:    if (start_lru_maintainer && start_lru_maintainer_thread(NULL) != 0) {
        -: 6094:#endif
    #####: 6095:        fprintf(stderr, "Failed to enable LRU maintainer thread\n");
    #####: 6096:        free(meta);
    #####: 6097:        return 1;
        -: 6098:    }
        -: 6099:
      223: 6100:    if (settings.slab_reassign &&
      108: 6101:        start_slab_maintenance_thread() == -1) {
    #####: 6102:        exit(EXIT_FAILURE);
        -: 6103:    }
        -: 6104:
      115: 6105:    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {
    #####: 6106:        exit(EXIT_FAILURE);
        -: 6107:    }
        -: 6108:
        -: 6109:    /* initialise clock event */
        -: 6110:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 6111:    {
      115: 6112:        struct timespec ts;
      115: 6113:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
      115: 6114:            monotonic = true;
      115: 6115:            monotonic_start = ts.tv_sec;
        -: 6116:            // Monotonic clock needs special handling for restarts.
        -: 6117:            // We get a start time at an arbitrary place, so we need to
        -: 6118:            // restore the original time delta, which is always "now" - _start
      115: 6119:            if (reuse_mem) {
        -: 6120:                // the running timespan at stop time + the time we think we
        -: 6121:                // were stopped.
        1: 6122:                monotonic_start -= meta->current_time + meta->time_delta;
        -: 6123:            } else {
      114: 6124:                monotonic_start -= ITEM_UPDATE_INTERVAL + 2;
        -: 6125:            }
        -: 6126:        }
        -: 6127:    }
        -: 6128:#endif
      115: 6129:    clock_handler(0, 0, 0);
        -: 6130:
        -: 6131:    /* create unix mode sockets after dropping privileges */
      115: 6132:    if (settings.socketpath != NULL) {
       95: 6133:        errno = 0;
       95: 6134:        if (server_socket_unix(settings.socketpath,settings.access)) {
    #####: 6135:            vperror("failed to listen on UNIX socket: %s", settings.socketpath);
    #####: 6136:            exit(EX_OSERR);
        -: 6137:        }
        -: 6138:    }
        -: 6139:
        -: 6140:    /* create the listening socket, bind it, and init */
      115: 6141:    if (settings.socketpath == NULL) {
       20: 6142:        const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
       20: 6143:        char *temp_portnumber_filename = NULL;
       20: 6144:        size_t len;
       20: 6145:        FILE *portnumber_file = NULL;
        -: 6146:
       20: 6147:        if (portnumber_filename != NULL) {
       13: 6148:            len = strlen(portnumber_filename)+4+1;
       13: 6149:            temp_portnumber_filename = malloc(len);
       13: 6150:            snprintf(temp_portnumber_filename,
        -: 6151:                     len,
        -: 6152:                     "%s.lck", portnumber_filename);
        -: 6153:
       13: 6154:            portnumber_file = fopen(temp_portnumber_filename, "a");
       13: 6155:            if (portnumber_file == NULL) {
    #####: 6156:                fprintf(stderr, "Failed to open \"%s\": %s\n",
    #####: 6157:                        temp_portnumber_filename, strerror(errno));
        -: 6158:            }
        -: 6159:        }
        -: 6160:
       20: 6161:        errno = 0;
       20: 6162:        if (settings.port && server_sockets(settings.port, tcp_transport,
        -: 6163:                                           portnumber_file)) {
        1: 6164:            if (settings.inter == NULL) {
    #####: 6165:                vperror("failed to listen on TCP port %d", settings.port);
        -: 6166:            } else {
        1: 6167:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6168:            }
        1: 6169:            exit(EX_OSERR);
        -: 6170:        }
        -: 6171:
        -: 6172:        /*
        -: 6173:         * initialization order: first create the listening sockets
        -: 6174:         * (may need root on low ports), then drop root if needed,
        -: 6175:         * then daemonize if needed, then init libevent (in some cases
        -: 6176:         * descriptors created by libevent wouldn't survive forking).
        -: 6177:         */
        -: 6178:
        -: 6179:        /* create the UDP listening socket and bind it */
       19: 6180:        errno = 0;
       19: 6181:        if (settings.udpport && server_sockets(settings.udpport, udp_transport,
        -: 6182:                                              portnumber_file)) {
    #####: 6183:            if (settings.inter == NULL) {
    #####: 6184:                vperror("failed to listen on UDP port %d", settings.udpport);
        -: 6185:            } else {
    #####: 6186:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6187:            }
    #####: 6188:            exit(EX_OSERR);
        -: 6189:        }
        -: 6190:
       19: 6191:        if (portnumber_file) {
       13: 6192:            fclose(portnumber_file);
       13: 6193:            rename(temp_portnumber_filename, portnumber_filename);
        -: 6194:        }
       19: 6195:        if (temp_portnumber_filename)
       13: 6196:            free(temp_portnumber_filename);
        -: 6197:    }
        -: 6198:
        -: 6199:    /* Give the sockets a moment to open. I know this is dumb, but the error
        -: 6200:     * is only an advisory.
        -: 6201:     */
      114: 6202:    usleep(1000);
      114: 6203:    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {
    #####: 6204:        fprintf(stderr, "Maxconns setting is too low, use -c to increase.\n");
    #####: 6205:        exit(EXIT_FAILURE);
        -: 6206:    }
        -: 6207:
      114: 6208:    if (pid_file != NULL) {
        1: 6209:        save_pid(pid_file);
        -: 6210:    }
        -: 6211:
        -: 6212:    /* Drop privileges no longer needed */
      114: 6213:    if (settings.drop_privileges) {
      114: 6214:        drop_privileges();
        -: 6215:    }
        -: 6216:
        -: 6217:    /* Initialize the uriencode lookup table. */
      114: 6218:    uriencode_init();
        -: 6219:
        -: 6220:    /* enter the event loop */
     2744: 6221:    while (!stop_main_loop) {
     2630: 6222:        if (event_base_loop(main_base, EVLOOP_ONCE) != 0) {
        -: 6223:            retval = EXIT_FAILURE;
        -: 6224:            break;
        -: 6225:        }
        -: 6226:    }
        -: 6227:
      114: 6228:    switch (stop_main_loop) {
        2: 6229:        case GRACE_STOP:
        2: 6230:            fprintf(stderr, "Gracefully stopping\n");
        -: 6231:        break;
      112: 6232:        case EXIT_NORMALLY:
        -: 6233:            // Don't need to print anything to STDERR for a normal shutdown except
        -: 6234:            // if we want to.
        -: 6235:
      112: 6236:            if (settings.verbose) {
        3: 6237:                fprintf(stderr, "Exiting normally\n");
        -: 6238:            }
        -: 6239:
        -: 6240:        break;
    #####: 6241:        default:
    #####: 6242:            fprintf(stderr, "Exiting on error\n");
        -: 6243:        break;
        -: 6244:    }
        -: 6245:
      114: 6246:    if (stop_main_loop == GRACE_STOP) {
        2: 6247:        stop_threads();
        2: 6248:        if (settings.memory_file != NULL) {
        1: 6249:            restart_mmap_close();
        -: 6250:        }
        -: 6251:    }
        -: 6252:
        -: 6253:    /* remove the PID file if we're a daemon */
      114: 6254:    if (do_daemonize)
        1: 6255:        remove_pidfile(pid_file);
        -: 6256:    /* Clean up strdup() call for bind() address */
      114: 6257:    if (settings.inter)
        6: 6258:      free(settings.inter);
        -: 6259:
        -: 6260:    /* cleanup base */
      114: 6261:    event_base_free(main_base);
        -: 6262:
      114: 6263:    free(meta);
        -: 6264:
      114: 6265:    return retval;
        -: 6266:}
