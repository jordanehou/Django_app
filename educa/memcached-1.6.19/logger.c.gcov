        -:    0:Source:logger.c
        -:    0:Graph:logger.gcno
        -:    0:Data:logger.gcda
        -:    0:Runs:403
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:
        -:    3:#include <arpa/inet.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <string.h>
        -:    7:#include <errno.h>
        -:    8:#include <poll.h>
        -:    9:#include <ctype.h>
        -:   10:#include <stdarg.h>
        -:   11:
        -:   12:#if defined(__sun)
        -:   13:#include <atomic.h>
        -:   14:#endif
        -:   15:
        -:   16:#include "memcached.h"
        -:   17:#include "bipbuffer.h"
        -:   18:
        -:   19:#ifdef LOGGER_DEBUG
        -:   20:#define L_DEBUG(...) \
        -:   21:    do { \
        -:   22:        fprintf(stderr, __VA_ARGS__); \
        -:   23:    } while (0)
        -:   24:#else
        -:   25:#define L_DEBUG(...)
        -:   26:#endif
        -:   27:
        -:   28:
        -:   29:/* TODO: put this in a struct and ditch the global vars. */
        -:   30:static logger *logger_stack_head = NULL;
        -:   31:static logger *logger_stack_tail = NULL;
        -:   32:static unsigned int logger_count = 0;
        -:   33:static volatile int do_run_logger_thread = 1;
        -:   34:static pthread_t logger_tid;
        -:   35:pthread_mutex_t logger_stack_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   36:pthread_cond_t logger_stack_cond = PTHREAD_COND_INITIALIZER;
        -:   37:
        -:   38:pthread_key_t logger_key;
        -:   39:
        -:   40:#if !defined(HAVE_GCC_64ATOMICS) && !defined(__sun)
        -:   41:pthread_mutex_t logger_atomics_mutex = PTHREAD_MUTEX_INITIALIZER;
        -:   42:#endif
        -:   43:
        -:   44:#define WATCHER_LIMIT 20
        -:   45:logger_watcher *watchers[20];
        -:   46:struct pollfd watchers_pollfds[20];
        -:   47:int watcher_count = 0;
        -:   48:
        -:   49:#define WATCHER_ALL -1
        -:   50:static int logger_thread_poll_watchers(int force_poll, int watcher);
        -:   51:
        -:   52:/* helpers for logger_log */
        -:   53:
    #####:   54:static void _logger_log_text(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    #####:   55:    int reqlen = d->reqlen;
    #####:   56:    int total = vsnprintf((char *) e->data, reqlen, d->format, ap);
    #####:   57:    if (total <= 0) {
    #####:   58:        fprintf(stderr, "LOGGER: Failed to vsnprintf a text entry: (total) %d\n", total);
        -:   59:    }
    #####:   60:    e->size = total + 1; // null byte
    #####:   61:}
        -:   62:
        1:   63:static void _logger_log_evictions(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        1:   64:    item *it = (item *)entry;
        1:   65:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        -:   66:
       1*:   67:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
        1:   68:    le->latime = current_time - it->time;
        1:   69:    le->it_flags = it->it_flags;
        1:   70:    le->nkey = it->nkey;
        1:   71:    le->nbytes = it->nbytes;
        1:   72:    le->clsid = ITEM_clsid(it);
        1:   73:    memcpy(le->key, ITEM_key(it), it->nkey);
        1:   74:    e->size = sizeof(struct logentry_eviction) + le->nkey;
        1:   75:}
        -:   76:#ifdef EXTSTORE
    #####:   77:static void _logger_log_ext_write(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    #####:   78:    item *it = (item *)entry;
    #####:   79:    int ew_bucket = va_arg(ap, int);
        -:   80:
    #####:   81:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
    #####:   82:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
    #####:   83:    le->latime = current_time - it->time;
    #####:   84:    le->it_flags = it->it_flags;
    #####:   85:    le->nkey = it->nkey;
    #####:   86:    le->clsid = ITEM_clsid(it);
    #####:   87:    le->bucket = (uint8_t)ew_bucket;
    #####:   88:    memcpy(le->key, ITEM_key(it), it->nkey);
    #####:   89:    e->size = sizeof(struct logentry_ext_write) + le->nkey;
    #####:   90:}
        -:   91:#endif
        -:   92:// 0 == nf, 1 == found. 2 == flushed. 3 == expired.
        -:   93:// might be useful to store/print the flags an item has?
        -:   94:// could also collapse this and above code into an "item status" struct. wait
        -:   95:// for more endpoints to be written before making it generic, though.
    81094:   96:static void _logger_log_item_get(logentry *e, const entry_details *d, const void *entry, va_list ap) {
    81094:   97:    int was_found = va_arg(ap, int);
    81094:   98:    char *key = va_arg(ap, char *);
    81094:   99:    int nkey = va_arg(ap, int);
    81094:  100:    int nbytes = va_arg(ap, int);
    81094:  101:    uint8_t clsid = va_arg(ap, int);
    81094:  102:    int sfd = va_arg(ap, int);
        -:  103:
    81094:  104:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
    81094:  105:    le->was_found = was_found;
    81094:  106:    le->nkey = nkey;
    81094:  107:    le->nbytes = nbytes;
    81094:  108:    le->clsid = clsid;
    81094:  109:    memcpy(le->key, key, nkey);
    81094:  110:    le->sfd = sfd;
    81094:  111:    e->size = sizeof(struct logentry_item_get) + nkey;
    81094:  112:}
        -:  113:
        4:  114:static void _logger_log_item_store(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        4:  115:    enum store_item_type status = va_arg(ap, enum store_item_type);
        4:  116:    int comm = va_arg(ap, int);
        4:  117:    char *key = va_arg(ap, char *);
        4:  118:    int nkey = va_arg(ap, int);
        4:  119:    int nbytes = va_arg(ap, int);
        4:  120:    rel_time_t ttl = va_arg(ap, rel_time_t);
        4:  121:    uint8_t clsid = va_arg(ap, int);
        4:  122:    int sfd = va_arg(ap, int);
        -:  123:
        4:  124:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        4:  125:    le->status = status;
        4:  126:    le->cmd = comm;
        4:  127:    le->nkey = nkey;
        4:  128:    le->nbytes = nbytes;
        4:  129:    le->clsid = clsid;
        4:  130:    if (ttl != 0) {
    #####:  131:        le->ttl = ttl - current_time;
        -:  132:    } else {
        4:  133:        le->ttl = 0;
        -:  134:    }
        4:  135:    memcpy(le->key, key, nkey);
        4:  136:    le->sfd = sfd;
        4:  137:    e->size = sizeof(struct logentry_item_store) + nkey;
        4:  138:}
        -:  139:
        5:  140:static void _logger_log_conn_event(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        5:  141:    struct sockaddr_in6 *addr = va_arg(ap, struct sockaddr_in6 *);
        5:  142:    socklen_t addrlen = va_arg(ap, socklen_t);
        5:  143:    enum network_transport transport = va_arg(ap, enum network_transport);
        5:  144:    enum close_reasons reason = va_arg(ap, enum close_reasons);
        5:  145:    int sfd = va_arg(ap, int);
        -:  146:
        5:  147:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        -:  148:
        5:  149:    memcpy(&le->addr, addr, addrlen);
        5:  150:    le->sfd = sfd;
        5:  151:    le->transport = transport;
        5:  152:    le->reason = reason;
        5:  153:    e->size = sizeof(struct logentry_conn_event);
        5:  154:}
        -:  155:
        -:  156:/*************************
        -:  157: * Util functions used by the logger background thread
        -:  158: *************************/
        -:  159:
        5:  160:static int _logger_util_addr_endpoint(struct sockaddr_in6 *addr, char *rip,
        -:  161:        size_t riplen, unsigned short *rport) {
        5:  162:    memset(rip, 0, riplen);
        5:  163:    *rport = 0;
        -:  164:
        5:  165:    switch (addr->sin6_family) {
    #####:  166:        case AF_INET:
    #####:  167:            inet_ntop(AF_INET, &((struct sockaddr_in *) addr)->sin_addr,
        -:  168:                    rip, riplen - 1);
    #####:  169:            *rport = ntohs(((struct sockaddr_in *) addr)->sin_port);
    #####:  170:            break;
    #####:  171:        case AF_INET6:
    #####:  172:            inet_ntop(AF_INET6, &((struct sockaddr_in6 *) addr)->sin6_addr,
        -:  173:                    rip, riplen - 1);
    #####:  174:            *rport = ntohs(((struct sockaddr_in6 *) addr)->sin6_port);
    #####:  175:            break;
        -:  176:#ifndef DISABLE_UNIX_SOCKET
        -:  177:        // Connections on Unix socket transports have c->request_addr zeroed out.
        -:  178:        case AF_UNSPEC:
        -:  179:        case AF_UNIX:
        5:  180:            strncpy(rip, "unix", strlen("unix") + 1);
        -:  181:            break;
        -:  182:#endif // #ifndef DISABLE_UNIX_SOCKET
        -:  183:    }
        -:  184:
        5:  185:    return 0;
        -:  186:}
        -:  187:
        -:  188:/*************************
        -:  189: * Logger background thread functions. Aggregates per-worker buffers and
        -:  190: * writes to any watchers.
        -:  191: *************************/
        -:  192:
        -:  193:#define LOGGER_PARSE_SCRATCH 4096
        -:  194:
    #####:  195:static int _logger_parse_text(logentry *e, char *scratch) {
    #####:  196:    return snprintf(scratch, LOGGER_PARSE_SCRATCH, "ts=%lld.%d gid=%llu %s\n",
    #####:  197:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec,
    #####:  198:            (unsigned long long) e->gid, (char *) e->data);
        -:  199:}
        -:  200:
        4:  201:static int _logger_parse_ise(logentry *e, char *scratch) {
        4:  202:    int total;
        4:  203:    const char *cmd = "na";
        4:  204:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
        4:  205:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        4:  206:    const char * const status_map[] = {
        -:  207:        "not_stored", "stored", "exists", "not_found", "too_large", "no_memory" };
        4:  208:    const char * const cmd_map[] = {
        -:  209:        "null", "add", "set", "replace", "append", "prepend", "cas" };
        -:  210:
        4:  211:    if (le->cmd <= 6)
        4:  212:        cmd = cmd_map[le->cmd];
        -:  213:
        4:  214:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        4:  215:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  216:            "ts=%lld.%d gid=%llu type=item_store key=%s status=%s cmd=%s ttl=%u clsid=%u cfd=%d size=%d\n",
        4:  217:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        4:  218:            keybuf, status_map[le->status], cmd, le->ttl, le->clsid, le->sfd,
        4:  219:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
        4:  220:    return total;
        -:  221:}
        -:  222:
    81094:  223:static int _logger_parse_ige(logentry *e, char *scratch) {
    81094:  224:    int total;
    81094:  225:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
    81094:  226:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
    81094:  227:    const char * const was_found_map[] = {
        -:  228:        "not_found", "found", "flushed", "expired" };
        -:  229:
    81094:  230:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        2:  231:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  232:            "ts=%lld.%d gid=%llu type=item_get key=%s status=%s clsid=%u cfd=%d size=%d\n",
    81094:  233:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
    81094:  234:            keybuf, was_found_map[le->was_found], le->clsid, le->sfd,
    81094:  235:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
    81094:  236:    return total;
        -:  237:}
        -:  238:
        1:  239:static int _logger_parse_ee(logentry *e, char *scratch) {
        1:  240:    int total;
        1:  241:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
        1:  242:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        1:  243:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
        1:  244:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  245:            "ts=%lld.%d gid=%llu type=eviction key=%s fetch=%s ttl=%lld la=%d clsid=%u size=%d\n",
        1:  246:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        1:  247:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
        1:  248:            (long long int)le->exptime, le->latime, le->clsid,
        1:  249:            le->nbytes > 0 ? le->nbytes - 2 : 0); // CLRF
        -:  250:
        1:  251:    return total;
        -:  252:}
        -:  253:
        -:  254:#ifdef EXTSTORE
    #####:  255:static int _logger_parse_extw(logentry *e, char *scratch) {
    #####:  256:    int total;
    #####:  257:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
    #####:  258:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
    #####:  259:    uriencode(le->key, keybuf, le->nkey, KEY_MAX_URI_ENCODED_LENGTH);
    #####:  260:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  261:            "ts=%lld.%d gid=%llu type=extwrite key=%s fetch=%s ttl=%lld la=%d clsid=%u bucket=%u\n",
    #####:  262:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
    #####:  263:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
    #####:  264:            (long long int)le->exptime, le->latime, le->clsid, le->bucket);
        -:  265:
    #####:  266:    return total;
        -:  267:}
        -:  268:#endif
        -:  269:
        2:  270:static int _logger_parse_cne(logentry *e, char *scratch) {
        2:  271:    int total;
        2:  272:    unsigned short rport;
        2:  273:    char rip[64];
        2:  274:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        2:  275:    const char * const transport_map[] = { "local", "tcp", "udp" };
        -:  276:
        2:  277:    _logger_util_addr_endpoint(&le->addr, rip, sizeof(rip), &rport);
        -:  278:
        2:  279:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  280:            "ts=%lld.%d gid=%llu type=conn_new rip=%s rport=%hu transport=%s cfd=%d\n",
        2:  281:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        2:  282:            rip, rport, transport_map[le->transport], le->sfd);
        -:  283:
        2:  284:    return total;
        -:  285:}
        -:  286:
        3:  287:static int _logger_parse_cce(logentry *e, char *scratch) {
        3:  288:    int total;
        3:  289:    unsigned short rport;
        3:  290:    char rip[64];
        3:  291:    struct logentry_conn_event *le = (struct logentry_conn_event *) e->data;
        3:  292:    const char * const transport_map[] = { "local", "tcp", "udp" };
        3:  293:    const char * const reason_map[] = { "error", "normal", "idle_timeout", "shutdown" };
        -:  294:
        3:  295:    _logger_util_addr_endpoint(&le->addr, rip, sizeof(rip), &rport);
        -:  296:
        3:  297:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  298:            "ts=%lld.%d gid=%llu type=conn_close rip=%s rport=%hu transport=%s reason=%s cfd=%d\n",
        3:  299:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        3:  300:            rip, rport, transport_map[le->transport],
        3:  301:            reason_map[le->reason], le->sfd);
        -:  302:
        3:  303:    return total;
        -:  304:}
        -:  305:
        -:  306:#ifdef PROXY
        -:  307:// TODO (v2): the length caps here are all magic numbers. Haven't thought of
        -:  308:// something yet that I like better.
        -:  309:// Should at least make a define to the max log len (1024) and do some math
        -:  310:// here.
        -:  311:static void _logger_log_proxy_req(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        -:  312:    char *req = va_arg(ap, char *);
        -:  313:    int reqlen = va_arg(ap, uint32_t);
        -:  314:    long elapsed = va_arg(ap, long);
        -:  315:    unsigned short type = va_arg(ap, int);
        -:  316:    unsigned short code = va_arg(ap, int);
        -:  317:    int status = va_arg(ap, int);
        -:  318:    char *detail = va_arg(ap, char *);
        -:  319:    int dlen = va_arg(ap, int);
        -:  320:    char *be_name = va_arg(ap, char *);
        -:  321:    char *be_port = va_arg(ap, char *);
        -:  322:
        -:  323:    struct logentry_proxy_req *le = (void *)e->data;
        -:  324:    le->type = type;
        -:  325:    le->code = code;
        -:  326:    le->status = status;
        -:  327:    le->dlen = dlen;
        -:  328:    le->elapsed = elapsed;
        -:  329:    if (be_name && be_port) {
        -:  330:        le->be_namelen = strlen(be_name);
        -:  331:        le->be_portlen = strlen(be_port);
        -:  332:    } else {
        -:  333:        le->be_namelen = 0;
        -:  334:        le->be_portlen = 0;
        -:  335:    }
        -:  336:    char *data = le->data;
        -:  337:    if (req[reqlen-2] == '\r') {
        -:  338:        reqlen -= 2;
        -:  339:    } else {
        -:  340:        reqlen--;
        -:  341:    }
        -:  342:    if (reqlen > 300) {
        -:  343:        reqlen = 300;
        -:  344:    }
        -:  345:    if (dlen > 150) {
        -:  346:        dlen = 150;
        -:  347:    }
        -:  348:    // be_namelen and be_portlen can't be longer than 255+6
        -:  349:    le->reqlen = reqlen;
        -:  350:    memcpy(data, req, reqlen);
        -:  351:    data += reqlen;
        -:  352:    memcpy(data, detail, dlen);
        -:  353:    data += dlen;
        -:  354:    memcpy(data, be_name, le->be_namelen);
        -:  355:    data += le->be_namelen;
        -:  356:    memcpy(data, be_port, le->be_portlen);
        -:  357:    e->size = sizeof(struct logentry_proxy_req) + reqlen + dlen + le->be_namelen + le->be_portlen;
        -:  358:}
        -:  359:
        -:  360:static int _logger_parse_prx_req(logentry *e, char *scratch) {
        -:  361:    int total;
        -:  362:    struct logentry_proxy_req *le = (void *)e->data;
        -:  363:
        -:  364:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  365:            "ts=%lld.%d gid=%llu type=proxy_req elapsed=%lu type=%d code=%d status=%d be=%.*s:%.*s detail=%.*s req=%.*s\n",
        -:  366:            (long long int) e->tv.tv_sec, (int) e->tv.tv_usec, (unsigned long long) e->gid,
        -:  367:            le->elapsed, le->type, le->code, le->status,
        -:  368:            (int)le->be_namelen, le->data+le->reqlen+le->dlen,
        -:  369:            (int)le->be_portlen, le->data+le->reqlen+le->dlen+le->be_namelen, // fml.
        -:  370:            (int)le->dlen, le->data+le->reqlen, (int)le->reqlen, le->data
        -:  371:            );
        -:  372:    return total;
        -:  373:}
        -:  374:
        -:  375:#define MAX_RBUF_READ 100
        -:  376:static void _logger_log_proxy_errbe(logentry *e, const entry_details *d, const void *entry, va_list ap) {
        -:  377:    char *errmsg = va_arg(ap, char *);
        -:  378:    char *be_name = va_arg(ap, char *);
        -:  379:    char *be_port = va_arg(ap, char *);
        -:  380:    int be_depth = va_arg(ap, int);
        -:  381:    char *be_rbuf = va_arg(ap, char *);
        -:  382:    int be_rbuflen = va_arg(ap, int);
        -:  383:
        -:  384:    struct logentry_proxy_errbe *le = (void *)e->data;
        -:  385:    le->be_depth = be_depth;
        -:  386:    le->errlen = strlen(errmsg);
        -:  387:    if (be_name && be_port) {
        -:  388:        le->be_namelen = strlen(be_name);
        -:  389:        le->be_portlen = strlen(be_port);
        -:  390:    }
        -:  391:
        -:  392:    le->be_rbuflen = be_rbuflen;
        -:  393:    if (be_rbuflen > MAX_RBUF_READ) {
        -:  394:        le->be_rbuflen = MAX_RBUF_READ;
        -:  395:    }
        -:  396:
        -:  397:    char *data = le->data;
        -:  398:    memcpy(data, errmsg, le->errlen);
        -:  399:    data += le->errlen;
        -:  400:    memcpy(data, be_name, le->be_namelen);
        -:  401:    data += le->be_namelen;
        -:  402:    memcpy(data, be_port, le->be_portlen);
        -:  403:    data += le->be_portlen;
        -:  404:    memcpy(data, be_rbuf, le->be_rbuflen);
        -:  405:    data += le->be_rbuflen;
        -:  406:
        -:  407:    e->size = sizeof(struct logentry_proxy_errbe) + (data - le->data);
        -:  408:}
        -:  409:
        -:  410:static int _logger_parse_prx_errbe(logentry *e, char *scratch) {
        -:  411:    int total;
        -:  412:    char rbuf[MAX_RBUF_READ * 3]; // x 3 for worst case URI encoding.
        -:  413:    struct logentry_proxy_errbe *le = (void *)e->data;
        -:  414:    char *data = le->data;
        -:  415:    char *errmsg = data;
        -:  416:    data += le->errlen;
        -:  417:    char *be_name = data;
        -:  418:    data += le->be_namelen;
        -:  419:    char *be_port = data;
        -:  420:    data += le->be_portlen;
        -:  421:    char *be_rbuf = data;
        -:  422:
        -:  423:    uriencode(be_rbuf, rbuf, le->be_rbuflen, MAX_RBUF_READ * 3);
        -:  424:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  425:            "ts=%lld.%d gid=%llu type=proxy_backend error=%.*s name=%.*s port=%.*s depth=%d rbuf=%s\n",
        -:  426:            (long long int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        -:  427:            (int)le->errlen, errmsg, (int)le->be_namelen, be_name,
        -:  428:            (int)le->be_portlen, be_port, le->be_depth, rbuf);
        -:  429:
        -:  430:    return total;
        -:  431:}
        -:  432:#endif
        -:  433:
        -:  434:/* Should this go somewhere else? */
        -:  435:static const entry_details default_entries[] = {
        -:  436:    [LOGGER_ASCII_CMD] = {512, LOG_RAWCMDS, _logger_log_text, _logger_parse_text, "<%d %s"},
        -:  437:    [LOGGER_EVICTION] = {512, LOG_EVICTIONS, _logger_log_evictions, _logger_parse_ee, NULL},
        -:  438:    [LOGGER_ITEM_GET] = {512, LOG_FETCHERS, _logger_log_item_get, _logger_parse_ige, NULL},
        -:  439:    [LOGGER_ITEM_STORE] = {512, LOG_MUTATIONS, _logger_log_item_store, _logger_parse_ise, NULL},
        -:  440:    [LOGGER_CRAWLER_STATUS] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  441:        "type=lru_crawler crawler=%d lru=%s low_mark=%llu next_reclaims=%llu since_run=%u next_run=%d elapsed=%u examined=%llu reclaimed=%llu"
        -:  442:    },
        -:  443:    [LOGGER_SLAB_MOVE] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  444:        "type=slab_move src=%d dst=%d"
        -:  445:    },
        -:  446:    [LOGGER_CONNECTION_NEW] = {512, LOG_CONNEVENTS, _logger_log_conn_event, _logger_parse_cne, NULL},
        -:  447:    [LOGGER_CONNECTION_CLOSE] = {512, LOG_CONNEVENTS, _logger_log_conn_event, _logger_parse_cce, NULL},
        -:  448:#ifdef EXTSTORE
        -:  449:    [LOGGER_EXTSTORE_WRITE] = {512, LOG_EVICTIONS, _logger_log_ext_write, _logger_parse_extw, NULL},
        -:  450:    [LOGGER_COMPACT_START] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  451:        "type=compact_start id=%lu version=%llu"
        -:  452:    },
        -:  453:    [LOGGER_COMPACT_ABORT] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  454:        "type=compact_abort id=%lu"
        -:  455:    },
        -:  456:    [LOGGER_COMPACT_READ_START] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  457:        "type=compact_read_start id=%lu offset=%llu"
        -:  458:    },
        -:  459:    [LOGGER_COMPACT_READ_END] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  460:        "type=compact_read_end id=%lu offset=%llu rescues=%lu lost=%lu skipped=%lu"
        -:  461:    },
        -:  462:    [LOGGER_COMPACT_END] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  463:        "type=compact_end id=%lu"
        -:  464:    },
        -:  465:    [LOGGER_COMPACT_FRAGINFO] = {512, LOG_SYSEVENTS, _logger_log_text, _logger_parse_text,
        -:  466:        "type=compact_fraginfo ratio=%.2f bytes=%lu"
        -:  467:    },
        -:  468:#endif
        -:  469:#ifdef PROXY
        -:  470:    [LOGGER_PROXY_CONFIG] = {512, LOG_PROXYEVENTS, _logger_log_text, _logger_parse_text,
        -:  471:        "type=proxy_conf status=%s"
        -:  472:    },
        -:  473:    [LOGGER_PROXY_REQ] = {1024, LOG_PROXYREQS, _logger_log_proxy_req, _logger_parse_prx_req, NULL},
        -:  474:    [LOGGER_PROXY_ERROR] = {512, LOG_PROXYEVENTS, _logger_log_text, _logger_parse_text,
        -:  475:        "type=proxy_error msg=%s"
        -:  476:    },
        -:  477:    [LOGGER_PROXY_USER] = {512, LOG_PROXYUSER, _logger_log_text, _logger_parse_text,
        -:  478:        "type=proxy_user msg=%s"
        -:  479:    },
        -:  480:    [LOGGER_PROXY_BE_ERROR] = {512, LOG_PROXYEVENTS, _logger_log_proxy_errbe, _logger_parse_prx_errbe,
        -:  481:        NULL
        -:  482:    },
        -:  483:
        -:  484:#endif
        -:  485:};
        -:  486:
        -:  487:/*************************
        -:  488: * Util functions shared between bg thread and workers
        -:  489: *************************/
        -:  490:
        -:  491:/* Logger GID's can be used by watchers to put logs back into strict order
        -:  492: */
        -:  493:static uint64_t logger_gid = 0;
    81115:  494:uint64_t logger_get_gid(void) {
        -:  495:#ifdef HAVE_GCC_64ATOMICS
    81115:  496:    return __sync_add_and_fetch(&logger_gid, 1);
        -:  497:#elif defined(__sun)
        -:  498:    return atomic_inc_64_nv(&logger_gid);
        -:  499:#else
        -:  500:    mutex_lock(&logger_atomics_mutex);
        -:  501:    uint64_t res = ++logger_gid;
        -:  502:    mutex_unlock(&logger_atomics_mutex);
        -:  503:    return res;
        -:  504:#endif
        -:  505:}
        -:  506:
        1:  507:void logger_set_gid(uint64_t gid) {
        -:  508:#ifdef HAVE_GCC_64ATOMICS
        1:  509:    __sync_add_and_fetch(&logger_gid, gid);
        -:  510:#elif defined(__sun)
        -:  511:    atomic_add_64(&logger_gid);
        -:  512:#else
        -:  513:    mutex_lock(&logger_atomics_mutex);
        -:  514:    logger_gid = gid;
        -:  515:    mutex_unlock(&logger_atomics_mutex);
        -:  516:#endif
        1:  517:}
        -:  518:
        -:  519:/* TODO: genericize lists. would be nice to import queue.h if the impact is
        -:  520: * studied... otherwise can just write a local one.
        -:  521: */
        -:  522:/* Add to the list of threads with a logger object */
      611:  523:static void logger_link_q(logger *l) {
      611:  524:    pthread_mutex_lock(&logger_stack_lock);
     611*:  525:    assert(l != logger_stack_head);
        -:  526:
      611:  527:    l->prev = 0;
      611:  528:    l->next = logger_stack_head;
      611:  529:    if (l->next) l->next->prev = l;
      611:  530:    logger_stack_head = l;
      611:  531:    if (logger_stack_tail == 0) logger_stack_tail = l;
      611:  532:    logger_count++;
      611:  533:    pthread_mutex_unlock(&logger_stack_lock);
      611:  534:    return;
        -:  535:}
        -:  536:
        -:  537:/* Remove from the list of threads with a logger object */
        -:  538:/*static void logger_unlink_q(logger *l) {
        -:  539:    pthread_mutex_lock(&logger_stack_lock);
        -:  540:    if (logger_stack_head == l) {
        -:  541:        assert(l->prev == 0);
        -:  542:        logger_stack_head = l->next;
        -:  543:    }
        -:  544:    if (logger_stack_tail == l) {
        -:  545:        assert(l->next == 0);
        -:  546:        logger_stack_tail = l->prev;
        -:  547:    }
        -:  548:    assert(l->next != l);
        -:  549:    assert(l->prev != l);
        -:  550:
        -:  551:    if (l->next) l->next->prev = l->prev;
        -:  552:    if (l->prev) l->prev->next = l->next;
        -:  553:    logger_count--;
        -:  554:    pthread_mutex_unlock(&logger_stack_lock);
        -:  555:    return;
        -:  556:}*/
        -:  557:
        -:  558:/* Called with logger stack locked.
        -:  559: * Iterates over every watcher collecting enabled flags.
        -:  560: */
       19:  561:static void logger_set_flags(void) {
       19:  562:    logger *l = NULL;
       19:  563:    int x = 0;
       19:  564:    uint16_t f = 0; /* logger eflags */
        -:  565:
      399:  566:    for (x = 0; x < WATCHER_LIMIT; x++) {
      380:  567:        logger_watcher *w = watchers[x];
      380:  568:        if (w == NULL)
      354:  569:            continue;
        -:  570:
       26:  571:        f |= w->eflags;
        -:  572:    }
      114:  573:    for (l = logger_stack_head; l != NULL; l=l->next) {
       95:  574:        pthread_mutex_lock(&l->mutex);
       95:  575:        l->eflags = f;
       95:  576:        pthread_mutex_unlock(&l->mutex);
        -:  577:    }
       19:  578:    return;
        -:  579:}
        -:  580:
        -:  581:/* Completes rendering of log line. */
        -:  582:static enum logger_parse_entry_ret logger_thread_parse_entry(logentry *e, struct logger_stats *ls,
        -:  583:        char *scratch, int *scratch_len) {
        -:  584:    int total = 0;
        -:  585:    const entry_details *d = &default_entries[e->event];
        -:  586:    assert(d->parse_cb != NULL);
        -:  587:    total = d->parse_cb(e, scratch);
        -:  588:
        -:  589:    if (total >= LOGGER_PARSE_SCRATCH || total <= 0) {
        -:  590:        L_DEBUG("LOGGER: Failed to flatten log entry!\n");
        -:  591:        return LOGGER_PARSE_ENTRY_FAILED;
        -:  592:    } else {
        -:  593:        *scratch_len = total;
        -:  594:    }
        -:  595:
        -:  596:    return LOGGER_PARSE_ENTRY_OK;
        -:  597:}
        -:  598:
        -:  599:/* Writes flattened entry to available watchers */
        -:  600:static void logger_thread_write_entry(logentry *e, struct logger_stats *ls,
        -:  601:        char *scratch, int scratch_len) {
        -:  602:    int x, total;
        -:  603:    /* Write the line into available watchers with matching flags */
        -:  604:    for (x = 0; x < WATCHER_LIMIT; x++) {
        -:  605:        logger_watcher *w = watchers[x];
        -:  606:        char *skip_scr = NULL;
        -:  607:        if (w == NULL || (e->eflags & w->eflags) == 0 || (e->gid < w->min_gid))
        -:  608:            continue;
        -:  609:
        -:  610:         /* Avoid poll()'ing constantly when buffer is full by resetting a
        -:  611:         * flag periodically.
        -:  612:         */
        -:  613:        while (!w->failed_flush &&
        -:  614:                (skip_scr = (char *) bipbuf_request(w->buf, scratch_len + 128)) == NULL) {
        -:  615:            if (logger_thread_poll_watchers(0, x) <= 0) {
        -:  616:                L_DEBUG("LOGGER: Watcher had no free space for line of size (%d)\n", scratch_len + 128);
        -:  617:                w->failed_flush = true;
        -:  618:            }
        -:  619:        }
        -:  620:
        -:  621:        if (w->failed_flush) {
        -:  622:            L_DEBUG("LOGGER: Fast skipped for watcher [%d] due to failed_flush\n", w->sfd);
        -:  623:            w->skipped++;
        -:  624:            ls->watcher_skipped++;
        -:  625:            continue;
        -:  626:        }
        -:  627:
        -:  628:        if (w->skipped > 0) {
        -:  629:            total = snprintf(skip_scr, 128, "skipped=%llu\n", (unsigned long long) w->skipped);
        -:  630:            if (total >= 128 || total <= 0) {
        -:  631:                L_DEBUG("LOGGER: Failed to flatten skipped message into watcher [%d]\n", w->sfd);
        -:  632:                w->skipped++;
        -:  633:                ls->watcher_skipped++;
        -:  634:                continue;
        -:  635:            }
        -:  636:            bipbuf_push(w->buf, total);
        -:  637:            w->skipped = 0;
        -:  638:        }
        -:  639:        /* Can't fail because bipbuf_request succeeded. */
        -:  640:        bipbuf_offer(w->buf, (unsigned char *) scratch, scratch_len);
        -:  641:        ls->watcher_sent++;
        -:  642:    }
        -:  643:}
        -:  644:
        -:  645:/* Called with logger stack locked.
        -:  646: * Releases every chunk associated with a watcher and closes the connection.
        -:  647: * We can't presently send a connection back to the worker for further
        -:  648: * processing.
        -:  649: */
        9:  650:static void logger_thread_close_watcher(logger_watcher *w) {
        9:  651:    L_DEBUG("LOGGER: Closing dead watcher\n");
        9:  652:    watchers[w->id] = NULL;
        9:  653:    sidethread_conn_close(w->c);
        9:  654:    watcher_count--;
        9:  655:    bipbuf_free(w->buf);
        9:  656:    free(w);
        9:  657:    logger_set_flags();
        9:  658:}
        -:  659:
        -:  660:/* Reads a particular worker thread's available bipbuf bytes. Parses each log
        -:  661: * entry into the watcher buffers.
        -:  662: */
    30015:  663:static int logger_thread_read(logger *l, struct logger_stats *ls) {
    30015:  664:    unsigned int size;
    30015:  665:    unsigned int pos = 0;
    30015:  666:    unsigned char *data;
    30015:  667:    char scratch[LOGGER_PARSE_SCRATCH];
    30015:  668:    logentry *e;
    30015:  669:    pthread_mutex_lock(&l->mutex);
    30015:  670:    data = bipbuf_peek_all(l->buf, &size);
    30015:  671:    pthread_mutex_unlock(&l->mutex);
        -:  672:
    30015:  673:    if (data == NULL) {
        -:  674:        return 0;
        -:  675:    }
        -:  676:    L_DEBUG("LOGGER: Got %d bytes from bipbuffer\n", size);
        -:  677:
        -:  678:    /* parse buffer */
    85567:  679:    while (pos < size && watcher_count > 0) {
    81104:  680:        enum logger_parse_entry_ret ret;
    81104:  681:        int scratch_len = 0;
    81104:  682:        e = (logentry *) (data + pos);
    81104:  683:        ret = logger_thread_parse_entry(e, ls, scratch, &scratch_len);
    81104:  684:        if (ret != LOGGER_PARSE_ENTRY_OK) {
        -:  685:            /* TODO: stats counter */
    #####:  686:            fprintf(stderr, "LOGGER: Failed to parse log entry\n");
        -:  687:        } else {
    81104:  688:            logger_thread_write_entry(e, ls, scratch, scratch_len);
        -:  689:        }
    81104:  690:        pos += sizeof(logentry) + e->size + e->pad;
        -:  691:    }
    4463*:  692:    assert(pos <= size);
        -:  693:
     4463:  694:    pthread_mutex_lock(&l->mutex);
     4463:  695:    data = bipbuf_poll(l->buf, size);
     4463:  696:    ls->worker_written += l->written;
     4463:  697:    ls->worker_dropped += l->dropped;
     4463:  698:    l->written = 0;
     4463:  699:    l->dropped = 0;
     4463:  700:    pthread_mutex_unlock(&l->mutex);
     4463:  701:    if (data == NULL) {
    #####:  702:        fprintf(stderr, "LOGGER: unexpectedly couldn't advance buf pointer\n");
    #####:  703:        assert(0);
        -:  704:    }
     4463:  705:    return size; /* maybe the count of objects iterated? */
        -:  706:}
        -:  707:
        -:  708:/* Since the event loop code isn't reusable without a refactor, and we have a
        -:  709: * limited number of potential watchers, we run our own poll loop.
        -:  710: * This calls poll() unnecessarily during write flushes, should be possible to
        -:  711: * micro-optimize later.
        -:  712: *
        -:  713: * This flushes buffers attached to watchers, iterating through the bytes set
        -:  714: * to each worker. Also checks for readability in case client connection was
        -:  715: * closed.
        -:  716: *
        -:  717: * Allows a specific watcher to be flushed (if buf full)
        -:  718: */
    10439:  719:static int logger_thread_poll_watchers(int force_poll, int watcher) {
    10439:  720:    int x;
    10439:  721:    int nfd = 0;
    10439:  722:    unsigned char *data;
    10439:  723:    unsigned int data_size = 0;
    10439:  724:    int flushed = 0;
        -:  725:
   219219:  726:    for (x = 0; x < WATCHER_LIMIT; x++) {
   208780:  727:        logger_watcher *w = watchers[x];
   208780:  728:        if (w == NULL || (watcher != WATCHER_ALL && x != watcher))
   198312:  729:            continue;
        -:  730:
    10468:  731:        data = bipbuf_peek_all(w->buf, &data_size);
    10468:  732:        if (data != NULL) {
    10346:  733:            watchers_pollfds[nfd].fd = w->sfd;
    10346:  734:            watchers_pollfds[nfd].events = POLLOUT;
    10346:  735:            nfd++;
      122:  736:        } else if (force_poll) {
      122:  737:            watchers_pollfds[nfd].fd = w->sfd;
      122:  738:            watchers_pollfds[nfd].events = POLLIN;
      122:  739:            nfd++;
        -:  740:        }
        -:  741:        /* This gets set after a call to poll, and should be used to gate on
        -:  742:         * calling poll again.
        -:  743:         */
    10468:  744:        w->failed_flush = false;
        -:  745:    }
        -:  746:
    10439:  747:    if (nfd == 0)
        -:  748:        return 0;
        -:  749:
        -:  750:    //L_DEBUG("LOGGER: calling poll() [data_size: %d]\n", data_size);
    10437:  751:    int ret = poll(watchers_pollfds, nfd, 0);
        -:  752:
    10437:  753:    if (ret < 0) {
    #####:  754:        perror("something failed with logger thread watcher fd polling");
    #####:  755:        return -1;
        -:  756:    }
        -:  757:
        -:  758:    nfd = 0;
   219177:  759:    for (x = 0; x < WATCHER_LIMIT; x++) {
   208740:  760:        logger_watcher *w = watchers[x];
   208740:  761:        if (w == NULL || (watcher != WATCHER_ALL && x != watcher))
   198272:  762:            continue;
        -:  763:
    10468:  764:        data_size = 0;
        -:  765:        /* Early detection of a disconnect. Otherwise we have to wait until
        -:  766:         * the next write
        -:  767:         */
    10468:  768:        if (watchers_pollfds[nfd].revents & POLLIN) {
        8:  769:            char buf[1];
        8:  770:            int res = ((conn*)w->c)->read(w->c, buf, 1);
        8:  771:            if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
        8:  772:                L_DEBUG("LOGGER: watcher closed remotely\n");
        8:  773:                logger_thread_close_watcher(w);
        8:  774:                nfd++;
        8:  775:                continue;
        -:  776:            }
        -:  777:        }
    10460:  778:        if ((data = bipbuf_peek_all(w->buf, &data_size)) != NULL) {
    10346:  779:            if (watchers_pollfds[nfd].revents & (POLLHUP|POLLERR)) {
        1:  780:                L_DEBUG("LOGGER: watcher closed during poll() call\n");
        1:  781:                logger_thread_close_watcher(w);
    10345:  782:            } else if (watchers_pollfds[nfd].revents & POLLOUT) {
       50:  783:                int total = 0;
        -:  784:
        -:  785:                /* We can write a bit. */
       50:  786:                switch (w->t) {
    #####:  787:                    case LOGGER_WATCHER_STDERR:
    #####:  788:                        total = fwrite(data, 1, data_size, stderr);
    #####:  789:                        break;
       50:  790:                    case LOGGER_WATCHER_CLIENT:
       50:  791:                        total = ((conn*)w->c)->write(w->c, data, data_size);
       50:  792:                        break;
        -:  793:                }
        -:  794:
        -:  795:                L_DEBUG("LOGGER: poll() wrote %d to %d (data_size: %d) (bipbuf_used: %d)\n", total, w->sfd,
       50:  796:                        data_size, bipbuf_used(w->buf));
       50:  797:                if (total == -1) {
    #####:  798:                    if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  799:                        logger_thread_close_watcher(w);
        -:  800:                    }
        -:  801:                    L_DEBUG("LOGGER: watcher hit EAGAIN\n");
       50:  802:                } else if (total == 0) {
    #####:  803:                    logger_thread_close_watcher(w);
        -:  804:                } else {
       50:  805:                    bipbuf_poll(w->buf, total);
       50:  806:                    flushed += total;
        -:  807:                }
        -:  808:            }
        -:  809:        }
    10460:  810:        nfd++;
        -:  811:    }
        -:  812:    return flushed;
        -:  813:}
        -:  814:
     6003:  815:static void logger_thread_flush_stats(struct logger_stats *ls) {
     6003:  816:    STATS_LOCK();
     6003:  817:    stats.log_worker_dropped  += ls->worker_dropped;
     6003:  818:    stats.log_worker_written  += ls->worker_written;
     6003:  819:    stats.log_watcher_skipped += ls->watcher_skipped;
     6003:  820:    stats.log_watcher_sent    += ls->watcher_sent;
     6003:  821:    stats_state.log_watchers   = ls->watcher_count;
     6003:  822:    STATS_UNLOCK();
     6003:  823:}
        -:  824:
        -:  825:#define MAX_LOGGER_SLEEP 1000000
        -:  826:#define MIN_LOGGER_SLEEP 1000
        -:  827:
        -:  828:/* Primary logger thread routine */
      116:  829:static void *logger_thread(void *arg) {
      116:  830:    useconds_t to_sleep = MIN_LOGGER_SLEEP;
      116:  831:    L_DEBUG("LOGGER: Starting logger thread\n");
        -:  832:    // TODO: If we ever have item references in the logger code, will need to
        -:  833:    // ensure everything is dequeued before stopping the thread.
     6119:  834:    while (do_run_logger_thread) {
     6117:  835:        int found_logs = 0;
     6117:  836:        logger *l;
     6117:  837:        struct logger_stats ls;
     6117:  838:        memset(&ls, 0, sizeof(struct logger_stats));
        -:  839:
        -:  840:        /* only sleep if we're *above* the minimum */
     6117:  841:        if (to_sleep > MIN_LOGGER_SLEEP)
     1544:  842:            usleep(to_sleep);
        -:  843:
        -:  844:        /* Call function to iterate each logger. */
     6116:  845:        pthread_mutex_lock(&logger_stack_lock);
     6116:  846:        if (watcher_count == 0) {
        -:  847:            // Not bothering to loop on the condition here since it's fine to
        -:  848:            // walk through with zero watchers.
      120:  849:            pthread_cond_wait(&logger_stack_cond, &logger_stack_lock);
        -:  850:        }
    36018:  851:        for (l = logger_stack_head; l != NULL; l=l->next) {
        -:  852:            /* lock logger, call function to manipulate it */
    30015:  853:            found_logs += logger_thread_read(l, &ls);
        -:  854:        }
        -:  855:
     6003:  856:        logger_thread_poll_watchers(1, WATCHER_ALL);
        -:  857:
        -:  858:        /* capture the current count within mutual exclusion of the lock */
     6003:  859:        ls.watcher_count = watcher_count;
        -:  860:
     6003:  861:        pthread_mutex_unlock(&logger_stack_lock);
        -:  862:
        -:  863:        /* TODO: abstract into a function and share with lru_crawler */
     6003:  864:        if (!found_logs) {
     1540:  865:            if (to_sleep < MAX_LOGGER_SLEEP)
     1540:  866:                to_sleep += to_sleep / 8;
     1540:  867:            if (to_sleep > MAX_LOGGER_SLEEP)
        -:  868:                to_sleep = MAX_LOGGER_SLEEP;
        -:  869:        } else {
     4463:  870:            to_sleep /= 2;
     4463:  871:            if (to_sleep < MIN_LOGGER_SLEEP)
     4457:  872:                to_sleep = MIN_LOGGER_SLEEP;
        -:  873:        }
     6003:  874:        logger_thread_flush_stats(&ls);
        -:  875:    }
        -:  876:
        2:  877:    return NULL;
        -:  878:}
        -:  879:
      116:  880:static int start_logger_thread(void) {
      116:  881:    int ret;
      116:  882:    do_run_logger_thread = 1;
      116:  883:    if ((ret = pthread_create(&logger_tid, NULL,
        -:  884:                              logger_thread, NULL)) != 0) {
    #####:  885:        fprintf(stderr, "Can't start logger thread: %s\n", strerror(ret));
    #####:  886:        return -1;
        -:  887:    }
      116:  888:    thread_setname(logger_tid, "mc-log");
      116:  889:    return 0;
        -:  890:}
        -:  891:
        2:  892:static int stop_logger_thread(void) {
        -:  893:    // Guarantees that the logger thread is waiting on 'logger_stack_cond'
        -:  894:    // before we signal it.
        2:  895:    pthread_mutex_lock(&logger_stack_lock);
        2:  896:    do_run_logger_thread = 0;
        2:  897:    pthread_cond_signal(&logger_stack_cond);
        2:  898:    pthread_mutex_unlock(&logger_stack_lock);
        2:  899:    pthread_join(logger_tid, NULL);
        2:  900:    return 0;
        -:  901:}
        -:  902:
        -:  903:/*************************
        -:  904: * Public functions for submitting logs and starting loggers from workers.
        -:  905: *************************/
        -:  906:
        -:  907:/* Global logger thread start/init */
      116:  908:void logger_init(void) {
        -:  909:    /* TODO: auto destructor when threads exit */
        -:  910:    /* TODO: error handling */
        -:  911:
        -:  912:    /* init stack for iterating loggers */
      116:  913:    logger_stack_head = 0;
      116:  914:    logger_stack_tail = 0;
      116:  915:    pthread_key_create(&logger_key, NULL);
        -:  916:
      116:  917:    if (start_logger_thread() != 0) {
    #####:  918:        abort();
        -:  919:    }
        -:  920:
        -:  921:    /* This is what adding a STDERR watcher looks like. should replace old
        -:  922:     * "verbose" settings. */
        -:  923:    //logger_add_watcher(NULL, 0);
      116:  924:    return;
        -:  925:}
        -:  926:
        2:  927:void logger_stop(void) {
        2:  928:    stop_logger_thread();
        2:  929:}
        -:  930:
        -:  931:/* called *from* the thread using a logger.
        -:  932: * initializes the per-thread bipbuf, links it into the list of loggers
        -:  933: */
      611:  934:logger *logger_create(void) {
      611:  935:    L_DEBUG("LOGGER: Creating and linking new logger instance\n");
      611:  936:    logger *l = calloc(1, sizeof(logger));
      611:  937:    if (l == NULL) {
        -:  938:        return NULL;
        -:  939:    }
        -:  940:
      611:  941:    l->buf = bipbuf_new(settings.logger_buf_size);
      611:  942:    if (l->buf == NULL) {
    #####:  943:        free(l);
    #####:  944:        return NULL;
        -:  945:    }
        -:  946:
      611:  947:    l->entry_map = default_entries;
        -:  948:
      611:  949:    pthread_mutex_init(&l->mutex, NULL);
      611:  950:    pthread_setspecific(logger_key, l);
        -:  951:
        -:  952:    /* add to list of loggers */
      611:  953:    logger_link_q(l);
      611:  954:    return l;
        -:  955:}
        -:  956:
        -:  957:/* Public function for logging an entry.
        -:  958: * Tries to encapsulate as much of the formatting as possible to simplify the
        -:  959: * caller's code.
        -:  960: */
    88020:  961:enum logger_ret_type logger_log(logger *l, const enum log_entry_type event, const void *entry, ...) {
    88020:  962:    bipbuf_t *buf = l->buf;
    88020:  963:    bool nospace = false;
    88020:  964:    va_list ap;
    88020:  965:    logentry *e;
        -:  966:
    88020:  967:    const entry_details *d = &l->entry_map[event];
    88020:  968:    int reqlen = d->reqlen;
        -:  969:
    88020:  970:    pthread_mutex_lock(&l->mutex);
        -:  971:    /* Request a maximum length of data to write to */
    88020:  972:    e = (logentry *) bipbuf_request(buf, (sizeof(logentry) + reqlen));
    88020:  973:    if (e == NULL) {
     6916:  974:        l->dropped++;
     6916:  975:        pthread_mutex_unlock(&l->mutex);
     6916:  976:        return LOGGER_RET_NOSPACE;
        -:  977:    }
    81104:  978:    e->event = event;
    81104:  979:    e->pad = 0;
    81104:  980:    e->gid = logger_get_gid();
        -:  981:    /* TODO: Could pass this down as an argument now that we're using
        -:  982:     * LOGGER_LOG() macro.
        -:  983:     */
    81104:  984:    e->eflags = d->eflags;
        -:  985:    /* Noting time isn't optional. A feature may be added to avoid rendering
        -:  986:     * time and/or gid to a logger.
        -:  987:     */
    81104:  988:    gettimeofday(&e->tv, NULL);
        -:  989:
    81104:  990:    va_start(ap, entry);
    81104:  991:    d->log_cb(e, d, entry, ap);
    81104:  992:    va_end(ap);
        -:  993:
        -:  994:#ifdef NEED_ALIGN
        -:  995:    /* Need to ensure *next* request is aligned. */
        -:  996:    if (sizeof(logentry) + e->size % 8 != 0) {
        -:  997:        e->pad = 8 - (sizeof(logentry) + e->size % 8);
        -:  998:    }
        -:  999:#endif
        -: 1000:
        -: 1001:    /* Push pointer forward by the actual amount required */
    81104: 1002:    if (bipbuf_push(buf, (sizeof(logentry) + e->size + e->pad)) == 0) {
    #####: 1003:        fprintf(stderr, "LOGGER: Failed to bipbuf push a text entry\n");
    #####: 1004:        pthread_mutex_unlock(&l->mutex);
    #####: 1005:        return LOGGER_RET_ERR;
        -: 1006:    }
    81104: 1007:    l->written++;
        -: 1008:    L_DEBUG("LOGGER: Requested %d bytes, wrote %lu bytes\n", reqlen,
    81104: 1009:            (sizeof(logentry) + e->size));
        -: 1010:
    81104: 1011:    pthread_mutex_unlock(&l->mutex);
        -: 1012:
    81104: 1013:    if (nospace) {
        -: 1014:        return LOGGER_RET_NOSPACE;
        -: 1015:    } else {
    81104: 1016:        return LOGGER_RET_OK;
        -: 1017:    }
        -: 1018:}
        -: 1019:
        -: 1020:/* Passes a client connection socket from a primary worker thread to the
        -: 1021: * logger thread. Caller *must* event_del() the client before handing it over.
        -: 1022: * Presently there's no way to hand the client back to the worker thread.
        -: 1023: */
       10: 1024:enum logger_add_watcher_ret logger_add_watcher(void *c, const int sfd, uint16_t f) {
       10: 1025:    int x;
       10: 1026:    logger_watcher *w = NULL;
       10: 1027:    pthread_mutex_lock(&logger_stack_lock);
       10: 1028:    if (watcher_count >= WATCHER_LIMIT) {
    #####: 1029:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1030:        return LOGGER_ADD_WATCHER_TOO_MANY;
        -: 1031:    }
        -: 1032:
       18: 1033:    for (x = 0; x < WATCHER_LIMIT-1; x++) {
       18: 1034:        if (watchers[x] == NULL)
        -: 1035:            break;
        -: 1036:    }
        -: 1037:
       10: 1038:    w = calloc(1, sizeof(logger_watcher));
       10: 1039:    if (w == NULL) {
    #####: 1040:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1041:        return LOGGER_ADD_WATCHER_FAILED;
        -: 1042:    }
       10: 1043:    w->c = c;
       10: 1044:    w->sfd = sfd;
       10: 1045:    if (sfd == 0 && c == NULL) {
    #####: 1046:        w->t = LOGGER_WATCHER_STDERR;
        -: 1047:    } else {
       10: 1048:        w->t = LOGGER_WATCHER_CLIENT;
        -: 1049:    }
       10: 1050:    w->id = x;
       10: 1051:    w->eflags = f;
       10: 1052:    w->min_gid = logger_get_gid();
       10: 1053:    w->buf = bipbuf_new(settings.logger_watcher_buf_size);
       10: 1054:    if (w->buf == NULL) {
    #####: 1055:        free(w);
    #####: 1056:        pthread_mutex_unlock(&logger_stack_lock);
    #####: 1057:        return LOGGER_ADD_WATCHER_FAILED;
        -: 1058:    }
       10: 1059:    bipbuf_offer(w->buf, (unsigned char *) "OK\r\n", 4);
        -: 1060:
       10: 1061:    watchers[x] = w;
       10: 1062:    watcher_count++;
        -: 1063:    /* Update what flags the global logs will watch */
       10: 1064:    logger_set_flags();
       10: 1065:    pthread_cond_signal(&logger_stack_cond);
        -: 1066:
       10: 1067:    pthread_mutex_unlock(&logger_stack_lock);
       10: 1068:    return LOGGER_ADD_WATCHER_OK;
        -: 1069:}
